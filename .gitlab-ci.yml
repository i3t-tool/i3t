# Run pipeline only on master branch, tags and merge requests
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")

image: cvutdcgi/i3t-ci

stages:
  - lint
  - build
  - test
  - pass

# How to write paths: https://stackoverflow.com/a/55391444
.changes-rules:
  cpp:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "Dependencies/*"
        - .clang-format
        - .clang-tidy
        - .gitlab-ci.yml
        - .gitmodules
        - CMakeLists.txt
        - "**/*.{h,cpp}"
        - "**/*.{h,cpp}"

# Linting phase
check-format:
  stage: lint
  rules:
    - !reference [.changes-rules, cpp]
  script:
    - bash Scripts/CheckFormat.sh

###

build-app:
  stage: build
  rules:
    - !reference [.changes-rules, cpp]
  script:
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
    - cmake --build build --config Debug --target I3T -j 8
    - apt update && apt install -y zip
    - bash Scripts/CreateBundle.sh --suffix Linux Debug
  artifacts:
    paths:
      - Binaries
    expire_in: 1 week
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  dependencies:
    - check-format

build-tests:
  stage: build
  rules:
    - !reference [.changes-rules, cpp]
  script:
    - mkdir out && cd out
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - cmake --build . -j 8 --target I3TTest
  artifacts:
    paths:
      - Binaries
    expire_in: 1 week
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  dependencies:
    - check-format

###

# run tests using the binary built before
test:
  stage: test
  rules:
    - !reference [.changes-rules, cpp]
  script:
    - xvfb-run Binaries/Debug/I3TTest
  dependencies:
    - build-tests

test-e2e:
    stage: test
    rules:
      - !reference [ .changes-rules, cpp ]
    variables:
      I3T_TEST_AUTO_RUN: "1"
    script:
        - xvfb-run Binaries/Debug/I3T
    dependencies:
        - build-app

###

# Do not remove this job!
pass:
  stage: pass
  script:
    - echo "Pipeline passed"
