contentFiles {
	contentFile \data\content.cnt
}
scene {
	camera {
		position 1.94389 1.08368 0.312188
		lookAt -0.0700714 -0.314727 0.0664942
		up 0 1 0
		orbitCenter -0.0700714 -0.314727 0.0664942
		radians 1
	}
	desc {
Demonstrace 



Zadavaji se dva kvaterniony (zluty a modry), mezi kterymi se interpoluje - zadavaji se osou a uhlem.

Modul cyklu pak generuje hodnotu parametru z intervalu <0,1>



1. odlisnosti Lerp a Slerp

    Lerp (bily vektor) jen mixuje slozky, ale vystupni quat  se mus normalizovat

    Slerp (zeleny) interpoluje "uhel" ve 4D (arccos(q.r)). Bere ten kratsi oblouk.



    Slerp se pohybuje s konstantni uhlovou rychlosti. 

   Lerp se u 

        t blizko 0 opozduje vuci slerpu, 

        v t = 0, 0.5 a 1 se sejdou, 

        t blizko 1 se zrychluje.

   

2. ukazka interpolace po delsim uhlu (cos < 0)

    LongWaySlerp (cerveny) bere ten delsi uhel 

   

Pozor 

- pri ruznem zoomu se obcas nezobrazuji zaporna znamenka floatu.

- pro zaporne uhly je lerp ve stejnem obloukum jako lon way slerp.}
		position 875 3
}
transformationSpace {
	position 3 202
	projectionPosition -276 -432
	projectionScale 1.15848
	transformationForm {
		position 864 -300
		inputsStorage 23 0 
		inputsMultiOut -1 
		transformations {
			rotationY {
				params 0
				default 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				matrix 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				isLocked 1
				useSynergies 1
			}
		}
	}
	transformationForm {
		position 1056 -300
		inputsStorage -1 
		inputsMultiOut 1 0 
		object objects basics vectors blue
		transformations {
		}
	}
	transformationForm {
		position 864 -432
		inputsStorage 29 0 
		inputsMultiOut -1 
		transformations {
			rotationY {
				params 0
				default 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				matrix 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				isLocked 1
				useSynergies 1
			}
		}
	}
	transformationForm {
		position 1056 -432
		inputsStorage -1 
		inputsMultiOut 5 0 
		object objects basics vectors yellow
		transformations {
		}
	}
	transformationForm {
		position 864 -156
		inputsStorage 30 0 
		inputsMultiOut -1 
		transformations {
			rotationY {
				params 0
				default 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				matrix 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				isLocked 1
				useSynergies 1
			}
		}
	}
	transformationForm {
		position 1056 -156
		inputsStorage -1 
		inputsMultiOut 9 0 
		object objects basics vectors green
		transformations {
		}
	}
	transformationForm {
		position 876 60
		inputsStorage 31 0 
		inputsMultiOut -1 
		transformations {
			rotationY {
				params 0
				default 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				matrix 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				isLocked 1
				useSynergies 1
			}
		}
	}
	transformationForm {
		position 1068 60
		inputsStorage -1 
		inputsMultiOut 13 0 
		object objects basics vectors white
		transformations {
		}
	}
	transformationForm {
		position 876 192
		inputsStorage 37 0 
		inputsMultiOut -1 
		transformations {
			rotationY {
				params 0
				default 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				matrix 1 0 -0 0 0 1 0 0 0 0 1 0 0 0 0 1
				isLocked 1
				useSynergies 1
			}
		}
	}
	transformationForm {
		position 1068 192
		inputsStorage -1 
		inputsMultiOut 17 0 
		object objects basics vectorX
		transformations {
		}
	}
	transformations {
	}
	operators {
		FloatVecToQuat {
		hint {
Koncovy kvaternion

}
			position -144 -228
			inputs 21 0 -1 22 0  
		}
		FloatSender {
			position -276 -228
			inputs -1  
			value 6.765 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1
			manual 6.765 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1
			default 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
		}
		Vector3Sender {
			position -276 -156
			inputs -1  
			value 0.625 3.24 -1.515 1 0 1 0 0 0 0 1 0 0 0 0 1
			manual 0.625 3.24 -1.515 1 0 1 0 0 0 0 1 0 0 0 0 1
			default 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
		}
		QuatToMatrix {
			position 624 -300
			inputs 20 0  
		}
		QuatSlerp {
		hint {
SLERP se pohybuje konstantn9 uhlovou rychlosti (ve 4D)}
			position 300 -156
			inputs 26 0 20 0 32 0  
		}
		QuatLerp {
		hint {
Lerp a Slerp se kryji pro t=0, 0.5 a 1.

Lerp se zpocatku opozduje za Slerpem, v 0,5 se prekryji a pak Lerp predbiha slerp.

}
			position 300 -48
			inputs 26 0 20 0 32 0  
		}
		FloatVecToQuat {
		hint {
Pocatecni kvaternion

}
			position -144 -432
			inputs 27 0 -1 28 0  
		}
		FloatSender {
			position -276 -432
			inputs -1  
			value 4.23 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1
			manual 4.23 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1
			default 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
		}
		Vector3Sender {
			position -276 -360
			inputs -1  
			value -0.83 1.665 -0.375 1 0 1 0 0 0 0 1 0 0 0 0 1
			manual -0.83 1.665 -0.375 1 0 1 0 0 0 0 1 0 0 0 0 1
			default 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
		}
		QuatToMatrix {
			position 624 -432
			inputs 26 0  
		}
		QuatToMatrix {
			position 624 -156
			inputs 24 0  
		}
		QuatToMatrix {
			position 636 60
			inputs 35 0  
		}
		floatCycle {
		hint {
Parametr interpolace}
			position -273.132 -1.81711
			inputs -1 -1 -1  
			value 0.6 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1
			manual 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
			default 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
			from 0
			to 1
			step 0.01
			mode 2
			manualStep 0.01
			pause 0
			defStep 0.01
			defFrom 0
			defTo 1
			playerInputs -1 -1 -1 -1 -1  
		}
		NormalizeQuat {
		hint {
Tato normalizace je nutna - LERP zkracuje kvaternion}
			position 300 60
			inputs 25 0  
		}
		QuatLongWaySlerp {
			position 300 144
			inputs 26 0 20 0 32 0  
		}
		QuatToMatrix {
			position 636 192
			inputs 36 0  
		}
	}
}
