import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Vp::SceneModel","description":"","frontmatter":{"title":"Vp::SceneModel","summary":"Viewport entity representing a Model node in Core/GUI."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1SceneModel.md","filePath":"cpp-api-reference/classes/classVp_1_1SceneModel.md"}'),n={name:"cpp-api-reference/classes/classVp_1_1SceneModel.md"},l=t(`<h1 id="vp-scenemodel" tabindex="-1">Vp::SceneModel <a class="header-anchor" href="#vp-scenemodel" aria-label="Permalink to &quot;Vp::SceneModel&quot;">​</a></h1><p><a href="./.html">Viewport</a> entity representing a Model node in Core/GUI.</p><p><code>#include &quot;Viewport/entity/nodes/SceneModel.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html">Vp::TexturedObject</a>, <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html">Vp::GameObject</a>, <a href="/cpp-api-reference/classes/classvp_1_1entity.html">Vp::Entity</a></p><p>Inherited by <a href="/cpp-api-reference/classes/classvp_1_1scenecamera.html">Vp::SceneCamera</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-scenemodel">SceneModel</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classvp_1_1phongshader.html">PhongShader</a> * shader)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-scenemodel">SceneModel</a></strong>(std::string modelAlias, <a href="/cpp-api-reference/classes/classvp_1_1phongshader.html">PhongShader</a> * shader)&lt;br&gt;Load mesh using an alias.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-getmodel">getModel</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-onsceneadd">onSceneAdd</a></strong>(<a href="/cpp-api-reference/classes/classvp_1_1scene.html">Scene</a> &amp; scene) override&lt;br&gt;Called when the entity is added to a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-onsceneremove">onSceneRemove</a></strong>(<a href="/cpp-api-reference/classes/classvp_1_1scene.html">Scene</a> &amp; scene) override&lt;br&gt;Called when the entity is removed from a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classvp_1_1shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) override&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-setmodel">setModel</a></strong>(std::string modelAlias)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#function-update">update</a></strong>(<a href="/cpp-api-reference/classes/classvp_1_1scene.html">Scene</a> &amp; scene) override</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::weak_ptr&lt; <a href="/cpp-api-reference/classes/classvp_1_1coloredobject.html">ColoredObject</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#variable-m-axes">m_axes</a></strong> &lt;br&gt;Visualisation of the basis vectors.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#typedef-id">Core::ID</a></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#variable-m-guinodeid">m_guiNodeId</a></strong> &lt;br&gt;ID of the gui node object is representing.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#variable-m-modelalias">m_modelAlias</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1scenemodel.html#variable-m-showaxes">m_showAxes</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html">Vp::TexturedObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html#function-texturedobject">TexturedObject</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classvp_1_1phongshader.html">PhongShader</a> * shader)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html">Vp::TexturedObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html#variable-m-tint">m_tint</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1texturedobject.html#variable-m-tintstrength">m_tintStrength</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html">Vp::GameObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#function-gameobject">GameObject</a></strong>() =default&lt;br&gt;Creates an empty <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html">GameObject</a>.</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#function-gameobject">GameObject</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classvp_1_1objectshader.html">ObjectShader</a> * shader)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#function-dispose">dispose</a></strong>() override</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html">Vp::GameObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classcore_1_1mesh.html">Core::Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#variable-m-mesh">m_mesh</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#variable-m-opacity">m_opacity</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classvp_1_1entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-entity">Entity</a></strong>()</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-~entity">~Entity</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-dispose">dispose</a></strong>() =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacevp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-getdisplaytype">getDisplayType</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-gethighlightcolor">getHighlightColor</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-ishighlighted">isHighlighted</a></strong>() const</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-setdisplaytype">setDisplayType</a></strong>(<a href="/cpp-api-reference/namespaces/namespacevp.html#enum-displaytype">DisplayType</a> type)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-sethighlightcolor">setHighlightColor</a></strong>(glm::vec3 highlightColor)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-sethighlighted">setHighlighted</a></strong>(bool highlight)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-backfacecull">m_backFaceCull</a></strong></td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-explicittransparencyorder">m_explicitTransparencyOrder</a></strong> &lt;br&gt;Explicit order for ordered transparency.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-highlight">m_highlight</a></strong> &lt;br&gt;Whether to paint this entity with an outline, can be used for selection or just highlighting.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-highlightcolor">m_highlightColor</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-highlightusedepth">m_highlightUseDepth</a></strong> &lt;br&gt;Whether the highlight outline should respect the scene&#39;s depth buffer.</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-modelmatrix">m_modelMatrix</a></strong> &lt;br&gt;Model transformation of the entity.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-opaque">m_opaque</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-selectable">m_selectable</a></strong> &lt;br&gt;Whether this entity should be written into the selection stencil buffer.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-selectionid">m_selectionId</a></strong> &lt;br&gt;Id of the object, -1 if not assigned, for selection purposes.</td></tr><tr><td><a href="/cpp-api-reference/classes/classvp_1_1shader.html">Shader</a> *</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-shader">m_shader</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-visible">m_visible</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether this entity should be rendered using order independent transparency, relevant if using a shader that supports wboit.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-wboitfunc">m_wboitFunc</a></strong> &lt;br&gt;Index of the weight function to be used in wboit.</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespacevp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1entity.html#variable-m-displaytype">m_displayType</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-scenemodel" tabindex="-1">function SceneModel <a class="header-anchor" href="#function-scenemodel" aria-label="Permalink to &quot;function SceneModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">SceneModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::Mesh </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> mesh,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PhongShader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> shader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">SceneModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::Mesh </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> mesh,</span></span>
<span class="line"><span style="color:#24292E;">    PhongShader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> shader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-scenemodel-1" tabindex="-1">function SceneModel <a class="header-anchor" href="#function-scenemodel-1" aria-label="Permalink to &quot;function SceneModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">SceneModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string modelAlias,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PhongShader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> shader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">SceneModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string modelAlias,</span></span>
<span class="line"><span style="color:#24292E;">    PhongShader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> shader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Load mesh using an alias.</p><h3 id="function-getmodel" tabindex="-1">function getModel <a class="header-anchor" href="#function-getmodel" aria-label="Permalink to &quot;function getModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModel</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModel</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-onsceneadd" tabindex="-1">function onSceneAdd <a class="header-anchor" href="#function-onsceneadd" aria-label="Permalink to &quot;function onSceneAdd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneAdd</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneAdd</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called when the entity is added to a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classvp_1_1scene.html">Scene</a> to which it has been added</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-onsceneadd">Vp::Entity::onSceneAdd</a></p><h3 id="function-onsceneremove" tabindex="-1">function onSceneRemove <a class="header-anchor" href="#function-onsceneremove" aria-label="Permalink to &quot;function onSceneRemove&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneRemove</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneRemove</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called when the entity is removed from a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classvp_1_1scene.html">Scene</a> from which it has been removed</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1entity.html#function-onsceneremove">Vp::Entity::onSceneRemove</a></p><h3 id="function-render" tabindex="-1">function render <a class="header-anchor" href="#function-render" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">silhouette</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">silhouette</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#function-render">Vp::GameObject::render</a></p><p>Currently there is no error checking and wrongly passed shader type will CAUSE UNDEFINED BEHAVIOUR!</p><p>Using dynamic casts instead might be undesirable (slow) here (this might just be a premature optimalization) Generally the shader passed to this method is the m_shader of this entity. However we need functionality that allows us to change the shader temporarily (like for drawing silhouettes) Because of this the shader can also sometimes be something else, usually some derived type of the one the entity expects. I couldn&#39;t find a way to inform what kinds of shaders an entity is able to use in its render methods. The type of the shader must be the base <a href="/cpp-api-reference/classes/classvp_1_1shader.html">Shader</a> class and so some kind of casting must occur.</p><p>Another option could be to use some kind of a typeid/enum system that tells us what type a shader is (rather than use dynamic cast). But that approach ignores inheritance which we need and having multiple types of shaders and entity member variable seems very inflexible.</p><p>The true elegant solution probably doesn&#39;t involve inheritance at all and rather uses composition, together with an ECS or something. But it was decided to not dive into that realm and so we are stuck with this seemingly simple but not very flexible inheritance structure.</p><h3 id="function-setmodel" tabindex="-1">function setModel <a class="header-anchor" href="#function-setmodel" aria-label="Permalink to &quot;function setModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">modelAlias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">modelAlias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-update" tabindex="-1">function update <a class="header-anchor" href="#function-update" aria-label="Permalink to &quot;function update&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1gameobject.html#function-update">Vp::GameObject::update</a></p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-axes" tabindex="-1">variable m_axes <a class="header-anchor" href="#variable-m-axes" aria-label="Permalink to &quot;variable m_axes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::weak_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ColoredObject </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_axes;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::weak_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ColoredObject </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_axes;</span></span></code></pre></div><p>Visualisation of the basis vectors.</p><h3 id="variable-m-guinodeid" tabindex="-1">variable m_guiNodeId <a class="header-anchor" href="#variable-m-guinodeid" aria-label="Permalink to &quot;variable m_guiNodeId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::ID m_guiNodeId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::ID m_guiNodeId;</span></span></code></pre></div><p>ID of the gui node object is representing.</p><h3 id="variable-m-modelalias" tabindex="-1">variable m_modelAlias <a class="header-anchor" href="#variable-m-modelalias" aria-label="Permalink to &quot;variable m_modelAlias&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string m_modelAlias {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string m_modelAlias {};</span></span></code></pre></div><h3 id="variable-m-showaxes" tabindex="-1">variable m_showAxes <a class="header-anchor" href="#variable-m-showaxes" aria-label="Permalink to &quot;variable m_showAxes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_showAxes {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_showAxes {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>`,70),o=[l];function p(r,c,i,d,h,y){return s(),a("div",null,o)}const u=e(n,[["render",p]]);export{g as __pageData,u as default};
