import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.0f749972.js";const h=JSON.parse('{"title":"Core::ResourceManager","description":"","frontmatter":{"title":"Core::ResourceManager","summary":"Resource manager for loading resources from the filesystem."},"headers":[],"relativePath":"cpp-api-reference/classes/classCore_1_1ResourceManager.md","filePath":"cpp-api-reference/classes/classCore_1_1ResourceManager.md"}'),l={name:"cpp-api-reference/classes/classCore_1_1ResourceManager.md"},o=e(`<h1 id="core-resourcemanager" tabindex="-1">Core::ResourceManager <a class="header-anchor" href="#core-resourcemanager" aria-label="Permalink to &quot;Core::ResourceManager&quot;">​</a></h1><p><a href="/cpp-api-reference/classes/classCore_1_1Resource.html">Resource</a> manager for loading resources from the filesystem. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Core/Resources/ResourceManager.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classModule.html">Module</a>, <a href="/cpp-api-reference/classes/classIStateful.html">IStateful</a></p><h2 id="public-classes" tabindex="-1">Public Classes <a class="header-anchor" href="#public-classes" aria-label="Permalink to &quot;Public Classes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1ResourceManager_1_1ModelSaveEntry.html">ModelSaveEntry</a></strong></td></tr></tbody></table><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-~resourcemanager">~ResourceManager</a></strong>()&lt;br&gt;If true loaded models will be normalized.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-cleanupmodelfiles">cleanUpModelFiles</a></strong>(<a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene)&lt;br&gt;Ensure there are no unused model files in the scene_data directory of the passed scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-clearglobal">clearGlobal</a></strong>() override&lt;br&gt;Set the global state to some default empty state.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-clearscene">clearScene</a></strong>() override&lt;br&gt;Set the scene state to some default empty state.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/structCore_1_1ResourceManager_1_1ModelSaveEntry.html">ModelSaveEntry</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-deserializemodels">deserializeModels</a></strong>(const rapidjson::Value &amp; modelsEntry)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Resource.html">Resource</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-getdefaultresources">getDefaultResources</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-resourcetype">ResourceType</a> type)&lt;br&gt;Returns default resources of type.</td></tr><tr><td>std::vector&lt; std::string &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-getimportedresourcealiases">getImportedResourceAliases</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-importmodel">importModel</a></strong>(const fs::path &amp; path, bool normalize)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-loaddefaultresources">loadDefaultResources</a></strong>(rapidjson::Document &amp; doc)&lt;br&gt;Loads resources from the a json document and marks them as default.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-loadglobal">loadGlobal</a></strong>(const <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> &amp; memento) override&lt;br&gt;Load global state from a memento.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-loadscene">loadScene</a></strong>(const <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> &amp; memento, <a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene) override&lt;br&gt;Called on scene load, undo and redo.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-mesh">mesh</a></strong>(const std::string &amp; alias, const std::string &amp; path)&lt;br&gt;Get or create model by alias or file.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-mesh">mesh</a></strong>(const std::string &amp; alias, <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">Mesh::PrimitiveType</a> primitiveType, const float * verts, const unsigned int nVertices, const float * colors, const unsigned int nColors)&lt;br&gt;Get model by alias or create it using provided vertex data.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-mesh">mesh</a></strong>(const std::string &amp; alias, <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">Mesh::PrimitiveType</a> primitiveType, const float * verts, const unsigned int nVertices, const unsigned int * indices, const unsigned int nIndices, const float * colors, const unsigned int nColors)&lt;br&gt;Get model by alias or create it using provided indexed vertex data.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-mesh">mesh</a></strong>(const std::string &amp; path)&lt;br&gt;Get or create model from file.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-meshbyalias">meshByAlias</a></strong>(const std::string &amp; alias)&lt;br&gt;Get existing model using an alias.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-registerdefault">registerDefault</a></strong>(const std::string &amp; alias)&lt;br&gt;Register an alias as a &quot;default&quot; resource.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-removeimportedmodel">removeImportedModel</a></strong>(const std::string &amp; alias)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-removeresource">removeResource</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1ManagedResource.html">ManagedResource</a> * managedResource, bool force =false)&lt;br&gt;Dispose the specified resource and remove it from the manager.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-resourceexists">resourceExists</a></strong>(size_t id)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-resourceexists">resourceExists</a></strong>(std::string &amp; alias)</td></tr><tr><td>virtual <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-saveglobal">saveGlobal</a></strong>() override&lt;br&gt;Save shared global state.</td></tr><tr><td>virtual <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-savescene">saveScene</a></strong>(<a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene) override&lt;br&gt;Save state for the current scene.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-serializemodels">serializeModels</a></strong>(std::vector&lt; std::string &gt; modelAliases, <a href="/cpp-api-reference/classes/classState_1_1Scene.html">Scene</a> * scene, rapidjson::Value &amp; targetArr, rapidjson::Document::AllocatorType &amp; a)</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-shader">shader</a></strong>(const std::string &amp; alias, const std::string &amp; vertShader, const std::string &amp; fragShader)&lt;br&gt;Get or create shader by alias or files.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-shader">shader</a></strong>(const std::string &amp; vertShader, const std::string &amp; fragShader)&lt;br&gt;Get or create shader from files.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-shaderbyalias">shaderByAlias</a></strong>(const std::string &amp; alias)&lt;br&gt;Get existing shader using an alias.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-shaderg">shaderG</a></strong>(const std::string &amp; alias, const std::string &amp; vertShader, const std::string &amp; fragShader, const std::string &amp; geoShader)&lt;br&gt;Get or create shader by alias or files.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-shaderg">shaderG</a></strong>(const std::string &amp; vertShader, const std::string &amp; fragShader, const std::string &amp; geoShader)&lt;br&gt;Get or create shader from files.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-texture">texture</a></strong>(const std::string &amp; alias, const std::string &amp; path)&lt;br&gt;Get or create texture by alias or path.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-texture">texture</a></strong>(const std::string &amp; path)&lt;br&gt;Get or create texture for file path.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-texturebyalias">textureByAlias</a></strong>(const std::string &amp; alias)&lt;br&gt;Get existing texture using an alias.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-updatemodelfiles">updateModelFiles</a></strong>(<a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene)&lt;br&gt;Ensure that model files required by the scene are in the right place.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html">ResourceManager</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-instance">instance</a></strong>()</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#variable-m-forceminimumload">m_forceMinimumLoad</a></strong> &lt;br&gt;If true any resource fetches will not be cached.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#variable-m-forcemodelnormalize">m_forceModelNormalize</a></strong> &lt;br&gt;If true just the bare minimum of resources is loaded.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#variable-m-forcereload">m_forceReload</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classModule.html">Module</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-module">Module</a></strong>() =default</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-~module">~Module</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onbeginframe">onBeginFrame</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onclose">onClose</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onendframe">onEndFrame</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-oninit">onInit</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onupdate">onUpdate</a></strong>(double deltaSeconds)</td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classModule.html">Module</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#friend-application">Application</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classIStateful.html">IStateful</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classIStateful.html#function-~istateful">~IStateful</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classIStateful.html#function-emptymemento">emptyMemento</a></strong>()&lt;br&gt;Create an empty memento (rapidjson::Document)</td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ResourceManager</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ResourceManager</span><span style="color:#24292E;">;</span></span></code></pre></div><p><a href="/cpp-api-reference/classes/classCore_1_1Resource.html">Resource</a> manager for loading resources from the filesystem.</p><p>Can be accessed from a singleton <a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-instance">ResourceManager::instance()</a></p><p>Currently loads and manages models, shaders and textures.</p><p>Models are loaded using assimp or created directly from vertex arrays.</p><p>Resources are uniquely identified using a hash. Usually a hash of their file path string. Each resource can have an alias. A single string using which it can be retrieved. Aliases cannot be reassigned and point to a single resource type.</p><p>Finally a resource can be marked as default and returned using <a href="/cpp-api-reference/classes/classCore_1_1ResourceManager.html#function-getdefaultresources">getDefaultResources()</a>.</p><p>An RM define is provided to shorten &quot;Core::ResourceManager&quot; An RMI define shortens &quot;Core::ResourceManager::instance()&quot;</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-resourcemanager" tabindex="-1">function ~ResourceManager <a class="header-anchor" href="#function-resourcemanager" aria-label="Permalink to &quot;function ~ResourceManager&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#B392F0;">ResourceManager</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">ResourceManager</span><span style="color:#24292E;">()</span></span></code></pre></div><p>If true loaded models will be normalized.</p><h3 id="function-cleanupmodelfiles" tabindex="-1">function cleanUpModelFiles <a class="header-anchor" href="#function-cleanupmodelfiles" aria-label="Permalink to &quot;function cleanUpModelFiles&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cleanUpModelFiles</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cleanUpModelFiles</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Ensure there are no unused model files in the scene_data directory of the passed scene.</p><h3 id="function-clearglobal" tabindex="-1">function clearGlobal <a class="header-anchor" href="#function-clearglobal" aria-label="Permalink to &quot;function clearGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clearGlobal</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearGlobal</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set the global state to some default empty state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-clearglobal">IStateful::clearGlobal</a></p><h3 id="function-clearscene" tabindex="-1">function clearScene <a class="header-anchor" href="#function-clearscene" aria-label="Permalink to &quot;function clearScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clearScene</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearScene</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set the scene state to some default empty state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-clearscene">IStateful::clearScene</a></p><h3 id="function-deserializemodels" tabindex="-1">function deserializeModels <a class="header-anchor" href="#function-deserializemodels" aria-label="Permalink to &quot;function deserializeModels&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">ModelSaveEntry</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">deserializeModels</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rapidjson</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">modelsEntry</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">ModelSaveEntry</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">deserializeModels</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rapidjson</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">modelsEntry</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-getdefaultresources" tabindex="-1">function getDefaultResources <a class="header-anchor" href="#function-getdefaultresources" aria-label="Permalink to &quot;function getDefaultResources&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Resource</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getDefaultResources</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ResourceType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Resource</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getDefaultResources</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ResourceType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Returns default resources of type.</p><h3 id="function-getimportedresourcealiases" tabindex="-1">function getImportedResourceAliases <a class="header-anchor" href="#function-getimportedresourcealiases" aria-label="Permalink to &quot;function getImportedResourceAliases&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getImportedResourceAliases</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getImportedResourceAliases</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-importmodel" tabindex="-1">function importModel <a class="header-anchor" href="#function-importmodel" aria-label="Permalink to &quot;function importModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">importModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fs</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">normalize</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">importModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fs</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">normalize</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-loaddefaultresources" tabindex="-1">function loadDefaultResources <a class="header-anchor" href="#function-loaddefaultresources" aria-label="Permalink to &quot;function loadDefaultResources&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadDefaultResources</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rapidjson</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Document</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">doc</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadDefaultResources</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rapidjson</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Document</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">doc</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Loads resources from the a json document and marks them as default.</p><p>The json document must contain an &quot;defaultResources&quot; entry.</p><h3 id="function-loadglobal" tabindex="-1">function loadGlobal <a class="header-anchor" href="#function-loadglobal" aria-label="Permalink to &quot;function loadGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadGlobal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">memento</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadGlobal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">memento</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Load global state from a memento.</p><p><strong>Parameters</strong>:</p><ul><li><strong>memento</strong> New global state</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-loadglobal">IStateful::loadGlobal</a></p><h3 id="function-loadscene" tabindex="-1">function loadScene <a class="header-anchor" href="#function-loadscene" aria-label="Permalink to &quot;function loadScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">memento</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">memento</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called on scene load, undo and redo.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> The current scene or nullptr (in case of undo/redo)</li><li><strong>memento</strong> New scene state</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-loadscene">IStateful::loadScene</a></p><h3 id="function-mesh" tabindex="-1">function mesh <a class="header-anchor" href="#function-mesh" aria-label="Permalink to &quot;function mesh&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mesh</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mesh</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create model by alias or file.</p><p><strong>Return</strong>: Pointer to the <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object.</p><p>Necessary textures might be loaded as well. Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-mesh-1" tabindex="-1">function mesh <a class="header-anchor" href="#function-mesh-1" aria-label="Permalink to &quot;function mesh&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mesh</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PrimitiveType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">primitiveType</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">verts</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nVertices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">colors</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nColors</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mesh</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PrimitiveType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">primitiveType</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">verts</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nVertices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">colors</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nColors</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get model by alias or create it using provided vertex data.</p><p><strong>Parameters</strong>:</p><ul><li><strong>alias</strong> <a href="/cpp-api-reference/classes/classCore_1_1Resource.html">Resource</a> alias</li><li><strong>primitiveType</strong> <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> primitive type</li><li><strong>verts</strong> Pointer to vertex position array</li><li><strong>nVertices</strong> Vertex position array size</li><li><strong>colors</strong> Pointer to color array</li><li><strong>nColors</strong> <a href="/cpp-api-reference/classes/structColor.html">Color</a> array size</li></ul><p><strong>Return</strong>: Pointer to the <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object.</p><p>Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-mesh-2" tabindex="-1">function mesh <a class="header-anchor" href="#function-mesh-2" aria-label="Permalink to &quot;function mesh&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mesh</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PrimitiveType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">primitiveType</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">verts</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nVertices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">indices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nIndices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">colors</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nColors</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mesh</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PrimitiveType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">primitiveType</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">verts</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nVertices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">indices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nIndices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">colors</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nColors</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get model by alias or create it using provided indexed vertex data.</p><p><strong>Parameters</strong>:</p><ul><li><strong>alias</strong> <a href="/cpp-api-reference/classes/classCore_1_1Resource.html">Resource</a> alias</li><li><strong>primitiveType</strong> <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> primitive type</li><li><strong>verts</strong> Pointer to vertex position array</li><li><strong>nVertices</strong> Vertex position array size</li><li><strong>indices</strong> Pointer to indices array</li><li><strong>nIndices</strong> Indices array size</li><li><strong>colors</strong> Pointer to color array</li><li><strong>nColors</strong> <a href="/cpp-api-reference/classes/structColor.html">Color</a> array size</li></ul><p><strong>Return</strong>: Pointer to the <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object.</p><p>Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-mesh-3" tabindex="-1">function mesh <a class="header-anchor" href="#function-mesh-3" aria-label="Permalink to &quot;function mesh&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mesh</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mesh</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create model from file.</p><p><strong>Return</strong>: Pointer to the <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object.</p><p>Necessary textures might be loaded as well.</p><h3 id="function-meshbyalias" tabindex="-1">function meshByAlias <a class="header-anchor" href="#function-meshbyalias" aria-label="Permalink to &quot;function meshByAlias&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">meshByAlias</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">meshByAlias</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get existing model using an alias.</p><p><strong>Return</strong>: Pointer to the <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object.</p><h3 id="function-registerdefault" tabindex="-1">function registerDefault <a class="header-anchor" href="#function-registerdefault" aria-label="Permalink to &quot;function registerDefault&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerDefault</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerDefault</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Register an alias as a &quot;default&quot; resource.</p><p>The aliased resource must exist.</p><h3 id="function-removeimportedmodel" tabindex="-1">function removeImportedModel <a class="header-anchor" href="#function-removeimportedmodel" aria-label="Permalink to &quot;function removeImportedModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeImportedModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeImportedModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-removeresource" tabindex="-1">function removeResource <a class="header-anchor" href="#function-removeresource" aria-label="Permalink to &quot;function removeResource&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeResource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ManagedResource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">managedResource</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">force</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeResource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ManagedResource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">managedResource</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">force</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Dispose the specified resource and remove it from the manager.</p><p><strong>Parameters</strong>:</p><ul><li><strong>managedResource</strong> The actual resource returned by fetch methods.</li></ul><p><strong>Return</strong>: false on failure</p><h3 id="function-resourceexists" tabindex="-1">function resourceExists <a class="header-anchor" href="#function-resourceexists" aria-label="Permalink to &quot;function resourceExists&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resourceExists</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resourceExists</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-resourceexists-1" tabindex="-1">function resourceExists <a class="header-anchor" href="#function-resourceexists-1" aria-label="Permalink to &quot;function resourceExists&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resourceExists</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resourceExists</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-saveglobal" tabindex="-1">function saveGlobal <a class="header-anchor" href="#function-saveglobal" aria-label="Permalink to &quot;function saveGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveGlobal</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveGlobal</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Save shared global state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-saveglobal">IStateful::saveGlobal</a></p><h3 id="function-savescene" tabindex="-1">function saveScene <a class="header-anchor" href="#function-savescene" aria-label="Permalink to &quot;function saveScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Save state for the current scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> The current scene or nullptr (in case of undo/redo)</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-savescene">IStateful::saveScene</a></p><p>The scene parameter should contain a scene object for full filesystem saves and nullptr for quick undo/redo operations.</p><h3 id="function-serializemodels" tabindex="-1">function serializeModels <a class="header-anchor" href="#function-serializemodels" aria-label="Permalink to &quot;function serializeModels&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serializeModels</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">modelAliases</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rapidjson</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">targetArr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rapidjson</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Document</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">AllocatorType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serializeModels</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">modelAliases</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rapidjson</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">targetArr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rapidjson</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Document</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">AllocatorType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-shader" tabindex="-1">function shader <a class="header-anchor" href="#function-shader" aria-label="Permalink to &quot;function shader&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">vertShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fragShader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">vertShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fragShader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create shader by alias or files.</p><p><strong>Return</strong>: OpenGL id of the shader object</p><p>Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-shader-1" tabindex="-1">function shader <a class="header-anchor" href="#function-shader-1" aria-label="Permalink to &quot;function shader&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">vertShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fragShader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">vertShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fragShader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create shader from files.</p><p><strong>Return</strong>: OpenGL id of the shader object</p><h3 id="function-shaderbyalias" tabindex="-1">function shaderByAlias <a class="header-anchor" href="#function-shaderbyalias" aria-label="Permalink to &quot;function shaderByAlias&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shaderByAlias</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shaderByAlias</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get existing shader using an alias.</p><p><strong>Return</strong>: OpenGL id of the shader object</p><h3 id="function-shaderg" tabindex="-1">function shaderG <a class="header-anchor" href="#function-shaderg" aria-label="Permalink to &quot;function shaderG&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shaderG</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">vertShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fragShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">geoShader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shaderG</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">vertShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fragShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">geoShader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create shader by alias or files.</p><p><strong>Return</strong>: OpenGL id of the shader object</p><p>Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-shaderg-1" tabindex="-1">function shaderG <a class="header-anchor" href="#function-shaderg-1" aria-label="Permalink to &quot;function shaderG&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shaderG</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">vertShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fragShader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">geoShader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shaderG</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">vertShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fragShader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">geoShader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create shader from files.</p><p><strong>Return</strong>: OpenGL id of the shader object</p><h3 id="function-texture" tabindex="-1">function texture <a class="header-anchor" href="#function-texture" aria-label="Permalink to &quot;function texture&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">texture</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">texture</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create texture by alias or path.</p><p><strong>Return</strong>: OpenGL id of the texture object</p><p>Alias is assigned if it doesn&#39;t exist.</p><h3 id="function-texture-1" tabindex="-1">function texture <a class="header-anchor" href="#function-texture-1" aria-label="Permalink to &quot;function texture&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">texture</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">texture</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get or create texture for file path.</p><p><strong>Return</strong>: OpenGL id of the texture object</p><h3 id="function-texturebyalias" tabindex="-1">function textureByAlias <a class="header-anchor" href="#function-texturebyalias" aria-label="Permalink to &quot;function textureByAlias&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GLuint</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">textureByAlias</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">alias</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GLuint</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">textureByAlias</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">alias</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get existing texture using an alias.</p><p><strong>Return</strong>: OpenGL id of the texture object</p><h3 id="function-updatemodelfiles" tabindex="-1">function updateModelFiles <a class="header-anchor" href="#function-updatemodelfiles" aria-label="Permalink to &quot;function updateModelFiles&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateModelFiles</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateModelFiles</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Ensure that model files required by the scene are in the right place.</p><h3 id="function-instance" tabindex="-1">function instance <a class="header-anchor" href="#function-instance" aria-label="Permalink to &quot;function instance&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResourceManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResourceManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-forceminimumload" tabindex="-1">variable m_forceMinimumLoad <a class="header-anchor" href="#variable-m-forceminimumload" aria-label="Permalink to &quot;variable m_forceMinimumLoad&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_forceMinimumLoad {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_forceMinimumLoad {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>If true any resource fetches will not be cached.</p><h3 id="variable-m-forcemodelnormalize" tabindex="-1">variable m_forceModelNormalize <a class="header-anchor" href="#variable-m-forcemodelnormalize" aria-label="Permalink to &quot;variable m_forceModelNormalize&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_forceModelNormalize {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_forceModelNormalize {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>If true just the bare minimum of resources is loaded.</p><h3 id="variable-m-forcereload" tabindex="-1">variable m_forceReload <a class="header-anchor" href="#variable-m-forcereload" aria-label="Permalink to &quot;variable m_forceReload&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_forceReload {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_forceReload {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><hr><p>Updated on 2025-02-25 at 07:08:42 +0000</p>`,174),p=[o];function t(r,c,i,y,E,d){return a(),n("div",null,p)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
