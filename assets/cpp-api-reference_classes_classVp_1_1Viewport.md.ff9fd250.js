import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Vp::Viewport","description":"","frontmatter":{"title":"Vp::Viewport","summary":"Scene viewport class."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1Viewport.md","filePath":"cpp-api-reference/classes/classVp_1_1Viewport.md"}'),p={name:"cpp-api-reference/classes/classVp_1_1Viewport.md"},l=n(`<h1 id="vp-viewport" tabindex="-1">Vp::Viewport <a class="header-anchor" href="#vp-viewport" aria-label="Permalink to &quot;Vp::Viewport&quot;">​</a></h1><p><a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> viewport class. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Viewport/Viewport.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classModule.html">Module</a>, <a href="/cpp-api-reference/classes/classIStateful.html">IStateful</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-viewport">Viewport</a></strong>()&lt;br&gt;Creates an empty viewport.</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-~viewport">~Viewport</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-clearglobal">clearGlobal</a></strong>() override&lt;br&gt;Set the global state to some default empty state.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-clearscene">clearScene</a></strong>() override&lt;br&gt;Set the scene state to some default empty state.</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html">SceneCamera</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-createcamera">createCamera</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">Core::ID</a> guiNodeId)&lt;br&gt;Creates a <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html">SceneCamera</a> in the main scene to represent a Camera node.</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">SceneModel</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-createmodel">createModel</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">Core::ID</a> guiNodeId)&lt;br&gt;Creates a <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">SceneModel</a> in the main scene to represent a Model node.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawpreview">drawPreview</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &gt; &amp; renderTarget, int width, int height, <a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a> &gt; gameObject, const <a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a> &amp; renderOptions)&lt;br&gt;Draw a preview of an object into a framebuffer.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawscreen">drawScreen</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &gt; &amp; renderTarget, int width, int height, glm::mat4 view, glm::mat4 projection, const <a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a> &amp; renderOptions =<a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a>(), const <a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a> &amp; displayOptions =<a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a>())&lt;br&gt;Render viewport&#39;s main scene into a framebuffer with the specified camera matrices.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawviewport">drawViewport</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &gt; &amp; renderTarget, int width, int height, const <a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a> &amp; renderOptions =<a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a>(), const <a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a> &amp; displayOptions =<a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a>())&lt;br&gt;Render viewport&#39;s main scene into a framebuffer using its own camera.</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-getmainscene">getMainScene</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html">AggregateCamera</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-getmainviewportcamera">getMainViewportCamera</a></strong>()&lt;br&gt;Returns the viewport camera of the main scene.</td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Manipulators.html">Manipulators</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-getmanipulators">getManipulators</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-getpreviewscene">getPreviewScene</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/structVp_1_1ViewportSettings.html">ViewportSettings</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-getsettings">getSettings</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-loadglobal">loadGlobal</a></strong>(const <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> &amp; memento) override&lt;br&gt;Load global state from a memento.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-loadscene">loadScene</a></strong>(const <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> &amp; memento, <a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene) override&lt;br&gt;Called on scene load, undo and redo.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-oninit">onInit</a></strong>() override&lt;br&gt;Initializes scenes and loads assets.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-onupdate">onUpdate</a></strong>(double dt) override&lt;br&gt;Update scene logic.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-processinput">processInput</a></strong>(double dt, glm::vec2 mousePos, glm::ivec2 windowSize)&lt;br&gt;Process viewport user input.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-processselection">processSelection</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &gt; renderTarget, glm::vec2 mousePos, glm::ivec2 windowSize)</td></tr><tr><td>template &lt;typename T ,typename std::enable_if&lt; std::is_base_of&lt; Entity, T &gt;::value, bool &gt;::type =true&amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-removeentity">removeEntity</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; T &gt; &amp; entity)&lt;br&gt;Remove an entity from the main scene.</td></tr><tr><td>virtual <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-saveglobal">saveGlobal</a></strong>() override&lt;br&gt;Save shared global state.</td></tr><tr><td>virtual <a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-savescene">saveScene</a></strong>(<a href="/cpp-api-reference/classes/classState_1_1Scene.html">State::Scene</a> * scene) override&lt;br&gt;Save state for the current scene.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1Manipulators.html">Manipulators</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#variable-m-manipulators">m_manipulators</a></strong></td></tr></tbody></table><h2 id="friends" tabindex="-1">Friends <a class="header-anchor" href="#friends" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#friend-mainscene">MainScene</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#friend-scene">Scene</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#friend-scenecamera">SceneCamera</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#friend-scenemodel">SceneModel</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classModule.html">Module</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-module">Module</a></strong>() =default</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-~module">~Module</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onbeginframe">onBeginFrame</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onclose">onClose</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#function-onendframe">onEndFrame</a></strong>()</td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classModule.html">Module</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classModule.html#friend-application">Application</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classIStateful.html">IStateful</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classIStateful.html#function-~istateful">~IStateful</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a></td><td><strong><a href="/cpp-api-reference/classes/classIStateful.html#function-emptymemento">emptyMemento</a></strong>()&lt;br&gt;Create an empty memento (rapidjson::Document)</td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Viewport</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vp</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Viewport</span><span style="color:#24292E;">;</span></span></code></pre></div><p><a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> viewport class.</p><p>Has simple public interface to be used by <a href="/cpp-api-reference/namespaces/namespaceGUI.html">GUI</a></p><p>Manages &quot;global&quot; resources for drawing like shaders (via ResourceManager)</p><p>It also currently manages two viewport Scenes</p><ul><li>Main scene <ul><li><a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> used for the main viewport and user interaction</li><li>Used by <a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawviewport">drawViewport()</a> and <a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawscreen">drawScreen()</a>.</li></ul></li><li>Preview scene <ul><li><a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> for small 3D model previews</li><li>Used by <a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-drawpreview">drawPreview()</a></li></ul></li></ul><p><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html">Viewport</a> provides three functions to draw:</p><ul><li>The main scene from a viewport camera to be used as the main viewport</li><li>The main scene from an arbitrary camera specified by view and projection matrices</li><li>A preview of a model</li></ul><p>These very specific functions are provided rather than a generic draw function to avoid managing framebuffer objects outside this class. The scenes are drawn into a <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a>, which holds necessary framebuffers. Each function uses a different <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> with potentially different render settings. That means the main scene can be drawn with or without antialiasing for example. The settings are abstracted away using <a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a>.</p><p>Further, <a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a> are used to toggle visibility of certain objects.</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-viewport" tabindex="-1">function Viewport <a class="header-anchor" href="#function-viewport" aria-label="Permalink to &quot;function Viewport&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Viewport</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Viewport</span><span style="color:#24292E;">()</span></span></code></pre></div><p>Creates an empty viewport.</p><p>Before any other calls it should be initialized using init()</p><h3 id="function-viewport-1" tabindex="-1">function ~Viewport <a class="header-anchor" href="#function-viewport-1" aria-label="Permalink to &quot;function ~Viewport&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#B392F0;">Viewport</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">Viewport</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-clearglobal" tabindex="-1">function clearGlobal <a class="header-anchor" href="#function-clearglobal" aria-label="Permalink to &quot;function clearGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clearGlobal</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearGlobal</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set the global state to some default empty state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-clearglobal">IStateful::clearGlobal</a></p><h3 id="function-clearscene" tabindex="-1">function clearScene <a class="header-anchor" href="#function-clearscene" aria-label="Permalink to &quot;function clearScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clearScene</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearScene</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set the scene state to some default empty state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-clearscene">IStateful::clearScene</a></p><h3 id="function-createcamera" tabindex="-1">function createCamera <a class="header-anchor" href="#function-createcamera" aria-label="Permalink to &quot;function createCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneCamera</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">createCamera</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ID</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">guiNodeId</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneCamera</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">createCamera</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ID</span><span style="color:#24292E;"> </span><span style="color:#E36209;">guiNodeId</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Creates a <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html">SceneCamera</a> in the main scene to represent a Camera node.</p><p><strong>Parameters</strong>:</p><ul><li><strong>Id</strong> of the gui node equivalent.</li></ul><p><strong>Return</strong>: Weak pointer to it.</p><p>Can be later removed with <a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-removeentity">removeEntity()</a></p><h3 id="function-createmodel" tabindex="-1">function createModel <a class="header-anchor" href="#function-createmodel" aria-label="Permalink to &quot;function createModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneModel</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">createModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ID</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">guiNodeId</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneModel</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">createModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ID</span><span style="color:#24292E;"> </span><span style="color:#E36209;">guiNodeId</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Creates a <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">SceneModel</a> in the main scene to represent a Model node.</p><p><strong>Parameters</strong>:</p><ul><li><strong>id</strong> Id of the gui node equivalent.</li></ul><p><strong>Return</strong>: Weak pointer to it.</p><p>Can be later removed with <a href="/cpp-api-reference/classes/classVp_1_1Viewport.html#function-removeentity">removeEntity()</a></p><h3 id="function-drawpreview" tabindex="-1">function drawPreview <a class="header-anchor" href="#function-drawpreview" aria-label="Permalink to &quot;function drawPreview&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawPreview</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneRenderTarget</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderTarget</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">width</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">height</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">gameObject</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RenderOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawPreview</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneRenderTarget</span><span style="color:#24292E;"> &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderTarget</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">width</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">gameObject</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RenderOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Draw a preview of an object into a framebuffer.</p><p><strong>Parameters</strong>:</p><ul><li><strong>renderTarget</strong> A reference to a shared pointer containing the desired render target. An empty pointer can be passed and it will be filled with an appropriate render target.</li><li><strong>width</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> width in pixels</li><li><strong>height</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> height in pixels</li><li><strong>gameObject</strong> Game object to preview</li><li><strong>renderOptions</strong> Optional rendering options. DON&#39;T call this function multiple times with different renderOptions per frame.</li></ul><p><strong>Return</strong>: Void. The drawn framebuffer can be retrieved with renderTarget-&gt;getOutputFramebuffer(). Use outputFramebuffer.lock()-&gt;getColorTexture() to get the resulting texture.</p><h3 id="function-drawscreen" tabindex="-1">function drawScreen <a class="header-anchor" href="#function-drawscreen" aria-label="Permalink to &quot;function drawScreen&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawScreen</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneRenderTarget</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderTarget</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">width</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">height</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RenderOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">RenderOptions</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DisplayOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">displayOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">DisplayOptions</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawScreen</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneRenderTarget</span><span style="color:#24292E;"> &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderTarget</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">width</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RenderOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">RenderOptions</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DisplayOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">displayOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">DisplayOptions</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Render viewport&#39;s main scene into a framebuffer with the specified camera matrices.</p><p><strong>Parameters</strong>:</p><ul><li><strong>renderTarget</strong> A reference to a shared pointer containing the desired render target. An empty pointer can be passed and it will be filled with an appropriate render target.</li><li><strong>width</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> width in pixels</li><li><strong>height</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> height in pixels</li><li><strong>view</strong> View matrix of the camera</li><li><strong>projection</strong> Projection matrix of the camera</li><li><strong>renderOptions</strong> Optional rendering options. DON&#39;T call this function multiple times with different renderOptions per frame.</li><li><strong>displayOptions</strong> Optional display options. These can change without restriction.</li></ul><p><strong>Return</strong>: Void. The drawn framebuffer can be retrieved with renderTarget-&gt;getOutputFramebuffer(). Use outputFramebuffer.lock()-&gt;getColorTexture() to get the resulting texture.</p><h3 id="function-drawviewport" tabindex="-1">function drawViewport <a class="header-anchor" href="#function-drawviewport" aria-label="Permalink to &quot;function drawViewport&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawViewport</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneRenderTarget</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderTarget</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">width</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">height</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RenderOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">renderOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">RenderOptions</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DisplayOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">displayOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">DisplayOptions</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawViewport</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneRenderTarget</span><span style="color:#24292E;"> &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderTarget</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">width</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RenderOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">renderOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">RenderOptions</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DisplayOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">displayOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">DisplayOptions</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Render viewport&#39;s main scene into a framebuffer using its own camera.</p><p><strong>Parameters</strong>:</p><ul><li><strong>renderTarget</strong> A reference to a shared pointer containing the desired render target. An empty pointer can be passed and it will be filled with an appropriate render target.</li><li><strong>width</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> width in pixels</li><li><strong>height</strong> <a href="/cpp-api-reference/classes/classVp_1_1Framebuffer.html">Framebuffer</a> height in pixels</li><li><strong>renderOptions</strong> Optional rendering options. DON&#39;T call this function multiple times with different renderOptions per frame.</li><li><strong>displayOptions</strong> Optional display options. These can change without restriction.</li></ul><p><strong>Return</strong>: Void. The drawn framebuffer can be retrieved with renderTarget-&gt;getOutputFramebuffer(). Use outputFramebuffer.lock()-&gt;getColorTexture() to get the resulting texture.</p><h3 id="function-getmainscene" tabindex="-1">function getMainScene <a class="header-anchor" href="#function-getmainscene" aria-label="Permalink to &quot;function getMainScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getMainScene</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getMainScene</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getmainviewportcamera" tabindex="-1">function getMainViewportCamera <a class="header-anchor" href="#function-getmainviewportcamera" aria-label="Permalink to &quot;function getMainViewportCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">AggregateCamera</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getMainViewportCamera</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">AggregateCamera</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getMainViewportCamera</span><span style="color:#24292E;">()</span></span></code></pre></div><p>Returns the viewport camera of the main scene.</p><h3 id="function-getmanipulators" tabindex="-1">function getManipulators <a class="header-anchor" href="#function-getmanipulators" aria-label="Permalink to &quot;function getManipulators&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Manipulators</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getManipulators</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Manipulators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getManipulators</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getpreviewscene" tabindex="-1">function getPreviewScene <a class="header-anchor" href="#function-getpreviewscene" aria-label="Permalink to &quot;function getPreviewScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getPreviewScene</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getPreviewScene</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getsettings" tabindex="-1">function getSettings <a class="header-anchor" href="#function-getsettings" aria-label="Permalink to &quot;function getSettings&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ViewportSettings</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSettings</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ViewportSettings</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSettings</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-loadglobal" tabindex="-1">function loadGlobal <a class="header-anchor" href="#function-loadglobal" aria-label="Permalink to &quot;function loadGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadGlobal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">memento</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadGlobal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">memento</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Load global state from a memento.</p><p><strong>Parameters</strong>:</p><ul><li><strong>memento</strong> New global state</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-loadglobal">IStateful::loadGlobal</a></p><h3 id="function-loadscene" tabindex="-1">function loadScene <a class="header-anchor" href="#function-loadscene" aria-label="Permalink to &quot;function loadScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">memento</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">memento</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called on scene load, undo and redo.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> The current scene or nullptr (in case of undo/redo)</li><li><strong>memento</strong> New scene state</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-loadscene">IStateful::loadScene</a></p><h3 id="function-oninit" tabindex="-1">function onInit <a class="header-anchor" href="#function-oninit" aria-label="Permalink to &quot;function onInit&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onInit</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onInit</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Initializes scenes and loads assets.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classModule.html#function-oninit">Module::onInit</a></p><h3 id="function-onupdate" tabindex="-1">function onUpdate <a class="header-anchor" href="#function-onupdate" aria-label="Permalink to &quot;function onUpdate&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">dt</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">dt</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Update scene logic.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classModule.html#function-onupdate">Module::onUpdate</a></p><h3 id="function-processinput" tabindex="-1">function processInput <a class="header-anchor" href="#function-processinput" aria-label="Permalink to &quot;function processInput&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processInput</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">dt</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">mousePos</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ivec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processInput</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">dt</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mousePos</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ivec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">windowSize</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Process viewport user input.</p><p><strong>Parameters</strong>:</p><ul><li><strong>dt</strong> Time since last frame</li><li><strong>mousePos</strong> Current mouse position relative to the window</li><li><strong>windowSize</strong> Current window size</li></ul><p>Should be called before draw and only if the viewport is in focus. <a href="/cpp-api-reference/classes/classInputManager.html">InputManager</a> is used to handle input.</p><p>Ensure this methods is only called once per frame.</p><h3 id="function-processselection" tabindex="-1">function processSelection <a class="header-anchor" href="#function-processselection" aria-label="Permalink to &quot;function processSelection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processSelection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">SceneRenderTarget</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">renderTarget</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">mousePos</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ivec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processSelection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">SceneRenderTarget</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">renderTarget</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mousePos</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ivec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">windowSize</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-removeentity" tabindex="-1">function removeEntity <a class="header-anchor" href="#function-removeentity" aria-label="Permalink to &quot;function removeEntity&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> ,</span></span>
<span class="line"><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">enable_if</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">is_base_of</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;::</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> &gt;::</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=true</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeEntity</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">WPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">entity</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> ,</span></span>
<span class="line"><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">enable_if</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">is_base_of</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;::</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> &gt;::</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=true</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeEntity</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">WPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">entity</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Remove an entity from the main scene.</p><h3 id="function-saveglobal" tabindex="-1">function saveGlobal <a class="header-anchor" href="#function-saveglobal" aria-label="Permalink to &quot;function saveGlobal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveGlobal</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveGlobal</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Save shared global state.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-saveglobal">IStateful::saveGlobal</a></p><h3 id="function-savescene" tabindex="-1">function saveScene <a class="header-anchor" href="#function-savescene" aria-label="Permalink to &quot;function saveScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Memento</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Memento</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Save state for the current scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> The current scene or nullptr (in case of undo/redo)</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIStateful.html#function-savescene">IStateful::saveScene</a></p><p>The scene parameter should contain a scene object for full filesystem saves and nullptr for quick undo/redo operations.</p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-manipulators" tabindex="-1">variable m_manipulators <a class="header-anchor" href="#variable-m-manipulators" aria-label="Permalink to &quot;variable m_manipulators&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Manipulators </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_manipulators;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Manipulators </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_manipulators;</span></span></code></pre></div><h2 id="friends-1" tabindex="-1">Friends <a class="header-anchor" href="#friends-1" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><h3 id="friend-mainscene" tabindex="-1">friend MainScene <a class="header-anchor" href="#friend-mainscene" aria-label="Permalink to &quot;friend MainScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">MainScene</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MainScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">MainScene</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="friend-scene" tabindex="-1">friend Scene <a class="header-anchor" href="#friend-scene" aria-label="Permalink to &quot;friend Scene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="friend-scenecamera" tabindex="-1">friend SceneCamera <a class="header-anchor" href="#friend-scenecamera" aria-label="Permalink to &quot;friend SceneCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SceneCamera</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">SceneCamera</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SceneCamera</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">SceneCamera</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="friend-scenemodel" tabindex="-1">friend SceneModel <a class="header-anchor" href="#friend-scenemodel" aria-label="Permalink to &quot;friend SceneModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SceneModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">SceneModel</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SceneModel</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">SceneModel</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><hr><p>Updated on 2025-02-25 at 07:08:42 +0000</p>`,143),t=[l];function o(r,c,i,d,y,E){return a(),e("div",null,t)}const g=s(p,[["render",o]]);export{u as __pageData,g as default};
