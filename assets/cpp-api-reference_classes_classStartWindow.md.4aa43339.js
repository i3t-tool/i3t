import{_ as t,o as a,c as s,Q as e}from"./chunks/framework.0f749972.js";const f=JSON.parse('{"title":"StartWindow","description":"","frontmatter":{"title":"StartWindow"},"headers":[],"relativePath":"cpp-api-reference/classes/classStartWindow.md","filePath":"cpp-api-reference/classes/classStartWindow.md"}'),n={name:"cpp-api-reference/classes/classStartWindow.md"},o=e(`<h1 id="startwindow" tabindex="-1">StartWindow <a class="header-anchor" href="#startwindow" aria-label="Permalink to &quot;StartWindow&quot;">​</a></h1><p><code>#include &quot;GUI/Elements/Windows/StartWindow.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a>, std::enable_shared_from_this&lt; IWindow &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-startwindow">StartWindow</a></strong>(bool show)</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/structTutorial.html">Tutorial</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-gettutorial">getTutorial</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-reloadtutorials">reloadTutorials</a></strong>(bool english)&lt;br&gt;searches through the tutorial directory and adds all found tutorial files to the window</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-render">render</a></strong>() override&lt;br&gt;Renders the Start window using ImGui.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-renderleftpanel">renderLeftPanel</a></strong>() const&lt;br&gt;Render the logo and the <a href="./.html">I3T</a> brief description.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-renderrightpanel">renderRightPanel</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#function-settutorial">setTutorial</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/structTutorial.html">Tutorial</a> &gt; tut)</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#variable-language-is-english">language_is_english</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classStartWindow.html#variable-popupactive">popupActive</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-iwindow">IWindow</a></strong>(std::string title, bool show =false)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-~iwindow">~IWindow</a></strong>() =default</td></tr><tr><td>virtual const char *</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-getid">getID</a></strong>() const =0</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-wptr">WPtr</a>&lt; <a href="/cpp-api-reference/classes/classInputController.html">InputController</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-getinput">getInput</a></strong>()&lt;br&gt;Returns window input controller.</td></tr><tr><td>const char *</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-getname">getName</a></strong>()</td></tr><tr><td>bool *</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-getshowptr">getShowPtr</a></strong>()</td></tr><tr><td>const std::string &amp;</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-gettitle">getTitle</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-hide">hide</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-isvisible">isVisible</a></strong>() const</td></tr><tr><td>const void</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-settitle">setTitle</a></strong>(std::string title)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-show">show</a></strong>()</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#function-updatewindowinfo">updateWindowInfo</a></strong>()&lt;br&gt;Collect information about the current window.</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-autofocus">m_autoFocus</a></strong> &lt;br&gt;When true the window will get focus immediately upon hovering over it.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-title">m_title</a></strong> &lt;br&gt;Visible window title.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowinfoupdated">m_windowInfoUpdated</a></strong> &lt;br&gt;A flag indicating the <a href="./.html">updateWindowInfo()</a> method was called.</td></tr><tr><td><a href="/cpp-api-reference/classes/classWindowManager.html">WindowManager</a> *</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowmanager">m_windowManager</a></strong> &lt;br&gt;Weak reference to a <a href="/cpp-api-reference/classes/classWindowManager.html">WindowManager</a> set when this window is added to it.</td></tr><tr><td>glm::vec2</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowmax">m_windowMax</a></strong> &lt;br&gt;Bottom right corner of the window.</td></tr><tr><td>glm::vec2</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowmin">m_windowMin</a></strong> &lt;br&gt;Top left corner of the window, same as m_windowPos (separate variable for clarity)</td></tr><tr><td>glm::vec2</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowpos">m_windowPos</a></strong> &lt;br&gt;Top-left corner of the window in screen coordinates.</td></tr><tr><td>glm::ivec2</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-windowsize">m_windowSize</a></strong> &lt;br&gt;<a href="/cpp-api-reference/classes/classWindow.html">Window</a> width and height dimensions.</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classInputController.html">InputController</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-input">m_input</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-name">m_name</a></strong> &lt;br&gt;Full ImGui window identifier.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-nameneedsupdate">m_nameNeedsUpdate</a></strong> &lt;br&gt;Workaround to avoid setting the name in the constructor (cannot call getID there)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#variable-m-show">m_show</a></strong></td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classIWindow.html">IWindow</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classIWindow.html#friend-windowmanager">WindowManager</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-startwindow" tabindex="-1">function StartWindow <a class="header-anchor" href="#function-startwindow" aria-label="Permalink to &quot;function StartWindow&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">StartWindow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> show</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">StartWindow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> show</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-gettutorial" tabindex="-1">function getTutorial <a class="header-anchor" href="#function-gettutorial" aria-label="Permalink to &quot;function getTutorial&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Tutorial</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getTutorial</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Tutorial</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getTutorial</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-reloadtutorials" tabindex="-1">function reloadTutorials <a class="header-anchor" href="#function-reloadtutorials" aria-label="Permalink to &quot;function reloadTutorials&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reloadTutorials</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">english</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reloadTutorials</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">english</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>searches through the tutorial directory and adds all found tutorial files to the window</p><h3 id="function-render" tabindex="-1">function render <a class="header-anchor" href="#function-render" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Renders the Start window using ImGui.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIWindow.html#function-render">IWindow::render</a></p><h3 id="function-renderleftpanel" tabindex="-1">function renderLeftPanel <a class="header-anchor" href="#function-renderleftpanel" aria-label="Permalink to &quot;function renderLeftPanel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderLeftPanel</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderLeftPanel</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>Render the logo and the <a href="./.html">I3T</a> brief description.</p><h3 id="function-renderrightpanel" tabindex="-1">function renderRightPanel <a class="header-anchor" href="#function-renderrightpanel" aria-label="Permalink to &quot;function renderRightPanel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderRightPanel</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderRightPanel</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-settutorial" tabindex="-1">function setTutorial <a class="header-anchor" href="#function-settutorial" aria-label="Permalink to &quot;function setTutorial&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTutorial</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Tutorial</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">tut</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTutorial</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Tutorial</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">tut</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-language-is-english" tabindex="-1">variable language_is_english <a class="header-anchor" href="#variable-language-is-english" aria-label="Permalink to &quot;variable language_is_english&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> language_is_english </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> language_is_english </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-popupactive" tabindex="-1">variable popupActive <a class="header-anchor" href="#variable-popupactive" aria-label="Permalink to &quot;variable popupActive&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> popupActive </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> popupActive </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><hr><p>Updated on 2024-10-16 at 18:09:43 +0000</p>`,44),r=[o];function l(p,i,c,d,h,u){return a(),s("div",null,r)}const b=t(n,[["render",l]]);export{f as __pageData,b as default};
