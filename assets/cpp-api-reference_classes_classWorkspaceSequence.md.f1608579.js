import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"WorkspaceSequence","description":"","frontmatter":{"title":"WorkspaceSequence"},"headers":[],"relativePath":"cpp-api-reference/classes/classWorkspaceSequence.md","filePath":"cpp-api-reference/classes/classWorkspaceSequence.md"}'),n={name:"cpp-api-reference/classes/classWorkspaceSequence.md"},o=a(`<h1 id="workspacesequence" tabindex="-1">WorkspaceSequence <a class="header-anchor" href="#workspacesequence" aria-label="Permalink to &quot;WorkspaceSequence&quot;">​</a></h1><p><code>#include &quot;GUI/Elements/Nodes/WorkspaceSequence.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html">WorkspaceNodeWithCoreDataWithPins</a>, <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a>, <a href="/cpp-api-reference/classes/classworkspacenode.html">WorkspaceNode</a>, <a href="/cpp-api-reference/classes/classivisitable.html">IVisitable</a>, <a href="/cpp-api-reference/classes/classdiwne_1_1node.html">DIWNE::Node</a>, <a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html">DIWNE::DiwneObject</a>, std::enable_shared_from_this&lt; DiwneObject &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-workspacesequence">WorkspaceSequence</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a> &gt; nodebase =<a href="/cpp-api-reference/classes/classcore_1_1graphmanager.html#function-createsequence">Core::GraphManager::createSequence</a>(), bool isCameraSequence =false)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-accept">accept</a></strong>(<a href="/cpp-api-reference/classes/classnodevisitor.html">NodeVisitor</a> &amp; visitor) override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-aftercontent">afterContent</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-allowdrawing">allowDrawing</a></strong>()&lt;br&gt;Decision maker whether object should be drawn (not outside of window for example)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-beforecontent">beforeContent</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-drawmenulevelofdetail">drawMenuLevelOfDetail</a></strong>()</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-getinnerposition">getInnerPosition</a></strong>(ImVec2 point)</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-getinnerposition">getInnerPosition</a></strong>(std::vector&lt; ImVec2 &gt; points)</td></tr><tr><td>const std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-getinnerworkspacenodes">getInnerWorkspaceNodes</a></strong>() const</td></tr><tr><td>ImVec4</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-gettint">getTint</a></strong>()</td></tr><tr><td>std::optional&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-gettransform">getTransform</a></strong>(int index) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-issequence">isSequence</a></strong>()</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-maxlengthofdata">maxLengthOfData</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-middlecontent">middleContent</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-movenodetosequence">moveNodeToSequence</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; dragedNode, int index =0)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-movenodetoworkspace">moveNodeToWorkspace</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; dragedNode)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-popnode">popNode</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; node)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-popupcontent">popupContent</a></strong>()&lt;br&gt;Content of popup menu raise on this object.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-popupcontenttracking">popupContentTracking</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-pushnode">pushNode</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; node, int index =0)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-setnumberofvisibledecimal">setNumberOfVisibleDecimal</a></strong>(int value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-setpostionofdummydata">setPostionOfDummyData</a></strong>(int positionOfDummyData =-1)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-settint">setTint</a></strong>(ImVec4 tint)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#function-topcontent">topContent</a></strong>()</td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#variable-m-position-of-dummy-data">m_position_of_dummy_data</a></strong></td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#variable-m-sizeofdummy">m_sizeOfDummy</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacesequence.html#variable-m-workspaceinnertransformations">m_workspaceInnerTransformations</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html">WorkspaceNodeWithCoreDataWithPins</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-workspacenodewithcoredatawithpins">WorkspaceNodeWithCoreDataWithPins</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a> &gt; nodebase, bool showDataOnPins =true)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-finalize">finalize</a></strong>() override</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacecoreinputpin.html">WorkspaceCoreInputPin</a> &gt; &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-getinputs">getInputs</a></strong>() const&lt;br&gt;get vector of input pins</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacecoreoutputpin.html">WorkspaceCoreOutputPin</a> &gt; &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-getoutputs">getOutputs</a></strong>() const&lt;br&gt;get vector of output pins</td></tr><tr><td>virtual std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacecoreoutputpin.html">WorkspaceCoreOutputPin</a> &gt; &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-getoutputstoshow">getOutputsToShow</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-leftcontent">leftContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#function-rightcontent">rightContent</a></strong>() override</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html">WorkspaceNodeWithCoreDataWithPins</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#variable-m-showdataonpins">m_showDataOnPins</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacecoreinputpin.html">WorkspaceCoreInputPin</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#variable-m-workspaceinputs">m_workspaceInputs</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classworkspacecoreoutputpin.html">WorkspaceCoreOutputPin</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredatawithpins.html#variable-m-workspaceoutputs">m_workspaceOutputs</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-workspacenodewithcoredata">WorkspaceNodeWithCoreData</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a> &gt; nodebase)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-~workspacenodewithcoredata">~WorkspaceNodeWithCoreData</a></strong>() override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-drawdatalabel">drawDataLabel</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-drawmenuduplicate">drawMenuDuplicate</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-drawmenuseteditable">drawMenuSetEditable</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-drawmenusetprecision">drawMenuSetPrecision</a></strong>()</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getdataitemswidth">getDataItemsWidth</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1datamap.html">Core::DataMap</a> const *</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getdatamap">getDataMap</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-floatpopupmode">FloatPopupMode</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getfloatpopupmode">getFloatPopupMode</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getislabelbeingedited">getIsLabelBeingEdited</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-workspacelevelofdetail">WorkspaceLevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getlevelofdetail">getLevelOfDetail</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a> &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getnodebase">getNodebase</a></strong>() const</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-getnumberofvisibledecimal">getNumberOfVisibleDecimal</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-processobjectdrag">processObjectDrag</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-processselect">processSelect</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-processunselect">processUnselect</a></strong>() override</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1datamap.html">Core::DataMap</a> const *</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-setdatamap">setDataMap</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1datamap.html">Core::DataMap</a> * mapToSet)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-setfloatpopupmode">setFloatPopupMode</a></strong>(<a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-floatpopupmode">FloatPopupMode</a> mode)</td></tr><tr><td><a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-workspacelevelofdetail">WorkspaceLevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-setlevelofdetail">setLevelOfDetail</a></strong>(<a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-workspacelevelofdetail">WorkspaceLevelOfDetail</a> levelOfDetail)</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-updatedataitemswidth">updateDataItemsWidth</a></strong>()</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html">WorkspaceNodeWithCoreData</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-dataitemswidth">m_dataItemsWidth</a></strong></td></tr><tr><td><a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-floatpopupmode">FloatPopupMode</a></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-floatpopupmode">m_floatPopupMode</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-headerminwidth">m_headerMinWidth</a></strong> &lt;br&gt;Can be used to specify the minimum header width of the node.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-isfirstdraw">m_isFirstDraw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-islabelbeingedited">m_isLabelBeingEdited</a></strong></td></tr><tr><td><a href="/cpp-api-reference/files/workspaceelements_8h.html#enum-workspacelevelofdetail">WorkspaceLevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-levelofdetail">m_levelOfDetail</a></strong></td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a> &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-nodebase">m_nodebase</a></strong> &lt;br&gt;reference to <a href="./.html">Core</a></td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#variable-m-numberofvisibledecimal">m_numberOfVisibleDecimal</a></strong> &lt;br&gt;number of decimal places used while display floats in the workspace</td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classworkspacenode.html">WorkspaceNode</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-workspacenode">WorkspaceNode</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> id, std::string const topLabel =&quot;Header&quot;, std::string const middleLabel =&quot;Content&quot;)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-~workspacenode">~WorkspaceNode</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-bottomcontent">bottomContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-bypassfocusforinteractionaction">bypassFocusForInteractionAction</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-deleteaction">deleteAction</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-drawmenudelete">drawMenuDelete</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-getduplicatenode">getDuplicateNode</a></strong>() const</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-getmiddlelabel">getMiddleLabel</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-getremovefromworkspace">getRemoveFromWorkspace</a></strong>() const</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-gettoplabel">getTopLabel</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-leftcontent">leftContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-rightcontent">rightContent</a></strong>() override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-setduplicatenode">setDuplicateNode</a></strong>(bool value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-setmiddlelabel">setMiddleLabel</a></strong>(std::string label)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-setremovefromworkspace">setRemoveFromWorkspace</a></strong>(bool value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#function-settoplabel">setTopLabel</a></strong>(std::string label)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classworkspacenode.html">WorkspaceNode</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#variable-m-duplicatenode">m_duplicateNode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#variable-m-removefromworkspacewindow">m_removeFromWorkspaceWindow</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classworkspacenode.html">WorkspaceNode</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#variable-m-middlelabel">m_middleLabel</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classworkspacenode.html#variable-m-toplabel">m_topLabel</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classdiwne_1_1node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-node">Node</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> id, std::string const labelDiwne =&quot;DiwneNode&quot;)&lt;br&gt;Default constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-~node">~Node</a></strong>()&lt;br&gt;Default destructor.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-afterenddiwne">afterEndDiwne</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-begin">begin</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-bottomcontent">bottomContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-bottomcontentdiwne">bottomContentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-content">content</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-deleteaction">deleteAction</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-deleteactiondiwne">deleteActionDiwne</a></strong>()</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-drawnodediwne">drawNodeDiwne</a></strong>(<a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-drawmodenodeposition">DrawModeNodePosition</a> nodePosMode =DrawModeNodePosition::OnItsPosition, <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-drawmode">DrawMode</a> drawMode =DrawMode::Interacting)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-end">end</a></strong>() override</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getdragactiontype">getDragActionType</a></strong>() const</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getholdactiontype">getHoldActionType</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getid">getId</a></strong>() const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getnodepositiondiwne">getNodePositionDiwne</a></strong>() const</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getnoderectdiwne">getNodeRectDiwne</a></strong>() const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getnoderectsizediwne">getNodeRectSizeDiwne</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getrectdiwne">getRectDiwne</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-getrender">getRender</a></strong>() const</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-gettouchactiontype">getTouchActionType</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-leftcontent">leftContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-leftcontentdiwne">leftContentDiwne</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-middlecontentdiwne">middleContentDiwne</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/classdiwne_1_1node.html">Node</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-operator=">operator=</a></strong>(const <a href="/cpp-api-reference/classes/classdiwne_1_1node.html">Node</a> &amp; other)&lt;br&gt;Assignment operator.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-processdrag">processDrag</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-processselect">processSelect</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-processunselect">processUnselect</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-rightcontent">rightContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-rightcontentdiwne">rightContentDiwne</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-setnodepositiondiwne">setNodePositionDiwne</a></strong>(ImVec2 const &amp; position)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-setrender">setRender</a></strong>(bool render)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-setselected">setSelected</a></strong>(const bool selected) override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-topcontentdiwne">topContentDiwne</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-translatenodepositiondiwne">translateNodePositionDiwne</a></strong>(ImVec2 const amount)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-updatesizes">updateSizes</a></strong>() override</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classdiwne_1_1node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-drawanyway">m_drawAnyway</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classdiwne_1_1node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-bottomrectdiwne">m_bottomRectDiwne</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-centerdummyspace">m_centerDummySpace</a></strong> &lt;br&gt;Rectangle of parts of node in diwne.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-leftrectdiwne">m_leftRectDiwne</a></strong></td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-middlerectdiwne">m_middleRectDiwne</a></strong></td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-nodepositiondiwne">m_nodePositionDiwne</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-drawmodenodeposition">DrawModeNodePosition</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-nodeposmode">m_nodePosMode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-render">m_render</a></strong> &lt;br&gt;used to hide nodes in tutorial scenes (action &quot;toggleNodeWorkspaceVisibility&quot;)</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-rightrectdiwne">m_rightRectDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-todelete">m_toDelete</a></strong> &lt;br&gt;Set to true after node delete action.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1node.html#variable-m-toprectdiwne">m_topRectDiwne</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-diwneobject">DiwneObject</a></strong>(<a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> id, std::string const labelDiwne)&lt;br&gt;Constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-~diwneobject">~DiwneObject</a></strong>() =default</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-aftercontentdiwne">afterContentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-afterend">afterEnd</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-afterenddiwne">afterEndDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowinteraction">allowInteraction</a></strong>()&lt;br&gt;Decision maker whether object can interact (not include content elements)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessdrag">allowProcessDrag</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessfocused">allowProcessFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessfocusedforinteraction">allowProcessFocusedForInteraction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocesshold">allowProcessHold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessraisepopup">allowProcessRaisePopup</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessselect">allowProcessSelect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessunhold">allowProcessUnhold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-allowprocessunselect">allowProcessUnselect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-beforebegin">beforeBegin</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-beforecontentdiwne">beforeContentDiwne</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-begin">begin</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassdragaction">bypassDragAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassfocusaction">bypassFocusAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassfocusforinteractionaction">bypassFocusForInteractionAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassholdaction">bypassHoldAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassraisepopupaction">bypassRaisePopupAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassselectaction">bypassSelectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypasstouchaction">bypassTouchAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassunholdaction">bypassUnholdAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-bypassunselectaction">bypassUnselectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-content">content</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-contentdiwne">contentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-drawdiwne">drawDiwne</a></strong>(<a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-drawmode">DrawMode</a> drawMode =DrawMode::Interacting)&lt;br&gt;Main function for drawing object and deal with interactions.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-end">end</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-finalize">finalize</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-finalizediwne">finalizeDiwne</a></strong>()</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getdragactiontype">getDragActionType</a></strong>() const =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getholdactiontype">getHoldActionType</a></strong>() const =0</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getiddiwne">getIdDiwne</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getrectdiwne">getRectDiwne</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getselectable">getSelectable</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-getselected">getSelected</a></strong>() const&lt;br&gt;Getter of selection state.</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-gettouchactiontype">getTouchActionType</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-initialize">initialize</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-initializediwne">initializeDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-interactionbegininlastdraw">interactionBeginInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-interactionendinlastdraw">interactionEndInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processdrag">processDrag</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processfocused">processFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processfocusedforinteraction">processFocusedForInteraction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processhold">processHold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processinteractions">processInteractions</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processinteractionsalways">processInteractionsAlways</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processinteractionsdiwne">processInteractionsDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectdrag">processObjectDrag</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectfocused">processObjectFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectfocusedforinteraction">processObjectFocusedForInteraction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjecthold">processObjectHold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectselect">processObjectSelect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectunhold">processObjectUnhold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processobjectunselect">processObjectUnselect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processraisepopupdiwne">processRaisePopupDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processselect">processSelect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processshowpopupdiwne">processShowPopupDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processunhold">processUnhold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-processunselect">processUnselect</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-setselectable">setSelectable</a></strong>(bool const selectable)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-setselected">setSelected</a></strong>(bool const selected)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-showtooltiplabel">showTooltipLabel</a></strong>(std::string const &amp; label, ImColor const &amp;&amp; color)&lt;br&gt;Show a colored text for example for immediate hints.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-updatesizes">updateSizes</a></strong>()</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classdiwne_1_1diwne.html">DIWNE::Diwne</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-diwne">diwne</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacediwne.html#enum-drawmode">DrawMode</a></td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-drawmode">m_drawMode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-focused">m_focused</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-focusedforinteraction">m_focusedForInteraction</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacediwne.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-iddiwne">m_idDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-inner-interaction-happen">m_inner_interaction_happen</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-inner-interaction-happen-previous-draw">m_inner_interaction_happen_previous_draw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-isactive">m_isActive</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-isdragged">m_isDragged</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-isheld">m_isHeld</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-labeldiwne">m_labelDiwne</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-popupiddiwne">m_popupIDDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-selectable">m_selectable</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#variable-m-selected">m_selected</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-workspacesequence" tabindex="-1">function WorkspaceSequence <a class="header-anchor" href="#function-workspacesequence" aria-label="Permalink to &quot;function WorkspaceSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">WorkspaceSequence</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">DIWNE</span><span style="color:#E1E4E8;">::Diwne </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> diwne,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::Node </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> nodebase </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GraphManager</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">createSequence</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> isCameraSequence </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">WorkspaceSequence</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">DIWNE</span><span style="color:#24292E;">::Diwne </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> diwne,</span></span>
<span class="line"><span style="color:#24292E;">    Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::Node </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nodebase </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GraphManager</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">createSequence</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> isCameraSequence </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-accept" tabindex="-1">function accept <a class="header-anchor" href="#function-accept" aria-label="Permalink to &quot;function accept&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NodeVisitor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">visitor</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NodeVisitor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">visitor</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classivisitable.html#function-accept">IVisitable::accept</a></p><h3 id="function-aftercontent" tabindex="-1">function afterContent <a class="header-anchor" href="#function-aftercontent" aria-label="Permalink to &quot;function afterContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterContent</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterContent</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classdiwne_1_1diwneobject.html#function-aftercontent">DIWNE::DiwneObject::afterContent</a></p><p>is called as last inside object</p><h3 id="function-allowdrawing" tabindex="-1">function allowDrawing <a class="header-anchor" href="#function-allowdrawing" aria-label="Permalink to &quot;function allowDrawing&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">allowDrawing</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">allowDrawing</span><span style="color:#24292E;">()</span></span></code></pre></div><p>Decision maker whether object should be drawn (not outside of window for example)</p><p><strong>Return</strong>: draw object on its position?</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classdiwne_1_1node.html#function-allowdrawing">DIWNE::Node::allowDrawing</a></p><h3 id="function-beforecontent" tabindex="-1">function beforeContent <a class="header-anchor" href="#function-beforecontent" aria-label="Permalink to &quot;function beforeContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeContent</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeContent</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenode.html#function-beforecontent">WorkspaceNode::beforeContent</a></p><p>is called first inside of object</p><h3 id="function-drawmenulevelofdetail" tabindex="-1">function drawMenuLevelOfDetail <a class="header-anchor" href="#function-drawmenulevelofdetail" aria-label="Permalink to &quot;function drawMenuLevelOfDetail&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawMenuLevelOfDetail</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawMenuLevelOfDetail</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-drawmenulevelofdetail">WorkspaceNodeWithCoreData::drawMenuLevelOfDetail</a></p><h3 id="function-getinnerposition" tabindex="-1">function getInnerPosition <a class="header-anchor" href="#function-getinnerposition" aria-label="Permalink to &quot;function getInnerPosition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInnerPosition</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">point</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInnerPosition</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">point</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-getinnerposition-1" tabindex="-1">function getInnerPosition <a class="header-anchor" href="#function-getinnerposition-1" aria-label="Permalink to &quot;function getInnerPosition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInnerPosition</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">points</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInnerPosition</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">points</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-getinnerworkspacenodes" tabindex="-1">function getInnerWorkspaceNodes <a class="header-anchor" href="#function-getinnerworkspacenodes" aria-label="Permalink to &quot;function getInnerWorkspaceNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInnerWorkspaceNodes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInnerWorkspaceNodes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-gettint" tabindex="-1">function getTint <a class="header-anchor" href="#function-gettint" aria-label="Permalink to &quot;function getTint&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImVec4</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTint</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImVec4</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTint</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-gettransform" tabindex="-1">function getTransform <a class="header-anchor" href="#function-gettransform" aria-label="Permalink to &quot;function getTransform&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">optional</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getTransform</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">optional</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getTransform</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-issequence" tabindex="-1">function isSequence <a class="header-anchor" href="#function-issequence" aria-label="Permalink to &quot;function isSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSequence</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSequence</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-maxlengthofdata" tabindex="-1">function maxLengthOfData <a class="header-anchor" href="#function-maxlengthofdata" aria-label="Permalink to &quot;function maxLengthOfData&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">maxLengthOfData</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">maxLengthOfData</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-maxlengthofdata">WorkspaceNodeWithCoreData::maxLengthOfData</a></p><h3 id="function-middlecontent" tabindex="-1">function middleContent <a class="header-anchor" href="#function-middlecontent" aria-label="Permalink to &quot;function middleContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middleContent</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleContent</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenode.html#function-middlecontent">WorkspaceNode::middleContent</a></p><h3 id="function-movenodetosequence" tabindex="-1">function moveNodeToSequence <a class="header-anchor" href="#function-movenodetosequence" aria-label="Permalink to &quot;function moveNodeToSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moveNodeToSequence</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">dragedNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moveNodeToSequence</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">dragedNode</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-movenodetoworkspace" tabindex="-1">function moveNodeToWorkspace <a class="header-anchor" href="#function-movenodetoworkspace" aria-label="Permalink to &quot;function moveNodeToWorkspace&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moveNodeToWorkspace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">dragedNode</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moveNodeToWorkspace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">dragedNode</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-popnode" tabindex="-1">function popNode <a class="header-anchor" href="#function-popnode" aria-label="Permalink to &quot;function popNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">node</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">node</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-popupcontent" tabindex="-1">function popupContent <a class="header-anchor" href="#function-popupcontent" aria-label="Permalink to &quot;function popupContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popupContent</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popupContent</span><span style="color:#24292E;">()</span></span></code></pre></div><p>Content of popup menu raise on this object.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-popupcontent">WorkspaceNodeWithCoreData::popupContent</a></p><h3 id="function-popupcontenttracking" tabindex="-1">function popupContentTracking <a class="header-anchor" href="#function-popupcontenttracking" aria-label="Permalink to &quot;function popupContentTracking&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popupContentTracking</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popupContentTracking</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-pushnode" tabindex="-1">function pushNode <a class="header-anchor" href="#function-pushnode" aria-label="Permalink to &quot;function pushNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pushNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">WorkspaceNodeWithCoreData</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">WorkspaceNodeWithCoreData</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">node</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-setnumberofvisibledecimal" tabindex="-1">function setNumberOfVisibleDecimal <a class="header-anchor" href="#function-setnumberofvisibledecimal" aria-label="Permalink to &quot;function setNumberOfVisibleDecimal&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setNumberOfVisibleDecimal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setNumberOfVisibleDecimal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-setnumberofvisibledecimal">WorkspaceNodeWithCoreData::setNumberOfVisibleDecimal</a></p><h3 id="function-setpostionofdummydata" tabindex="-1">function setPostionOfDummyData <a class="header-anchor" href="#function-setpostionofdummydata" aria-label="Permalink to &quot;function setPostionOfDummyData&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setPostionOfDummyData</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">positionOfDummyData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setPostionOfDummyData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">positionOfDummyData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-settint" tabindex="-1">function setTint <a class="header-anchor" href="#function-settint" aria-label="Permalink to &quot;function setTint&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTint</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImVec4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">tint</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTint</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImVec4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">tint</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-topcontent" tabindex="-1">function topContent <a class="header-anchor" href="#function-topcontent" aria-label="Permalink to &quot;function topContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">topContent</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">topContent</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classworkspacenodewithcoredata.html#function-topcontent">WorkspaceNodeWithCoreData::topContent</a></p><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-position-of-dummy-data" tabindex="-1">variable m_position_of_dummy_data <a class="header-anchor" href="#variable-m-position-of-dummy-data" aria-label="Permalink to &quot;variable m_position_of_dummy_data&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_position_of_dummy_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_position_of_dummy_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-m-sizeofdummy" tabindex="-1">variable m_sizeOfDummy <a class="header-anchor" href="#variable-m-sizeofdummy" aria-label="Permalink to &quot;variable m_sizeOfDummy&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ImVec2 m_sizeOfDummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ImVec2 m_sizeOfDummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-workspaceinnertransformations" tabindex="-1">variable m_workspaceInnerTransformations <a class="header-anchor" href="#variable-m-workspaceinnertransformations" aria-label="Permalink to &quot;variable m_workspaceInnerTransformations&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> WorkspaceNodeWithCoreData </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_workspaceInnerTransformations;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> WorkspaceNodeWithCoreData </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_workspaceInnerTransformations;</span></span></code></pre></div><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>`,105),r=[o];function c(p,l,i,d,h,f){return t(),s("div",null,r)}const m=e(n,[["render",c]]);export{g as __pageData,m as default};
