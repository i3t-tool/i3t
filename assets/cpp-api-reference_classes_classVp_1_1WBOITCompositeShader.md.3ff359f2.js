import{_ as e,o as a,c as t,Q as s}from"./chunks/framework.0f749972.js";const m=JSON.parse('{"title":"Vp::WBOITCompositeShader","description":"","frontmatter":{"title":"Vp::WBOITCompositeShader"},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1WBOITCompositeShader.md","filePath":"cpp-api-reference/classes/classVp_1_1WBOITCompositeShader.md"}'),r={name:"cpp-api-reference/classes/classVp_1_1WBOITCompositeShader.md"},n=s(`<h1 id="vp-wboitcompositeshader" tabindex="-1">Vp::WBOITCompositeShader <a class="header-anchor" href="#vp-wboitcompositeshader" aria-label="Permalink to &quot;Vp::WBOITCompositeShader&quot;">​</a></h1><p><code>#include &quot;Viewport/shader/WBOITCompositeShader.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classvp_1_1shader.html">Vp::Shader</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#function-wboitcompositeshader">WBOITCompositeShader</a></strong>(GLuint id)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#function-init">init</a></strong>(bool initSuperclass) override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#function-setuniforms">setUniforms</a></strong>() override&lt;br&gt;Set uniforms before rendering.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#variable-accumulationtextureid">accumulationTextureID</a></strong></td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#variable-revealagetextureid">revealageTextureID</a></strong></td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#variable-accumulationsampler">accumulationSampler</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1wboitcompositeshader.html#variable-revealagesampler">revealageSampler</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classvp_1_1shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-shader">Shader</a></strong>(GLuint id)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-~shader">~Shader</a></strong>() =default</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-bindtexture2d">bindTexture2D</a></strong>(GLuint textureUnit, GLuint textureID, GLint samplerLocation)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-bindtexture2dms">bindTexture2DMS</a></strong>(GLuint textureUnit, GLuint textureID, GLint samplerLocation)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-hasuniform">hasUniform</a></strong>(GLint location)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-setuniformspermeshpart">setUniformsPerMeshPart</a></strong>(<a href="/cpp-api-reference/classes/structcore_1_1mesh_1_1meshpart.html">Core::Mesh::MeshPart</a> &amp; meshPart)&lt;br&gt;Set uniforms before rendering individual mesh parts.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-supportswboit">supportsWboit</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-use">use</a></strong>() const</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#variable-m-id">m_id</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether to use weighted blended transparency for output if supported.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#variable-m-wboitfunc">m_wboitFunc</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classvp_1_1shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#variable-m-wboitflagid">m_wboitFlagId</a></strong> &lt;br&gt;Uniform id of the wboit enable/disable flag.</td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classvp_1_1shader.html#variable-m-wboitfuncid">m_wboitFuncId</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-wboitcompositeshader" tabindex="-1">function WBOITCompositeShader <a class="header-anchor" href="#function-wboitcompositeshader" aria-label="Permalink to &quot;function WBOITCompositeShader&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WBOITCompositeShader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    GLuint id</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WBOITCompositeShader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    GLuint id</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-init" tabindex="-1">function init <a class="header-anchor" href="#function-init" aria-label="Permalink to &quot;function init&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">initSuperclass</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initSuperclass</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-init">Vp::Shader::init</a></p><h3 id="function-setuniforms" tabindex="-1">function setUniforms <a class="header-anchor" href="#function-setuniforms" aria-label="Permalink to &quot;function setUniforms&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUniforms</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUniforms</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set uniforms before rendering.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classvp_1_1shader.html#function-setuniforms">Vp::Shader::setUniforms</a></p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-accumulationtextureid" tabindex="-1">variable accumulationTextureID <a class="header-anchor" href="#variable-accumulationtextureid" aria-label="Permalink to &quot;variable accumulationTextureID&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint accumulationTextureID {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint accumulationTextureID {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-revealagetextureid" tabindex="-1">variable revealageTextureID <a class="header-anchor" href="#variable-revealagetextureid" aria-label="Permalink to &quot;variable revealageTextureID&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint revealageTextureID {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint revealageTextureID {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-accumulationsampler" tabindex="-1">variable accumulationSampler <a class="header-anchor" href="#variable-accumulationsampler" aria-label="Permalink to &quot;variable accumulationSampler&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint accumulationSampler;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint accumulationSampler;</span></span></code></pre></div><h3 id="variable-revealagesampler" tabindex="-1">variable revealageSampler <a class="header-anchor" href="#variable-revealagesampler" aria-label="Permalink to &quot;variable revealageSampler&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint revealageSampler;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint revealageSampler;</span></span></code></pre></div><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>`,38),o=[n];function l(i,p,c,d,h,u){return a(),t("div",null,o)}const f=e(r,[["render",l]]);export{m as __pageData,f as default};
