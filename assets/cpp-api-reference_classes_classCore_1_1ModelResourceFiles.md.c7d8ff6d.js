import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.0f749972.js";const m=JSON.parse('{"title":"Core::ModelResourceFiles","description":"","frontmatter":{"title":"Core::ModelResourceFiles","summary":"A set a of 3D file format files located somewhere in the filesystem."},"headers":[],"relativePath":"cpp-api-reference/classes/classCore_1_1ModelResourceFiles.md","filePath":"cpp-api-reference/classes/classCore_1_1ModelResourceFiles.md"}'),o={name:"cpp-api-reference/classes/classCore_1_1ModelResourceFiles.md"},r=t(`<h1 id="core-modelresourcefiles" tabindex="-1">Core::ModelResourceFiles <a class="header-anchor" href="#core-modelresourcefiles" aria-label="Permalink to &quot;Core::ModelResourceFiles&quot;">​</a></h1><p>A set a of 3D file format files located somewhere in the filesystem. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Core/Resources/ModelResourceFiles.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">Core::ResourceFiles</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1modelresourcefiles.html#function-modelresourcefiles">ModelResourceFiles</a></strong>(fs::path path, std::string name)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1modelresourcefiles.html#function-fetchfiles">fetchFiles</a></strong>() override&lt;br&gt;Derive and fetch all required files from the primary file path.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1modelresourcefiles.html#function-fetchfiles">fetchFiles</a></strong>(void * data) override</td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">Core::ResourceFiles</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-resourcefiles">ResourceFiles</a></strong>(fs::path path, std::string name)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-~resourcefiles">~ResourceFiles</a></strong>() =default</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-addfile">addFile</a></strong>(fs::path filePath)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-changelocation">changeLocation</a></strong>(fs::path newDir, bool deleteOriginals)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-deletefiles">deleteFiles</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-operator!=">operator!=</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">ResourceFiles</a> &amp; rhs) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-operator&lt;">operator&lt;</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">ResourceFiles</a> &amp; rhs) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-operator==">operator==</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">ResourceFiles</a> &amp; rhs) const</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html">Core::ResourceFiles</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::set&lt; fs::path &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#variable-m-files">m_files</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#variable-m-name">m_name</a></strong> &lt;br&gt;Arbitrary name, can be used as a name for the root subfolder.</td></tr><tr><td>fs::path</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#variable-m-path">m_path</a></strong> &lt;br&gt;Path to the &quot;primary&quot; file, from which other paths are derived.</td></tr><tr><td>fs::path</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#variable-m-rootdir">m_rootDir</a></strong> &lt;br&gt;Root directory of the resource. Derived from m_path.</td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ModelResourceFiles</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ModelResourceFiles</span><span style="color:#24292E;">;</span></span></code></pre></div><p>A set a of 3D file format files located somewhere in the filesystem.</p><p>The main identifier of such a resource is the primary 3D file format file like a .gltf, .obj or .fbx file.</p><p>Officially supported file formats:</p><ul><li>.GLTF (.bin)</li><li>.GLB</li><li>.OBJ (.mtl)</li></ul><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-modelresourcefiles" tabindex="-1">function ModelResourceFiles <a class="header-anchor" href="#function-modelresourcefiles" aria-label="Permalink to &quot;function ModelResourceFiles&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ModelResourceFiles</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fs</span><span style="color:#E1E4E8;">::path path,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string name</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ModelResourceFiles</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fs</span><span style="color:#24292E;">::path path,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string name</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-fetchfiles" tabindex="-1">function fetchFiles <a class="header-anchor" href="#function-fetchfiles" aria-label="Permalink to &quot;function fetchFiles&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchFiles</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchFiles</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Derive and fetch all required files from the primary file path.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-fetchfiles">Core::ResourceFiles::fetchFiles</a></p><h3 id="function-fetchfiles-1" tabindex="-1">function fetchFiles <a class="header-anchor" href="#function-fetchfiles-1" aria-label="Permalink to &quot;function fetchFiles&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchFiles</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchFiles</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Parameters</strong>:</p><ul><li><strong>data</strong> A <a href="/cpp-api-reference/classes/classcore_1_1mesh.html">Core::Mesh</a> object</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1resourcefiles.html#function-fetchfiles">Core::ResourceFiles::fetchFiles</a></p><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>`,31),l=[r];function c(n,p,i,d,h,f){return s(),a("div",null,l)}const y=e(o,[["render",c]]);export{m as __pageData,y as default};
