import{_ as a,o as s,c as e,Q as t}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Vp::WorldShader","description":"","frontmatter":{"title":"Vp::WorldShader","summary":"Abstract shader that provides PVM matrices uniforms."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1WorldShader.md","filePath":"cpp-api-reference/classes/classVp_1_1WorldShader.md"}'),r={name:"cpp-api-reference/classes/classVp_1_1WorldShader.md"},n=t(`<h1 id="vp-worldshader" tabindex="-1">Vp::WorldShader <a class="header-anchor" href="#vp-worldshader" aria-label="Permalink to &quot;Vp::WorldShader&quot;">​</a></h1><p>Abstract shader that provides PVM matrices uniforms.</p><p><code>#include &quot;Viewport/shader/WorldShader.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Vp::Shader</a></p><p>Inherited by <a href="/cpp-api-reference/classes/classVp_1_1ObjectShader.html">Vp::ObjectShader</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#function-worldshader">WorldShader</a></strong>(GLuint id)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#function-init">init</a></strong>(bool initSuperclass) override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#function-setuniforms">setUniforms</a></strong>() override&lt;br&gt;Set uniforms before rendering.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#function-setworldtransform">setWorldTransform</a></strong>(const glm::mat4 &amp; model, const glm::mat4 &amp; view, const glm::mat4 &amp; projection)&lt;br&gt;Updates MVP matrices.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-m-model">m_model</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-m-projection">m_projection</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-m-view">m_view</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-m-wboitfarid">m_wboitFarId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-m-wboitnearid">m_wboitNearId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-modelmatrixid">modelMatrixId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-normalmatrixid">normalMatrixId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-projectionmatrixid">projectionMatrixId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-pvmmatrixid">pvmMatrixId</a></strong></td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1WorldShader.html#variable-viewmatrixid">viewMatrixId</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-shader">Shader</a></strong>(GLuint id)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-~shader">~Shader</a></strong>() =default</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-bindtexture2d">bindTexture2D</a></strong>(GLuint textureUnit, GLuint textureID, GLint samplerLocation)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-bindtexture2dms">bindTexture2DMS</a></strong>(GLuint textureUnit, GLuint textureID, GLint samplerLocation)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-hasuniform">hasUniform</a></strong>(GLint location)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-setuniformspermeshpart">setUniformsPerMeshPart</a></strong>(<a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1MeshPart.html">Core::Mesh::MeshPart</a> &amp; meshPart)&lt;br&gt;Set uniforms before rendering individual mesh parts.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-supportswboit">supportsWboit</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-use">use</a></strong>() const</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#variable-m-id">m_id</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether to use weighted blended transparency for output if supported.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#variable-m-wboitfunc">m_wboitFunc</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Vp::Shader</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#variable-m-wboitflagid">m_wboitFlagId</a></strong> &lt;br&gt;Uniform id of the wboit enable/disable flag.</td></tr><tr><td>GLint</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Shader.html#variable-m-wboitfuncid">m_wboitFuncId</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-worldshader" tabindex="-1">function WorldShader <a class="header-anchor" href="#function-worldshader" aria-label="Permalink to &quot;function WorldShader&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorldShader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    GLuint id</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorldShader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    GLuint id</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-init" tabindex="-1">function init <a class="header-anchor" href="#function-init" aria-label="Permalink to &quot;function init&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">initSuperclass</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initSuperclass</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-init">Vp::Shader::init</a></p><h3 id="function-setuniforms" tabindex="-1">function setUniforms <a class="header-anchor" href="#function-setuniforms" aria-label="Permalink to &quot;function setUniforms&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUniforms</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUniforms</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Set uniforms before rendering.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Shader.html#function-setuniforms">Vp::Shader::setUniforms</a></p><h3 id="function-setworldtransform" tabindex="-1">function setWorldTransform <a class="header-anchor" href="#function-setworldtransform" aria-label="Permalink to &quot;function setWorldTransform&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setWorldTransform</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">model</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setWorldTransform</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">model</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Updates MVP matrices.</p><p><strong>Parameters</strong>:</p><ul><li><strong>model</strong> Model use</li><li><strong>view</strong> View use</li><li><strong>projection</strong> Projection use</li></ul><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-model" tabindex="-1">variable m_model <a class="header-anchor" href="#variable-m-model" aria-label="Permalink to &quot;variable m_model&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_model;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_model;</span></span></code></pre></div><h3 id="variable-m-projection" tabindex="-1">variable m_projection <a class="header-anchor" href="#variable-m-projection" aria-label="Permalink to &quot;variable m_projection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_projection;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_projection;</span></span></code></pre></div><h3 id="variable-m-view" tabindex="-1">variable m_view <a class="header-anchor" href="#variable-m-view" aria-label="Permalink to &quot;variable m_view&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_view;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_view;</span></span></code></pre></div><h3 id="variable-m-wboitfarid" tabindex="-1">variable m_wboitFarId <a class="header-anchor" href="#variable-m-wboitfarid" aria-label="Permalink to &quot;variable m_wboitFarId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint m_wboitFarId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint m_wboitFarId;</span></span></code></pre></div><h3 id="variable-m-wboitnearid" tabindex="-1">variable m_wboitNearId <a class="header-anchor" href="#variable-m-wboitnearid" aria-label="Permalink to &quot;variable m_wboitNearId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint m_wboitNearId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint m_wboitNearId;</span></span></code></pre></div><h3 id="variable-modelmatrixid" tabindex="-1">variable modelMatrixId <a class="header-anchor" href="#variable-modelmatrixid" aria-label="Permalink to &quot;variable modelMatrixId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint modelMatrixId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint modelMatrixId;</span></span></code></pre></div><h3 id="variable-normalmatrixid" tabindex="-1">variable normalMatrixId <a class="header-anchor" href="#variable-normalmatrixid" aria-label="Permalink to &quot;variable normalMatrixId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint normalMatrixId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint normalMatrixId;</span></span></code></pre></div><h3 id="variable-projectionmatrixid" tabindex="-1">variable projectionMatrixId <a class="header-anchor" href="#variable-projectionmatrixid" aria-label="Permalink to &quot;variable projectionMatrixId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint projectionMatrixId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint projectionMatrixId;</span></span></code></pre></div><h3 id="variable-pvmmatrixid" tabindex="-1">variable pvmMatrixId <a class="header-anchor" href="#variable-pvmmatrixid" aria-label="Permalink to &quot;variable pvmMatrixId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint pvmMatrixId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint pvmMatrixId;</span></span></code></pre></div><h3 id="variable-viewmatrixid" tabindex="-1">variable viewMatrixId <a class="header-anchor" href="#variable-viewmatrixid" aria-label="Permalink to &quot;variable viewMatrixId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLint viewMatrixId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLint viewMatrixId;</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 12:51:55 +0000</p>`,54),l=[n];function o(p,i,c,d,h,m){return s(),e("div",null,l)}const v=a(r,[["render",o]]);export{u as __pageData,v as default};
