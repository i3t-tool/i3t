import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.0f749972.js";const E=JSON.parse('{"title":"Workspace::OperatorBuilder","description":"","frontmatter":{"title":"Workspace::OperatorBuilder"},"headers":[],"relativePath":"cpp-api-reference/classes/classWorkspace_1_1OperatorBuilder.md","filePath":"cpp-api-reference/classes/classWorkspace_1_1OperatorBuilder.md"}'),n={name:"cpp-api-reference/classes/classWorkspace_1_1OperatorBuilder.md"},t=o(`<h1 id="workspace-operatorbuilder" tabindex="-1">Workspace::OperatorBuilder <a class="header-anchor" href="#workspace-operatorbuilder" aria-label="Permalink to &quot;Workspace::OperatorBuilder&quot;">​</a></h1><p><code>#include &quot;GUI/Workspace/Builder.h&quot;</code></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1OperatorBuilder.html#function-operatorbuilder">OperatorBuilder</a></strong>()</td></tr><tr><td>std::optional&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html">CoreNodeWithPins</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1OperatorBuilder.html#function-operator()">operator()</a></strong>(const char * type)</td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-operatorbuilder" tabindex="-1">function OperatorBuilder <a class="header-anchor" href="#function-operatorbuilder" aria-label="Permalink to &quot;function OperatorBuilder&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OperatorBuilder</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OperatorBuilder</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-operator" tabindex="-1">function operator() <a class="header-anchor" href="#function-operator" aria-label="Permalink to &quot;function operator()&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">optional</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNodeWithPins</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">()</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">optional</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNodeWithPins</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">()</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><hr><p>Updated on 2024-11-06 at 20:16:53 +0000</p>`,11),p=[t];function r(l,c,i,d,u,h){return a(),e("div",null,p)}const _=s(n,[["render",r]]);export{E as __pageData,_ as default};
