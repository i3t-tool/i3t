import{_ as t,o as a,c as s,Q as e}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Vp::AbstractOrbitCamera","description":"","frontmatter":{"title":"Vp::AbstractOrbitCamera","summary":"Abstract camera that turns around a point (pivot) at a certain distance (radius)."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.md","filePath":"cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.md"}'),r={name:"cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.md"},n=e(`<h1 id="vp-abstractorbitcamera" tabindex="-1">Vp::AbstractOrbitCamera <a class="header-anchor" href="#vp-abstractorbitcamera" aria-label="Permalink to &quot;Vp::AbstractOrbitCamera&quot;">​</a></h1><p>Abstract camera that turns around a point (pivot) at a certain distance (radius).</p><p><code>#include &quot;Viewport/camera/AbstractOrbitCamera.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">Vp::AbstractCamera</a></p><p>Inherited by <a href="/cpp-api-reference/classes/classVp_1_1OrbitCamera.html">Vp::OrbitCamera</a>, <a href="/cpp-api-reference/classes/classVp_1_1TrackballCamera.html">Vp::TrackballCamera</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-centeronbox">centerOnBox</a></strong>(glm::vec3 boxMin, glm::vec3 boxMax, bool interpolate) override&lt;br&gt;Moves camera so that the specified axis aligned bounding box is visible.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-getpivot">getPivot</a></strong>() const</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-getradius">getRadius</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-setpivot">setPivot</a></strong>(const glm::vec3 &amp; pivot)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-setradius">setRadius</a></strong>(float radius)</td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#variable-m-pivot">m_pivot</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#variable-m-radius">m_radius</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Types inherited from <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">Vp::AbstractCamera</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>enum class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#enum-viewpoint">Viewpoint</a></strong> { LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK}</td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">Vp::AbstractCamera</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-~abstractcamera">~AbstractCamera</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronobjects">centerOnObjects</a></strong>(const std::vector&lt; const <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a> * &gt; objects)&lt;br&gt;Moves camera so that the specified objects are visible.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronscene">centerOnScene</a></strong>(const <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Moves camera so that all objects in the scene are visible.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronselection">centerOnSelection</a></strong>(const <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Moves camera so that all selected objects in the scene are visible.</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getdirection">getDirection</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getfov">getFov</a></strong>() const</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getheight">getHeight</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getposition">getPosition</a></strong>() const</td></tr><tr><td>virtual glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getprojection">getProjection</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getright">getRight</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getup">getUp</a></strong>() const</td></tr><tr><td>virtual glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getview">getView</a></strong>() const</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getwidth">getWidth</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getzfar">getZFar</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getznear">getZNear</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-interpolate">interpolate</a></strong>(glm::mat4 from, glm::mat4 to)&lt;br&gt;Begin interpolation from one view matrix to another, the interpolation will take m_interpolationPeriod seconds in realtime.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-isinterpolating">isInterpolating</a></strong>(float &amp; progress) const&lt;br&gt;Checks whether interpolation between view matrices is currently happening.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-processinput">processInput</a></strong>(double dt, glm::vec2 mousePos, glm::ivec2 windowSize) =0&lt;br&gt;Updates the internal camera state with user input.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setfov">setFov</a></strong>(float fov)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setzfar">setZFar</a></strong>(float zFar)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setznear">setZNear</a></strong>(float zNear)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-size">size</a></strong>(int width, int height)&lt;br&gt;Sets the camera resolution in pixels.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-update">update</a></strong>() =0&lt;br&gt;Recalculates the view and projection matrices based on the internal camera state.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-viewpoint">viewpoint</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#enum-viewpoint">AbstractCamera::Viewpoint</a> viewpoint)&lt;br&gt;Moves the camera to the specified viewpoint.</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">Vp::AbstractCamera</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; glm::vec3 &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-createboundingboxworldpoints">createBoundingBoxWorldPoints</a></strong>(glm::vec3 boxMin, glm::vec3 boxMax, glm::mat4 modelMatrix)</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-createprojectionmatrix">createProjectionMatrix</a></strong>(bool nonShrinking) const</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">Vp::AbstractCamera</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationfrom">interpolationFrom</a></strong></td></tr><tr><td>double</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationperiod">interpolationPeriod</a></strong></td></tr><tr><td>std::chrono::time_point&lt; std::chrono::steady_clock, std::chrono::duration&lt; double &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationstart">interpolationStart</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationto">interpolationTo</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-direction">m_direction</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-fov">m_fov</a></strong> &lt;br&gt;Vertical field of vision in degrees.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-height">m_height</a></strong> &lt;br&gt;Camera resolution height in pixels.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-position">m_position</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-projection">m_projection</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-right">m_right</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-up">m_up</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-view">m_view</a></strong></td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-width">m_width</a></strong> &lt;br&gt;Camera resolution width in pixels.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-zfar">m_zFar</a></strong> &lt;br&gt;Distance to the far clipping pane.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-znear">m_zNear</a></strong> &lt;br&gt;Distance to the near clipping pane.</td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-centeronbox" tabindex="-1">function centerOnBox <a class="header-anchor" href="#function-centeronbox" aria-label="Permalink to &quot;function centerOnBox&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">centerOnBox</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMin</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMax</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">interpolate</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">centerOnBox</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMin</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMax</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">interpolate</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Moves camera so that the specified axis aligned bounding box is visible.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronbox">Vp::AbstractCamera::centerOnBox</a></p><h3 id="function-getpivot" tabindex="-1">function getPivot <a class="header-anchor" href="#function-getpivot" aria-label="Permalink to &quot;function getPivot&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPivot</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPivot</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-getradius" tabindex="-1">function getRadius <a class="header-anchor" href="#function-getradius" aria-label="Permalink to &quot;function getRadius&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRadius</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRadius</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-setpivot" tabindex="-1">function setPivot <a class="header-anchor" href="#function-setpivot" aria-label="Permalink to &quot;function setPivot&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setPivot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">pivot</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setPivot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">pivot</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-setradius" tabindex="-1">function setRadius <a class="header-anchor" href="#function-setradius" aria-label="Permalink to &quot;function setRadius&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setRadius</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">radius</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setRadius</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">radius</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-pivot" tabindex="-1">variable m_pivot <a class="header-anchor" href="#variable-m-pivot" aria-label="Permalink to &quot;variable m_pivot&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_pivot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_pivot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-radius" tabindex="-1">variable m_radius <a class="header-anchor" href="#variable-m-radius" aria-label="Permalink to &quot;variable m_radius&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> m_radius </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> m_radius </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span></code></pre></div><hr><p>Updated on 2025-01-23 at 08:58:54 +0000</p>`,38),o=[n];function l(c,p,i,d,h,m){return a(),s("div",null,o)}const f=t(r,[["render",l]]);export{g as __pageData,f as default};
