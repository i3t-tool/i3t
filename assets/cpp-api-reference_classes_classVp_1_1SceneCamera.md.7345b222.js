import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.0f749972.js";const f=JSON.parse('{"title":"Vp::SceneCamera","description":"","frontmatter":{"title":"Vp::SceneCamera","summary":"Viewport entity representing a Camera node in Core/GUI."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1SceneCamera.md","filePath":"cpp-api-reference/classes/classVp_1_1SceneCamera.md"}'),r={name:"cpp-api-reference/classes/classVp_1_1SceneCamera.md"},n=a(`<h1 id="vp-scenecamera" tabindex="-1">Vp::SceneCamera <a class="header-anchor" href="#vp-scenecamera" aria-label="Permalink to &quot;Vp::SceneCamera&quot;">​</a></h1><p><a href="./.html">Viewport</a> entity representing a Camera node in Core/GUI.</p><p><code>#include &quot;Viewport/entity/nodes/SceneCamera.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">Vp::SceneModel</a>, <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html">Vp::TexturedObject</a>, <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">Vp::GameObject</a>, <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-scenecamera">SceneCamera</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classVp_1_1PhongShader.html">PhongShader</a> * shader)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-onsceneadd">onSceneAdd</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene) override&lt;br&gt;Called when the entity is added to a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-onsceneremove">onSceneRemove</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene) override&lt;br&gt;Called when the entity is removed from a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-update">update</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene) override</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-fillfrustum">m_fillFrustum</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-frustumcolor">m_frustumColor</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-frustumoutlinecolor">m_frustumOutlineColor</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-projectionmatrix">m_projectionMatrix</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-showfrustum">m_showFrustum</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-viewmatrix">m_viewMatrix</a></strong></td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::weak_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1FrustumObject.html">FrustumObject</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-frustum">m_frustum</a></strong></td></tr><tr><td>std::weak_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1FrustumObject.html">FrustumObject</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#variable-m-frustumoutline">m_frustumOutline</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">Vp::SceneModel</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-scenemodel">SceneModel</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classVp_1_1PhongShader.html">PhongShader</a> * shader)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-scenemodel">SceneModel</a></strong>(std::string modelAlias, <a href="/cpp-api-reference/classes/classVp_1_1PhongShader.html">PhongShader</a> * shader)&lt;br&gt;Load mesh using an alias.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-getmodel">getModel</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) override&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-setmodel">setModel</a></strong>(std::string modelAlias)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html">Vp::SceneModel</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::weak_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1ColoredObject.html">ColoredObject</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#variable-m-axes">m_axes</a></strong> &lt;br&gt;Visualisation of the basis vectors.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">Core::ID</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#variable-m-guinodeid">m_guiNodeId</a></strong> &lt;br&gt;ID of the gui node object is representing.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#variable-m-modelalias">m_modelAlias</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#variable-m-showaxes">m_showAxes</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html">Vp::TexturedObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#function-texturedobject">TexturedObject</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classVp_1_1PhongShader.html">PhongShader</a> * shader)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) override&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html">Vp::TexturedObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#variable-m-tint">m_tint</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#variable-m-tintstrength">m_tintStrength</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">Vp::GameObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-gameobject">GameObject</a></strong>() =default&lt;br&gt;Creates an empty <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a>.</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-gameobject">GameObject</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classVp_1_1ObjectShader.html">ObjectShader</a> * shader)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-dispose">dispose</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) override&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">Vp::GameObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#variable-m-mesh">m_mesh</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#variable-m-opacity">m_opacity</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-entity">Entity</a></strong>()</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-~entity">~Entity</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-dispose">dispose</a></strong>() =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-getdisplaytype">getDisplayType</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-gethighlightcolor">getHighlightColor</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-ishighlighted">isHighlighted</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(glm::mat4 view, glm::mat4 projection)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(glm::mat4 view, glm::mat4 projection, bool silhouette)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-setdisplaytype">setDisplayType</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a> type)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlightcolor">setHighlightColor</a></strong>(glm::vec3 highlightColor)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlighted">setHighlighted</a></strong>(bool highlight)</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) =0&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-backfacecull">m_backFaceCull</a></strong></td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-explicittransparencyorder">m_explicitTransparencyOrder</a></strong> &lt;br&gt;Explicit order for ordered transparency.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlight">m_highlight</a></strong> &lt;br&gt;Whether to paint this entity with an outline, can be used for selection or just highlighting.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightcolor">m_highlightColor</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightusedepth">m_highlightUseDepth</a></strong> &lt;br&gt;Whether the highlight outline should respect the scene&#39;s depth buffer.</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-modelmatrix">m_modelMatrix</a></strong> &lt;br&gt;Model transformation of the entity.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-opaque">m_opaque</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectable">m_selectable</a></strong> &lt;br&gt;Whether this entity should be written into the selection stencil buffer.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectionid">m_selectionId</a></strong> &lt;br&gt;Id of the object, -1 if not assigned, for selection purposes.</td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-shader">m_shader</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-visible">m_visible</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether this entity should be rendered using order independent transparency, relevant if using a shader that supports wboit.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboitfunc">m_wboitFunc</a></strong> &lt;br&gt;Index of the weight function to be used in wboit.</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-displaytype">m_displayType</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-scenecamera" tabindex="-1">function SceneCamera <a class="header-anchor" href="#function-scenecamera" aria-label="Permalink to &quot;function SceneCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">SceneCamera</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::Mesh </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> mesh,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PhongShader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> shader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">SceneCamera</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::Mesh </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> mesh,</span></span>
<span class="line"><span style="color:#24292E;">    PhongShader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> shader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-onsceneadd" tabindex="-1">function onSceneAdd <a class="header-anchor" href="#function-onsceneadd" aria-label="Permalink to &quot;function onSceneAdd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneAdd</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneAdd</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called when the entity is added to a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> to which it has been added</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneadd">Vp::Entity::onSceneAdd</a></p><h3 id="function-onsceneremove" tabindex="-1">function onSceneRemove <a class="header-anchor" href="#function-onsceneremove" aria-label="Permalink to &quot;function onSceneRemove&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneRemove</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneRemove</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Called when the entity is removed from a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> from which it has been removed</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneremove">Vp::Entity::onSceneRemove</a></p><h3 id="function-update" tabindex="-1">function update <a class="header-anchor" href="#function-update" aria-label="Permalink to &quot;function update&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-update">Vp::GameObject::update</a></p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-fillfrustum" tabindex="-1">variable m_fillFrustum <a class="header-anchor" href="#variable-m-fillfrustum" aria-label="Permalink to &quot;variable m_fillFrustum&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_fillFrustum {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_fillFrustum {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-frustumcolor" tabindex="-1">variable m_frustumColor <a class="header-anchor" href="#variable-m-frustumcolor" aria-label="Permalink to &quot;variable m_frustumColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_frustumColor {</span><span style="color:#79B8FF;">0.35</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.27</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.06</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_frustumColor {</span><span style="color:#005CC5;">0.35</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.27</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.06</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-frustumoutlinecolor" tabindex="-1">variable m_frustumOutlineColor <a class="header-anchor" href="#variable-m-frustumoutlinecolor" aria-label="Permalink to &quot;variable m_frustumOutlineColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_frustumOutlineColor {</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_frustumOutlineColor {</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-projectionmatrix" tabindex="-1">variable m_projectionMatrix <a class="header-anchor" href="#variable-m-projectionmatrix" aria-label="Permalink to &quot;variable m_projectionMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_projectionMatrix {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_projectionMatrix {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-showfrustum" tabindex="-1">variable m_showFrustum <a class="header-anchor" href="#variable-m-showfrustum" aria-label="Permalink to &quot;variable m_showFrustum&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_showFrustum {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_showFrustum {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-viewmatrix" tabindex="-1">variable m_viewMatrix <a class="header-anchor" href="#variable-m-viewmatrix" aria-label="Permalink to &quot;variable m_viewMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_viewMatrix {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_viewMatrix {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-frustum" tabindex="-1">variable m_frustum <a class="header-anchor" href="#variable-m-frustum" aria-label="Permalink to &quot;variable m_frustum&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::weak_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> FrustumObject </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_frustum;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::weak_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> FrustumObject </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_frustum;</span></span></code></pre></div><h3 id="variable-m-frustumoutline" tabindex="-1">variable m_frustumOutline <a class="header-anchor" href="#variable-m-frustumoutline" aria-label="Permalink to &quot;variable m_frustumOutline&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::weak_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> FrustumObject </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_frustumOutline;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::weak_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> FrustumObject </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_frustumOutline;</span></span></code></pre></div><hr><p>Updated on 2025-01-23 at 08:58:04 +0000</p>`,69),l=[n];function p(o,c,i,d,h,m){return t(),s("div",null,l)}const b=e(r,[["render",p]]);export{f as __pageData,b as default};
