import{_ as e,o as s,c as a,Q as o}from"./chunks/framework.0f749972.js";const h=JSON.parse('{"title":"WorkspaceCoreLink","description":"","frontmatter":{"title":"WorkspaceCoreLink"},"headers":[],"relativePath":"cpp-api-reference/classes/classWorkspaceCoreLink.md","filePath":"cpp-api-reference/classes/classWorkspaceCoreLink.md"}'),r={name:"cpp-api-reference/classes/classWorkspaceCoreLink.md"},p=o('<h1 id="workspacecorelink" tabindex="-1">WorkspaceCoreLink <a class="header-anchor" href="#workspacecorelink" aria-label="Permalink to &quot;WorkspaceCoreLink&quot;">​</a></h1><p><a href="#detailed-description">More...</a></p><p><code>#include &quot;GUI/Elements/Nodes/WorkspaceElementsWithCoreData.h&quot;</code></p><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkspaceCoreLink</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkspaceCoreLink</span><span style="color:#24292E;">;</span></span></code></pre></div><p>class <a href="/cpp-api-reference/classes/classworkspacecorelink.html">WorkspaceCoreLink</a> : public <a href="/cpp-api-reference/classes/classdiwne_1_1link.html">DIWNE::Link</a> { protected: WorkspaceCoreOutputPin* m_startPin; WorkspaceCoreInputPin* const m_endPin;</p><p>public: <a href="/cpp-api-reference/classes/classworkspacecorelink.html">WorkspaceCoreLink(DIWNE::Diwne&amp; diwne, DIWNE::ID id, WorkspaceCoreInputPin* endPin)</a>;</p><p>WorkspaceCoreOutputPin* getStartPin() const { return m_startPin; }; WorkspaceCoreInputPin* const getEndPin() const { return m_endPin; }; void setStartPin(WorkspaceCoreOutputPin* startPin) { m_startPin = startPin; }; void unplug();</p><p>void popupContent() override; bool initialize() override;</p><p>void updateEndpoints() override; void updateControlPointsOffsets(); };</p><p>/*!</p><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>',13),n=[p];function t(c,i,l,d,k,u){return s(),a("div",null,n)}const C=e(r,[["render",t]]);export{h as __pageData,C as default};
