import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guide/architecture.md","filePath":"developer-guide/architecture.md"}'),o={name:"developer-guide/architecture.md"},t=n(`<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>A brief overview of the I3T application architecture, including the project structure and key components.</p><h2 id="application-components-overview" tabindex="-1">Application Components Overview <a class="header-anchor" href="#application-components-overview" aria-label="Permalink to &quot;Application Components Overview&quot;">​</a></h2><p>The source code of the I3T application is organized into directories according to specific functionalities and areas of focus. This section provides a brief summary of the core components.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Data/                       All Assets (fonts, models, scenes, tutorials, ...)</span></span>
<span class="line"><span style="color:#e1e4e8;">Dependencies/               Directory with external dependencies.</span></span>
<span class="line"><span style="color:#e1e4e8;">Docs/</span></span>
<span class="line"><span style="color:#e1e4e8;">Source/</span></span>
<span class="line"><span style="color:#e1e4e8;">    - Commands/             Commands for the command pattern.</span></span>
<span class="line"><span style="color:#e1e4e8;">    - Core/                 Core of the application.</span></span>
<span class="line"><span style="color:#e1e4e8;">    - GUI/                  ImGui windows, dialogs, elements.</span></span>
<span class="line"><span style="color:#e1e4e8;">        - Elements</span></span>
<span class="line"><span style="color:#e1e4e8;">            - Dialogs/      </span></span>
<span class="line"><span style="color:#e1e4e8;">            - Modals/</span></span>
<span class="line"><span style="color:#e1e4e8;">            - Nodes/       </span></span>
<span class="line"><span style="color:#e1e4e8;">            - Windows/      </span></span>
<span class="line"><span style="color:#e1e4e8;">        - ImGui/            Implementation of ImGui backend.</span></span>
<span class="line"><span style="color:#e1e4e8;">Test/                       Unit tests, same structure as Source/ directory.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Data/                       All Assets (fonts, models, scenes, tutorials, ...)</span></span>
<span class="line"><span style="color:#24292e;">Dependencies/               Directory with external dependencies.</span></span>
<span class="line"><span style="color:#24292e;">Docs/</span></span>
<span class="line"><span style="color:#24292e;">Source/</span></span>
<span class="line"><span style="color:#24292e;">    - Commands/             Commands for the command pattern.</span></span>
<span class="line"><span style="color:#24292e;">    - Core/                 Core of the application.</span></span>
<span class="line"><span style="color:#24292e;">    - GUI/                  ImGui windows, dialogs, elements.</span></span>
<span class="line"><span style="color:#24292e;">        - Elements</span></span>
<span class="line"><span style="color:#24292e;">            - Dialogs/      </span></span>
<span class="line"><span style="color:#24292e;">            - Modals/</span></span>
<span class="line"><span style="color:#24292e;">            - Nodes/       </span></span>
<span class="line"><span style="color:#24292e;">            - Windows/      </span></span>
<span class="line"><span style="color:#24292e;">        - ImGui/            Implementation of ImGui backend.</span></span>
<span class="line"><span style="color:#24292e;">Test/                       Unit tests, same structure as Source/ directory.</span></span></code></pre></div><h3 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h3><p>The <code>Core</code> directory forms the foundation of the application, containing data structures for &quot;boxes&quot; (nodes), their connections, and interface definitions for application modules (<code>Module</code> class). The <code>Application</code> class manages the lifecycle, OpenGL context, command processing, and the game loop.</p><p>Key subdirectories include:</p><ul><li><strong>Input</strong>: Handles user input and maps key combinations to actions.</li><li><strong>Nodes</strong>: Implements the data model for the node editor, managing operators, transformations, and lifecycle control via the <code>GraphManager</code> class.</li><li><strong>Resources</strong>: Manages application resources (textures, models) using the <code>pgr-framework</code> for graphics programming.</li></ul><h3 id="diwne-dear-imgui-wrapper-for-node-editor" tabindex="-1">DIWNE (Dear ImGui Wrapper for Node Editor) <a class="header-anchor" href="#diwne-dear-imgui-wrapper-for-node-editor" aria-label="Permalink to &quot;DIWNE (Dear ImGui Wrapper for Node Editor)&quot;">​</a></h3><p>DIWNE is a custom library for creating a node editor using Dear ImGui, designed to support I3T’s requirements. It abstracts data representation to allow flexibility in integrating various data structures. DIWNE powers the interactive content within the <code>WorkspaceWindow</code>.</p><h3 id="gui" tabindex="-1">GUI <a class="header-anchor" href="#gui" aria-label="Permalink to &quot;GUI&quot;">​</a></h3><p>The <code>GUI</code> directory contains code for the graphical user interface:</p><ul><li><strong>UIModule</strong>: Creates dockable windows and manages styling.</li><li><strong>Elements</strong>: Implements all UI elements and dialogs.</li><li><strong>Theme</strong>: Defines and stores style configurations (colors, sizes, fonts).</li><li><strong>Workspace</strong>: Implements the node editor’s graphical interface, connecting to its core data structures.</li></ul><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h3><p>This module implements the Memento design pattern for saving and restoring application states. It supports undo/redo functionality and saves scenes and settings to files for later restoration.</p><h3 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h3><p>Defines the data structure for tutorials, handling file loading and rendering. The <code>TutorialWindow</code> class displays tutorial content.</p><h3 id="viewport" tabindex="-1">Viewport <a class="header-anchor" href="#viewport" aria-label="Permalink to &quot;Viewport&quot;">​</a></h3><p>Manages scene rendering using OpenGL, including object selection and outlining selected objects.</p>`,20),i=[t];function r(l,c,p,d,u,h){return s(),a("div",null,i)}const f=e(o,[["render",r]]);export{g as __pageData,f as default};
