import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.0f749972.js";const m=JSON.parse('{"title":"Core::Mesh","description":"","frontmatter":{"title":"Core::Mesh","summary":"Mesh represents a complete 3D model."},"headers":[],"relativePath":"cpp-api-reference/classes/classCore_1_1Mesh.md","filePath":"cpp-api-reference/classes/classCore_1_1Mesh.md"}'),l={name:"cpp-api-reference/classes/classCore_1_1Mesh.md"},o=n(`<h1 id="core-mesh" tabindex="-1">Core::Mesh <a class="header-anchor" href="#core-mesh" aria-label="Permalink to &quot;Core::Mesh&quot;">​</a></h1><p><a href="./.html">Mesh</a> represents a complete 3D model. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Core/Resources/Mesh.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classCore_1_1ManagedResource.html">Core::ManagedResource</a></p><h2 id="public-classes" tabindex="-1">Public Classes <a class="header-anchor" href="#public-classes" aria-label="Permalink to &quot;Public Classes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1Material.html">Material</a></strong> &lt;br&gt;<a href="/cpp-api-reference/classes/classCore_1_1Data.html">Data</a> class holding basic material information.</td></tr><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1MeshPart.html">MeshPart</a></strong> &lt;br&gt;Individual part of the bigger mesh containing separate geometry, material and textures.</td></tr><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1TextureSet.html">TextureSet</a></strong> &lt;br&gt;A set of textures for multi-mapping.</td></tr></tbody></table><h2 id="public-types" tabindex="-1">Public Types <a class="header-anchor" href="#public-types" aria-label="Permalink to &quot;Public Types&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>enum</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-drawtype">DrawType</a></strong> { ARRAYS, ELEMENTS}</td></tr><tr><td>enum</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">PrimitiveType</a></strong> { LINES, TRIANGLES}</td></tr></tbody></table><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-dispose">dispose</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-render">render</a></strong>() const&lt;br&gt;Renders the mesh and all its mesh parts.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-rendermeshpart">renderMeshPart</a></strong>(const <a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1MeshPart.html">MeshPart</a> &amp; meshPart) const&lt;br&gt;Renders an individual mesh part.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-create">create</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">Mesh::PrimitiveType</a> primitiveType, const float * verts, const unsigned int nVertices, const float * colors, const unsigned int nColors)&lt;br&gt;Create mesh from vertices and colors.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-create">create</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">Mesh::PrimitiveType</a> primitiveType, const float * verts, const unsigned int nVertices, const unsigned int * indices, const unsigned int nIndices, const float * colors, const unsigned int nColors)&lt;br&gt;Create mesh from indexed vertices and colors; Only fills the color vertex buffer.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-load">load</a></strong>(const std::string &amp; path, bool normalize =false, bool minimalLoad =false)&lt;br&gt;Load mesh from a model file using assimp Fills normal, texcoord and tangent vertex buffers.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-boundingboxmax">m_boundingBoxMax</a></strong> &lt;br&gt;<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> bounding box max, derived from bounding boxes of mesh parts.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-boundingboxmin">m_boundingBoxMin</a></strong> &lt;br&gt;<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> bounding box min, derived from bounding boxes of mesh parts.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-color-vbo">m_color_vbo</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-drawtype">DrawType</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-drawtype">m_drawType</a></strong></td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-ebo">m_ebo</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/structCore_1_1Mesh_1_1MeshPart.html">MeshPart</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-meshparts">m_meshParts</a></strong> &lt;br&gt;List of mesh parts making up this mesh.</td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-nindices">m_nIndices</a></strong> &lt;br&gt;count of indices af all the mesh parts together</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-normal-vbo">m_normal_vbo</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-normalized">m_normalized</a></strong> &lt;br&gt;Whether the mesh geometry has been normalized on load.</td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-nvertices">m_nVertices</a></strong> &lt;br&gt;count of vertices af all the mesh parts together</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-path">m_path</a></strong> &lt;br&gt;If applicable, file path to the primary source file.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#enum-primitivetype">PrimitiveType</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-primitivetype">m_primitiveType</a></strong></td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-tangent-vbo">m_tangent_vbo</a></strong></td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-texturecount">m_textureCount</a></strong> &lt;br&gt;Number of loaded textures for this mesh (files or embedded)</td></tr><tr><td>std::set&lt; std::string &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-texturefilelist">m_textureFileList</a></strong> &lt;br&gt;List of texture file paths this mesh requires (not including embedded textures)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-usecolors">m_useColors</a></strong> &lt;br&gt;Whether the vertex colors vbo is used.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-usenormals">m_useNormals</a></strong> &lt;br&gt;Whether the normal vbo is used.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-usetangents">m_useTangents</a></strong> &lt;br&gt;Whether the tangent vbo is used.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-usetexcoords">m_useTexcoords</a></strong> &lt;br&gt;Whether the texture coordinates vbo is used.</td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-uv-vbo">m_uv_vbo</a></strong></td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-vao">m_vao</a></strong></td></tr><tr><td>GLuint</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#variable-m-vertex-vbo">m_vertex_vbo</a></strong></td></tr></tbody></table><h2 id="friends" tabindex="-1">Friends <a class="header-anchor" href="#friends" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#friend-resourcemanager">ResourceManager</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classCore_1_1ManagedResource.html">Core::ManagedResource</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>size_t</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1ManagedResource.html#variable-m-resourceid">m_resourceId</a></strong> &lt;br&gt;<a href="./.html">Resource</a> ID of an object An identifier used by a <a href="./.html">ResourceManager</a>.</td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">;</span></span></code></pre></div><p><a href="./.html">Mesh</a> represents a complete 3D model.</p><p>It hold relevant opengl state data and a list of mesh parts that actually make up the model. Each mesh part also holds information about a material and a set of textures. Geometry is immediately passed to OpenGL and not preserved in memory. All geometry data is stored in a set of buffers that are shared among the mesh parts of the mesh.</p><p>Can be loaded using assimp with <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-load">Mesh::load()</a> Or created directly from data using <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-create">Mesh::create()</a></p><p>Vertex attribute locations are hardcoded and are:</p><ul><li>location 0 = aPos (vec3)</li><li>location 1 = aNormal (vec3)</li><li>location 2 = aTexCoord (vec2)</li><li>location 3 = aTangent (vec3)</li><li>location 4 = aColor (vec3)</li></ul><p>Normals, TexCoords, Tangents and Colors can be individually disabled</p><h2 id="public-types-documentation" tabindex="-1">Public Types Documentation <a class="header-anchor" href="#public-types-documentation" aria-label="Permalink to &quot;Public Types Documentation&quot;">​</a></h2><h3 id="enum-drawtype" tabindex="-1">enum DrawType <a class="header-anchor" href="#enum-drawtype" aria-label="Permalink to &quot;enum DrawType&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>ARRAYS</td><td></td><td></td></tr><tr><td>ELEMENTS</td><td></td><td></td></tr></tbody></table><h3 id="enum-primitivetype" tabindex="-1">enum PrimitiveType <a class="header-anchor" href="#enum-primitivetype" aria-label="Permalink to &quot;enum PrimitiveType&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>LINES</td><td></td><td></td></tr><tr><td>TRIANGLES</td><td></td><td></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-dispose" tabindex="-1">function dispose <a class="header-anchor" href="#function-dispose" aria-label="Permalink to &quot;function dispose&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-render" tabindex="-1">function render <a class="header-anchor" href="#function-render" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>Renders the mesh and all its mesh parts.</p><p>For more control over rendering you can iterate through individual meshParts and use <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html#function-rendermeshpart">renderMeshPart()</a></p><h3 id="function-rendermeshpart" tabindex="-1">function renderMeshPart <a class="header-anchor" href="#function-rendermeshpart" aria-label="Permalink to &quot;function renderMeshPart&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderMeshPart</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MeshPart</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">meshPart</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderMeshPart</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MeshPart</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">meshPart</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>Renders an individual mesh part.</p><p><strong>Parameters</strong>:</p><ul><li><strong>meshPart</strong> The mesh part to render.</li></ul><p><strong>Note that prior to calling this method the mesh&#39;s VAO needs to be bound!</strong></p><h3 id="function-create" tabindex="-1">function create <a class="header-anchor" href="#function-create" aria-label="Permalink to &quot;function create&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PrimitiveType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">primitiveType</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">verts</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nVertices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">colors</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nColors</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PrimitiveType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">primitiveType</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">verts</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nVertices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">colors</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nColors</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Create mesh from vertices and colors.</p><p><strong>Return</strong>: Pointer to the new <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object (newly allocated, to be managed externally)</p><p>Only fills the color vertex buffer.</p><h3 id="function-create-1" tabindex="-1">function create <a class="header-anchor" href="#function-create-1" aria-label="Permalink to &quot;function create&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PrimitiveType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">primitiveType</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">verts</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nVertices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">indices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nIndices</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">colors</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nColors</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PrimitiveType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">primitiveType</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">verts</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nVertices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">indices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nIndices</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">colors</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nColors</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Create mesh from indexed vertices and colors; Only fills the color vertex buffer.</p><p><strong>Return</strong>: Pointer to the new <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object (newly allocated, to be managed externally)</p><h3 id="function-load" tabindex="-1">function load <a class="header-anchor" href="#function-load" aria-label="Permalink to &quot;function load&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">normalize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">minimalLoad</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">path</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">normalize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">minimalLoad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Load mesh from a model file using assimp Fills normal, texcoord and tangent vertex buffers.</p><p><strong>Parameters</strong>:</p><ul><li><strong>path</strong> Path to the model file.</li><li><strong>minimalLoad</strong> If true, only the bare minimum of the model is loaded. Used to quickly aquire basic information from assimp without actually meaning to use the mesh.</li></ul><p><strong>Return</strong>: Pointer to the new <a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> object (newly allocated, to be managed externally)</p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-boundingboxmax" tabindex="-1">variable m_boundingBoxMax <a class="header-anchor" href="#variable-m-boundingboxmax" aria-label="Permalink to &quot;variable m_boundingBoxMax&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_boundingBoxMax {</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_boundingBoxMax {</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><p><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> bounding box max, derived from bounding boxes of mesh parts.</p><h3 id="variable-m-boundingboxmin" tabindex="-1">variable m_boundingBoxMin <a class="header-anchor" href="#variable-m-boundingboxmin" aria-label="Permalink to &quot;variable m_boundingBoxMin&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_boundingBoxMin {</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_boundingBoxMin {</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><p><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Mesh</a> bounding box min, derived from bounding boxes of mesh parts.</p><h3 id="variable-m-color-vbo" tabindex="-1">variable m_color_vbo <a class="header-anchor" href="#variable-m-color-vbo" aria-label="Permalink to &quot;variable m_color_vbo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_color_vbo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_color_vbo;</span></span></code></pre></div><h3 id="variable-m-drawtype" tabindex="-1">variable m_drawType <a class="header-anchor" href="#variable-m-drawtype" aria-label="Permalink to &quot;variable m_drawType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DrawType m_drawType;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DrawType m_drawType;</span></span></code></pre></div><h3 id="variable-m-ebo" tabindex="-1">variable m_ebo <a class="header-anchor" href="#variable-m-ebo" aria-label="Permalink to &quot;variable m_ebo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_ebo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_ebo;</span></span></code></pre></div><h3 id="variable-m-meshparts" tabindex="-1">variable m_meshParts <a class="header-anchor" href="#variable-m-meshparts" aria-label="Permalink to &quot;variable m_meshParts&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MeshPart </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_meshParts;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MeshPart </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_meshParts;</span></span></code></pre></div><p>List of mesh parts making up this mesh.</p><h3 id="variable-m-nindices" tabindex="-1">variable m_nIndices <a class="header-anchor" href="#variable-m-nindices" aria-label="Permalink to &quot;variable m_nIndices&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_nIndices {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_nIndices {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span></code></pre></div><p>count of indices af all the mesh parts together</p><h3 id="variable-m-normal-vbo" tabindex="-1">variable m_normal_vbo <a class="header-anchor" href="#variable-m-normal-vbo" aria-label="Permalink to &quot;variable m_normal_vbo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_normal_vbo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_normal_vbo;</span></span></code></pre></div><h3 id="variable-m-normalized" tabindex="-1">variable m_normalized <a class="header-anchor" href="#variable-m-normalized" aria-label="Permalink to &quot;variable m_normalized&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_normalized {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_normalized {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Whether the mesh geometry has been normalized on load.</p><h3 id="variable-m-nvertices" tabindex="-1">variable m_nVertices <a class="header-anchor" href="#variable-m-nvertices" aria-label="Permalink to &quot;variable m_nVertices&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_nVertices {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_nVertices {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span></code></pre></div><p>count of vertices af all the mesh parts together</p><h3 id="variable-m-path" tabindex="-1">variable m_path <a class="header-anchor" href="#variable-m-path" aria-label="Permalink to &quot;variable m_path&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string m_path;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string m_path;</span></span></code></pre></div><p>If applicable, file path to the primary source file.</p><h3 id="variable-m-primitivetype" tabindex="-1">variable m_primitiveType <a class="header-anchor" href="#variable-m-primitivetype" aria-label="Permalink to &quot;variable m_primitiveType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PrimitiveType m_primitiveType;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PrimitiveType m_primitiveType;</span></span></code></pre></div><h3 id="variable-m-tangent-vbo" tabindex="-1">variable m_tangent_vbo <a class="header-anchor" href="#variable-m-tangent-vbo" aria-label="Permalink to &quot;variable m_tangent_vbo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_tangent_vbo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_tangent_vbo;</span></span></code></pre></div><h3 id="variable-m-texturecount" tabindex="-1">variable m_textureCount <a class="header-anchor" href="#variable-m-texturecount" aria-label="Permalink to &quot;variable m_textureCount&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_textureCount {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_textureCount {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Number of loaded textures for this mesh (files or embedded)</p><h3 id="variable-m-texturefilelist" tabindex="-1">variable m_textureFileList <a class="header-anchor" href="#variable-m-texturefilelist" aria-label="Permalink to &quot;variable m_textureFileList&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_textureFileList;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_textureFileList;</span></span></code></pre></div><p>List of texture file paths this mesh requires (not including embedded textures)</p><h3 id="variable-m-usecolors" tabindex="-1">variable m_useColors <a class="header-anchor" href="#variable-m-usecolors" aria-label="Permalink to &quot;variable m_useColors&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_useColors {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_useColors {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Whether the vertex colors vbo is used.</p><h3 id="variable-m-usenormals" tabindex="-1">variable m_useNormals <a class="header-anchor" href="#variable-m-usenormals" aria-label="Permalink to &quot;variable m_useNormals&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_useNormals {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_useNormals {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Whether the normal vbo is used.</p><h3 id="variable-m-usetangents" tabindex="-1">variable m_useTangents <a class="header-anchor" href="#variable-m-usetangents" aria-label="Permalink to &quot;variable m_useTangents&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_useTangents {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_useTangents {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Whether the tangent vbo is used.</p><h3 id="variable-m-usetexcoords" tabindex="-1">variable m_useTexcoords <a class="header-anchor" href="#variable-m-usetexcoords" aria-label="Permalink to &quot;variable m_useTexcoords&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_useTexcoords {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_useTexcoords {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Whether the texture coordinates vbo is used.</p><h3 id="variable-m-uv-vbo" tabindex="-1">variable m_uv_vbo <a class="header-anchor" href="#variable-m-uv-vbo" aria-label="Permalink to &quot;variable m_uv_vbo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_uv_vbo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_uv_vbo;</span></span></code></pre></div><h3 id="variable-m-vao" tabindex="-1">variable m_vao <a class="header-anchor" href="#variable-m-vao" aria-label="Permalink to &quot;variable m_vao&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_vao;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_vao;</span></span></code></pre></div><h3 id="variable-m-vertex-vbo" tabindex="-1">variable m_vertex_vbo <a class="header-anchor" href="#variable-m-vertex-vbo" aria-label="Permalink to &quot;variable m_vertex_vbo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GLuint m_vertex_vbo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GLuint m_vertex_vbo;</span></span></code></pre></div><h2 id="friends-1" tabindex="-1">Friends <a class="header-anchor" href="#friends-1" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><h3 id="friend-resourcemanager" tabindex="-1">friend ResourceManager <a class="header-anchor" href="#friend-resourcemanager" aria-label="Permalink to &quot;friend ResourceManager&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResourceManager</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ResourceManager</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResourceManager</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ResourceManager</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><hr><p>Updated on 2024-10-16 at 16:58:01 +0000</p>`,121),t=[o];function p(r,c,i,d,h,y){return a(),e("div",null,t)}const u=s(l,[["render",p]]);export{m as __pageData,u as default};
