import{_ as e,o,c as a,Q as t}from"./chunks/framework.0f749972.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"lua-api-reference/workspace.md","filePath":"lua-api-reference/workspace.md"}'),n={name:"lua-api-reference/workspace.md"},s=t('<h2 id="workspace" tabindex="-1">Workspace <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;Workspace&quot;">​</a></h2><h3 id="node" tabindex="-1"><code>Node</code> <a class="header-anchor" href="#node" aria-label="Permalink to &quot;`Node`&quot;">​</a></h3><h4 id="method-type-string" tabindex="-1">method <code>type(): string</code> <a class="header-anchor" href="#method-type-string" aria-label="Permalink to &quot;method `type(): string`&quot;">​</a></h4><p>Returns the type of the node in the form of a string. See <code>Operation::keyWord</code> and <code>EOperatorType</code>, or <code>ETransformType</code> in C++ code for possible values.</p><h4 id="method-get-id-number" tabindex="-1">method <code>get_id(): number</code> <a class="header-anchor" href="#method-get-id-number" aria-label="Permalink to &quot;method `get_id(): number`&quot;">​</a></h4><p>Returns the unique identifier of the node.</p><h4 id="method-get-position-vec2" tabindex="-1">method <code>get_position(): Vec2</code> <a class="header-anchor" href="#method-get-position-vec2" aria-label="Permalink to &quot;method `get_position(): Vec2`&quot;">​</a></h4><p>Returns the position of the node within the Workspace.</p><h4 id="method-set-position-vec2-value" tabindex="-1">method <code>set_position(Vec2 value)</code> <a class="header-anchor" href="#method-set-position-vec2-value" aria-label="Permalink to &quot;method `set_position(Vec2 value)`&quot;">​</a></h4><p>Sets the position of the node within the Workspace.</p><h4 id="method-get-label-string" tabindex="-1">method <code>get_label(): string</code> <a class="header-anchor" href="#method-get-label-string" aria-label="Permalink to &quot;method `get_label(): string`&quot;">​</a></h4><p>Returns the label of the node.</p><h4 id="method-set-label-string-value" tabindex="-1">method <code>set_label(string value)</code> <a class="header-anchor" href="#method-set-label-string-value" aria-label="Permalink to &quot;method `set_label(string value)`&quot;">​</a></h4><p>Sets the label of the node.</p><h4 id="method-get-number-of-decimals-number" tabindex="-1">method <code>get_number_of_decimals(): number</code> <a class="header-anchor" href="#method-get-number-of-decimals-number" aria-label="Permalink to &quot;method `get_number_of_decimals(): number`&quot;">​</a></h4><p>Returns the number of decimals used for displaying the node&#39;s values.</p><h4 id="method-set-number-of-decimals-number-value" tabindex="-1">method <code>set_number_of_decimals(number value)</code> <a class="header-anchor" href="#method-set-number-of-decimals-number-value" aria-label="Permalink to &quot;method `set_number_of_decimals(number value)`&quot;">​</a></h4><p>Sets the number of decimals used for displaying the node&#39;s values.</p><h4 id="method-get-lod-number" tabindex="-1">method <code>get_lod(): number</code> <a class="header-anchor" href="#method-get-lod-number" aria-label="Permalink to &quot;method `get_lod(): number`&quot;">​</a></h4><p>Returns the level of detail of the node.</p><h4 id="method-set-lod-number-value" tabindex="-1">method <code>set_lod(number value)</code> <a class="header-anchor" href="#method-set-lod-number-value" aria-label="Permalink to &quot;method `set_lod(number value)`&quot;">​</a></h4><p>Sets the level of detail of the node.</p><h4 id="method-as-operator-operator" tabindex="-1">method <code>as_operator(): Operator</code> <a class="header-anchor" href="#method-as-operator-operator" aria-label="Permalink to &quot;method `as_operator(): Operator`&quot;">​</a></h4><h4 id="method-as-transform-transform" tabindex="-1">method <code>as_transform(): Transform</code> <a class="header-anchor" href="#method-as-transform-transform" aria-label="Permalink to &quot;method `as_transform(): Transform`&quot;">​</a></h4><h4 id="method-as-sequence-sequence" tabindex="-1">method <code>as_sequence(): Sequence</code> <a class="header-anchor" href="#method-as-sequence-sequence" aria-label="Permalink to &quot;method `as_sequence(): Sequence`&quot;">​</a></h4><h4 id="method-as-camera-camera" tabindex="-1">method <code>as_camera(): Camera</code> <a class="header-anchor" href="#method-as-camera-camera" aria-label="Permalink to &quot;method `as_camera(): Camera`&quot;">​</a></h4><h4 id="method-as-cycle-cycle" tabindex="-1">method <code>as_cycle(): Cycle</code> <a class="header-anchor" href="#method-as-cycle-cycle" aria-label="Permalink to &quot;method `as_cycle(): Cycle`&quot;">​</a></h4><h4 id="method-as-screen-screen" tabindex="-1">method <code>as_screen(): Screen</code> <a class="header-anchor" href="#method-as-screen-screen" aria-label="Permalink to &quot;method `as_screen(): Screen`&quot;">​</a></h4><h4 id="method-as-model-model" tabindex="-1">method <code>as_model(): Model</code> <a class="header-anchor" href="#method-as-model-model" aria-label="Permalink to &quot;method `as_model(): Model`&quot;">​</a></h4><h4 id="metamethod-tostring-string" tabindex="-1">metamethod <code>__tostring(): string</code> <a class="header-anchor" href="#metamethod-tostring-string" aria-label="Permalink to &quot;metamethod `__tostring(): string`&quot;">​</a></h4><p>Returns a string representation of the node in the form <code>{type} #{ID}</code>.</p><h3 id="operator" tabindex="-1"><code>Operator</code> <a class="header-anchor" href="#operator" aria-label="Permalink to &quot;`Operator`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-string-type" tabindex="-1">constructor <code>new(string type)</code> <a class="header-anchor" href="#constructor-new-string-type" aria-label="Permalink to &quot;constructor `new(string type)`&quot;">​</a></h4><p>Creates a new operator of the given <code>type</code>. See <code>EOperatorType</code> enum and <code>Operation::keyWord</code> in C++ code for possible values.</p><h4 id="method-is-input-plugged-index-number-boolean" tabindex="-1">method <code>is_input_plugged(index: number): boolean</code> <a class="header-anchor" href="#method-is-input-plugged-index-number-boolean" aria-label="Permalink to &quot;method `is_input_plugged(index: number): boolean`&quot;">​</a></h4><p>Returns true if the input at the given <code>index</code> is plugged.</p><h4 id="method-is-output-plugged-index-number-boolean" tabindex="-1">method <code>is_output_plugged(index: number): boolean</code> <a class="header-anchor" href="#method-is-output-plugged-index-number-boolean" aria-label="Permalink to &quot;method `is_output_plugged(index: number): boolean`&quot;">​</a></h4><p>Returns true if the output at the given <code>index</code> is plugged.</p><h4 id="method-get-input-float-index-number-number" tabindex="-1">method <code>get_input_float(index: number): number</code> <a class="header-anchor" href="#method-get-input-float-index-number-number" aria-label="Permalink to &quot;method `get_input_float(index: number): number`&quot;">​</a></h4><p>Get the input value of the operator at the given <code>index</code>. Returns nil if the input is not a <code>float</code>.</p><h4 id="method-get-input-vec3-index-number-vec3" tabindex="-1">method <code>get_input_vec3(index: number): Vec3</code> <a class="header-anchor" href="#method-get-input-vec3-index-number-vec3" aria-label="Permalink to &quot;method `get_input_vec3(index: number): Vec3`&quot;">​</a></h4><p>Get the input value of the operator at the given <code>index</code>. Returns nil if the input is not a <code>Vec3</code>.</p><h4 id="method-get-input-vec4-index-number-vec4" tabindex="-1">method <code>get_input_vec4(index: number): Vec4</code> <a class="header-anchor" href="#method-get-input-vec4-index-number-vec4" aria-label="Permalink to &quot;method `get_input_vec4(index: number): Vec4`&quot;">​</a></h4><p>Get the input value of the operator at the given <code>index</code>. Returns nil if the input is not a <code>Vec4</code>.</p><h4 id="method-get-input-quat-index-number-quat" tabindex="-1">method <code>get_input_quat(index: number): Quat</code> <a class="header-anchor" href="#method-get-input-quat-index-number-quat" aria-label="Permalink to &quot;method `get_input_quat(index: number): Quat`&quot;">​</a></h4><p>Get the input value of the operator at the given <code>index</code>. Returns nil if the input is not a <code>Quat</code>.</p><h4 id="method-get-input-mat4-index-number-mat4" tabindex="-1">method <code>get_input_mat4(index: number): Mat4</code> <a class="header-anchor" href="#method-get-input-mat4-index-number-mat4" aria-label="Permalink to &quot;method `get_input_mat4(index: number): Mat4`&quot;">​</a></h4><p>Get the input value of the operator at the given <code>index</code>. Returns nil if the input is not a <code>Mat4</code>.</p><h4 id="method-get-float-index-number-number" tabindex="-1">method <code>get_float(index: number): number</code> <a class="header-anchor" href="#method-get-float-index-number-number" aria-label="Permalink to &quot;method `get_float(index: number): number`&quot;">​</a></h4><p>Get the output value of the operator at the given <code>index</code>. Returns nil if the output is not a <code>float</code>.</p><h4 id="method-get-vec3-index-number-vec3" tabindex="-1">method <code>get_vec3(index: number): Vec3</code> <a class="header-anchor" href="#method-get-vec3-index-number-vec3" aria-label="Permalink to &quot;method `get_vec3(index: number): Vec3`&quot;">​</a></h4><p>Get the output value of the operator at the given <code>index</code>. Returns nil if the output is not a <code>Vec3</code>.</p><h4 id="method-get-vec4-index-number-vec4" tabindex="-1">method <code>get_vec4(index: number): Vec4</code> <a class="header-anchor" href="#method-get-vec4-index-number-vec4" aria-label="Permalink to &quot;method `get_vec4(index: number): Vec4`&quot;">​</a></h4><p>Get the output value of the operator at the given <code>index</code>. Returns nil if the output is not a <code>Vec4</code>.</p><h4 id="method-get-quat-index-number-quat" tabindex="-1">method <code>get_quat(index: number): Quat</code> <a class="header-anchor" href="#method-get-quat-index-number-quat" aria-label="Permalink to &quot;method `get_quat(index: number): Quat`&quot;">​</a></h4><p>Get the output value of the operator at the given <code>index</code>. Returns nil if the output is not a <code>Quat</code>.</p><h4 id="method-get-mat4-index-number-mat4" tabindex="-1">method <code>get_mat4(index: number): Mat4</code> <a class="header-anchor" href="#method-get-mat4-index-number-mat4" aria-label="Permalink to &quot;method `get_mat4(index: number): Mat4`&quot;">​</a></h4><p>Get the output value of the operator at the given <code>index</code>. Returns nil if the output is not a <code>Mat4</code>.</p><h4 id="method-set-value-value-number-boolean" tabindex="-1">method <code>set_value(value: number): boolean</code> <a class="header-anchor" href="#method-set-value-value-number-boolean" aria-label="Permalink to &quot;method `set_value(value: number): boolean`&quot;">​</a></h4><p>Set the value of the operator to the given <code>value</code>. Returns true if the operation was successful.</p><h4 id="method-set-value-value-vec3-boolean" tabindex="-1">method <code>set_value(value: Vec3): boolean</code> <a class="header-anchor" href="#method-set-value-value-vec3-boolean" aria-label="Permalink to &quot;method `set_value(value: Vec3): boolean`&quot;">​</a></h4><p>Set the value of the operator to the given <code>value</code>. Returns true if the operation was successful.</p><h4 id="method-set-value-value-vec4-boolean" tabindex="-1">method <code>set_value(value: Vec4): boolean</code> <a class="header-anchor" href="#method-set-value-value-vec4-boolean" aria-label="Permalink to &quot;method `set_value(value: Vec4): boolean`&quot;">​</a></h4><p>Set the value of the operator to the given <code>value</code>. Returns true if the operation was successful.</p><h3 id="transform" tabindex="-1"><code>Transform</code> <a class="header-anchor" href="#transform" aria-label="Permalink to &quot;`Transform`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-string-type-1" tabindex="-1">constructor <code>new(string type)</code> <a class="header-anchor" href="#constructor-new-string-type-1" aria-label="Permalink to &quot;constructor `new(string type)`&quot;">​</a></h4><p>Creates a new transform of the given <code>type</code>. See <code>ETransformType</code> enum and <code>Operation::keyWord</code> in C++ code for possible values.</p><h4 id="method-get-value-coords-vec2-number" tabindex="-1">method <code>get_value(coords: Vec2): number</code> <a class="header-anchor" href="#method-get-value-coords-vec2-number" aria-label="Permalink to &quot;method `get_value(coords: Vec2): number`&quot;">​</a></h4><p>Returns the value of transform matrix at the given <code>coords</code> where <code>coords.x</code> is the column and <code>coords.y</code> is the row.</p><h4 id="method-set-value-value-number-coords-vec2" tabindex="-1">method <code>set_value(value: number, coords: Vec2)</code> <a class="header-anchor" href="#method-set-value-value-number-coords-vec2" aria-label="Permalink to &quot;method `set_value(value: number, coords: Vec2)`&quot;">​</a></h4><p>Sets the <code>value</code> of transform matrix at the given <code>coords</code> where <code>coords.x</code> is the column and <code>coords.y</code> is the row.</p><h4 id="method-get-default-float-name-string-number" tabindex="-1">method <code>get_default_float(name: string): number</code> <a class="header-anchor" href="#method-get-default-float-name-string-number" aria-label="Permalink to &quot;method `get_default_float(name: string): number`&quot;">​</a></h4><p>Returns the value of the <code>float</code> property with the given <code>name</code>. For example, <code>get_float(&quot;angle&quot;)</code> can be used to get the <code>angle</code> property of a <code>AxisAngle</code> rotation transform.</p><h4 id="method-get-default-vec3-name-string-vec3" tabindex="-1">method <code>get_default_vec3(name: string): Vec3</code> <a class="header-anchor" href="#method-get-default-vec3-name-string-vec3" aria-label="Permalink to &quot;method `get_default_vec3(name: string): Vec3`&quot;">​</a></h4><p>Returns the value of the <code>Vec3</code> property with the given <code>name</code>. For example, <code>get_vec3(&quot;scale&quot;)</code> can be used to get the <code>scale</code> property of a <code>Scale</code> transform.</p><h4 id="method-get-default-vec4-name-string-vec4" tabindex="-1">method <code>get_default_vec4(name: string): Vec4</code> <a class="header-anchor" href="#method-get-default-vec4-name-string-vec4" aria-label="Permalink to &quot;method `get_default_vec4(name: string): Vec4`&quot;">​</a></h4><p>Returns the value of the <code>Vec4</code> property with the given <code>name</code>. For example, <code>get_vec4(&quot;quat&quot;)</code> can be used to get the <code>quat</code> property of a <code>Quat</code> (quaternion) rotation transform.</p><h4 id="method-set-default-float-name-string-value-number" tabindex="-1">method <code>set_default_float(name: string, value: number)</code> <a class="header-anchor" href="#method-set-default-float-name-string-value-number" aria-label="Permalink to &quot;method `set_default_float(name: string, value: number)`&quot;">​</a></h4><p>Sets the value of the <code>float</code> property with the given <code>name</code>. See <code>get_float</code> for examples.</p><h4 id="method-set-default-vec3-name-string-value-vec3" tabindex="-1">method <code>set_default_vec3(name: string, value: Vec3)</code> <a class="header-anchor" href="#method-set-default-vec3-name-string-value-vec3" aria-label="Permalink to &quot;method `set_default_vec3(name: string, value: Vec3)`&quot;">​</a></h4><p>Sets the value of the <code>Vec3</code> property with the given <code>name</code>. See <code>get_vec3</code> for examples.</p><h4 id="method-set-default-vec4-name-string-value-vec4" tabindex="-1">method <code>set_default_vec4(name: string, value: Vec4)</code> <a class="header-anchor" href="#method-set-default-vec4-name-string-value-vec4" aria-label="Permalink to &quot;method `set_default_vec4(name: string, value: Vec4)`&quot;">​</a></h4><p>Sets the value of the <code>Vec4</code> property with the given <code>name</code>. See <code>get_vec4</code> for examples.</p><h4 id="method-is-valid-boolean" tabindex="-1">method <code>is_valid(): boolean</code> <a class="header-anchor" href="#method-is-valid-boolean" aria-label="Permalink to &quot;method `is_valid(): boolean`&quot;">​</a></h4><p>Returns true if the transform is valid based on its properties. For example a uniform scale transform is valid only if all scale properties are equal.</p><h4 id="method-is-locked-boolean" tabindex="-1">method <code>is_locked(): boolean</code> <a class="header-anchor" href="#method-is-locked-boolean" aria-label="Permalink to &quot;method `is_locked(): boolean`&quot;">​</a></h4><p>Returns true if the transform is read-only.</p><h4 id="method-is-in-sequence-boolean" tabindex="-1">method <code>is_in_sequence(): boolean</code> <a class="header-anchor" href="#method-is-in-sequence-boolean" aria-label="Permalink to &quot;method `is_in_sequence(): boolean`&quot;">​</a></h4><p>Returns true if the transform is part of a sequence.</p><h4 id="method-lock" tabindex="-1">method <code>lock()</code> <a class="header-anchor" href="#method-lock" aria-label="Permalink to &quot;method `lock()`&quot;">​</a></h4><p>Makes the transform read-only.</p><h4 id="method-unlock" tabindex="-1">method <code>unlock()</code> <a class="header-anchor" href="#method-unlock" aria-label="Permalink to &quot;method `unlock()`&quot;">​</a></h4><p>Makes the transform writable.</p><h4 id="method-has-synergies-boolean" tabindex="-1">method <code>has_synergies(): boolean</code> <a class="header-anchor" href="#method-has-synergies-boolean" aria-label="Permalink to &quot;method `has_synergies(): boolean`&quot;">​</a></h4><p>Returns true if the transform has synergies. For example a <code>Scale</code> transform with enabled synergies will have its <code>x</code>, <code>y</code>, and <code>z</code> properties locked together. When one of the properties is changed, the other two will be updated to match the changed one.</p><h4 id="method-enable-synergies" tabindex="-1">method <code>enable_synergies()</code> <a class="header-anchor" href="#method-enable-synergies" aria-label="Permalink to &quot;method `enable_synergies()`&quot;">​</a></h4><p>Enables synergies for the transform. See <code>has_synergies</code> for more information.</p><h4 id="method-disable-synergies" tabindex="-1">method <code>disable_synergies()</code> <a class="header-anchor" href="#method-disable-synergies" aria-label="Permalink to &quot;method `disable_synergies()`&quot;">​</a></h4><p>Disables synergies for the transform. See <code>has_synergies</code> for more information.</p><h3 id="sequence" tabindex="-1"><code>Sequence</code> <a class="header-anchor" href="#sequence" aria-label="Permalink to &quot;`Sequence`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new" tabindex="-1">constructor <code>new()</code> <a class="header-anchor" href="#constructor-new" aria-label="Permalink to &quot;constructor `new()`&quot;">​</a></h4><h4 id="method-get-mat4-index-number-mat4-1" tabindex="-1">method <code>get_mat4(index: number): Mat4</code> <a class="header-anchor" href="#method-get-mat4-index-number-mat4-1" aria-label="Permalink to &quot;method `get_mat4(index: number): Mat4`&quot;">​</a></h4><p>Returns the transform matrix at the given <code>index</code>.</p><h4 id="method-push-transform-transform" tabindex="-1">method <code>push(transform: Transform)</code> <a class="header-anchor" href="#method-push-transform-transform" aria-label="Permalink to &quot;method `push(transform: Transform)`&quot;">​</a></h4><p>Pushes the given <code>transform</code> to the back of the sequence.</p><h4 id="method-push-transform-transform-index-number" tabindex="-1">method <code>push(transform: Transform, index: number)</code> <a class="header-anchor" href="#method-push-transform-transform-index-number" aria-label="Permalink to &quot;method `push(transform: Transform, index: number)`&quot;">​</a></h4><p>Inserts the given <code>transform</code> at the given <code>index</code> in the sequence.</p><h3 id="model" tabindex="-1"><code>Model</code> <a class="header-anchor" href="#model" aria-label="Permalink to &quot;`Model`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-1" tabindex="-1">constructor <code>new()</code> <a class="header-anchor" href="#constructor-new-1" aria-label="Permalink to &quot;constructor `new()`&quot;">​</a></h4><h4 id="method-set-model-alias-string" tabindex="-1">method <code>set_model(alias: string)</code> <a class="header-anchor" href="#method-set-model-alias-string" aria-label="Permalink to &quot;method `set_model(alias: string)`&quot;">​</a></h4><p>Sets new model by its <code>alias</code>.</p><h4 id="method-set-visible-value-boolean" tabindex="-1">method <code>set_visible(value: boolean)</code> <a class="header-anchor" href="#method-set-visible-value-boolean" aria-label="Permalink to &quot;method `set_visible(value: boolean)`&quot;">​</a></h4><p>Sets the visibility of the model.</p><h4 id="method-show-axes-value-boolean" tabindex="-1">method <code>show_axes(value: boolean)</code> <a class="header-anchor" href="#method-show-axes-value-boolean" aria-label="Permalink to &quot;method `show_axes(value: boolean)`&quot;">​</a></h4><p>Sets the visibility of the model&#39;s axes.</p><h4 id="method-set-opaque-value-boolean" tabindex="-1">method <code>set_opaque(value: boolean)</code> <a class="header-anchor" href="#method-set-opaque-value-boolean" aria-label="Permalink to &quot;method `set_opaque(value: boolean)`&quot;">​</a></h4><p>Sets the model to be opaque or transparent.</p><h4 id="method-set-opacity-value-number" tabindex="-1">method <code>set_opacity(value: number)</code> <a class="header-anchor" href="#method-set-opacity-value-number" aria-label="Permalink to &quot;method `set_opacity(value: number)`&quot;">​</a></h4><p>Sets the opacity of the model in the range [0, 1].</p><h4 id="method-set-tint-color-vec3" tabindex="-1">method <code>set_tint(color: Vec3)</code> <a class="header-anchor" href="#method-set-tint-color-vec3" aria-label="Permalink to &quot;method `set_tint(color: Vec3)`&quot;">​</a></h4><p>Sets the tint color of the model in the RGB format in the range [0, 1].</p><h4 id="method-set-tint-strength-value-number" tabindex="-1">method <code>set_tint_strength(value: number)</code> <a class="header-anchor" href="#method-set-tint-strength-value-number" aria-label="Permalink to &quot;method `set_tint_strength(value: number)`&quot;">​</a></h4><p>Sets the strength of the tint color in the range [0, 1].</p><h3 id="cycle" tabindex="-1"><code>Cycle</code> <a class="header-anchor" href="#cycle" aria-label="Permalink to &quot;`Cycle`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-cycle" tabindex="-1">constructor <code>new(): Cycle</code> <a class="header-anchor" href="#constructor-new-cycle" aria-label="Permalink to &quot;constructor `new(): Cycle`&quot;">​</a></h4><h4 id="method-set-from-value-float" tabindex="-1">method <code>set_from(value: float)</code> <a class="header-anchor" href="#method-set-from-value-float" aria-label="Permalink to &quot;method `set_from(value: float)`&quot;">​</a></h4><h4 id="method-set-to-value-float" tabindex="-1">method <code>set_to(value: float)</code> <a class="header-anchor" href="#method-set-to-value-float" aria-label="Permalink to &quot;method `set_to(value: float)`&quot;">​</a></h4><h4 id="method-set-manual-step-value-float" tabindex="-1">method <code>set_manual_step(value: float)</code> <a class="header-anchor" href="#method-set-manual-step-value-float" aria-label="Permalink to &quot;method `set_manual_step(value: float)`&quot;">​</a></h4><h4 id="method-set-step-value-float" tabindex="-1">method <code>set_step(value: float)</code> <a class="header-anchor" href="#method-set-step-value-float" aria-label="Permalink to &quot;method `set_step(value: float)`&quot;">​</a></h4><h4 id="method-set-step-duration-value-float" tabindex="-1">method <code>set_step_duration(value: float)</code> <a class="header-anchor" href="#method-set-step-duration-value-float" aria-label="Permalink to &quot;method `set_step_duration(value: float)`&quot;">​</a></h4><h4 id="method-set-smooth-value-boolean" tabindex="-1">method <code>set_smooth(value: boolean)</code> <a class="header-anchor" href="#method-set-smooth-value-boolean" aria-label="Permalink to &quot;method `set_smooth(value: boolean)`&quot;">​</a></h4><h4 id="method-set-mode-value-number" tabindex="-1">method <code>set_mode(value: number)</code> <a class="header-anchor" href="#method-set-mode-value-number" aria-label="Permalink to &quot;method `set_mode(value: number)`&quot;">​</a></h4><h4 id="method-play" tabindex="-1">method <code>play()</code> <a class="header-anchor" href="#method-play" aria-label="Permalink to &quot;method `play()`&quot;">​</a></h4><h3 id="camera" tabindex="-1"><code>Camera</code> <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;`Camera`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-camera" tabindex="-1">constructor <code>new(): Camera</code> <a class="header-anchor" href="#constructor-new-camera" aria-label="Permalink to &quot;constructor `new(): Camera`&quot;">​</a></h4><h4 id="method-get-projection-sequence" tabindex="-1">method <code>get_projection(): Sequence</code> <a class="header-anchor" href="#method-get-projection-sequence" aria-label="Permalink to &quot;method `get_projection(): Sequence`&quot;">​</a></h4><p>Returns the projection sequence of the camera.</p><h4 id="method-get-view-sequence" tabindex="-1">method <code>get_view(): Sequence</code> <a class="header-anchor" href="#method-get-view-sequence" aria-label="Permalink to &quot;method `get_view(): Sequence`&quot;">​</a></h4><p>Returns the view sequence of the camera.</p><h3 id="screen" tabindex="-1"><code>Screen</code> <a class="header-anchor" href="#screen" aria-label="Permalink to &quot;`Screen`&quot;">​</a></h3><p>Inherits all <code>Node</code> methods.</p><h4 id="constructor-new-screen" tabindex="-1">constructor <code>new(): Screen</code> <a class="header-anchor" href="#constructor-new-screen" aria-label="Permalink to &quot;constructor `new(): Screen`&quot;">​</a></h4><h4 id="method-set-acpect-value-vec2" tabindex="-1">method <code>set_acpect(value: Vec2)</code> <a class="header-anchor" href="#method-set-acpect-value-vec2" aria-label="Permalink to &quot;method `set_acpect(value: Vec2)`&quot;">​</a></h4><p>Sets the aspect.</p><h3 id="scriptingnode" tabindex="-1"><code>ScriptingNode</code> <a class="header-anchor" href="#scriptingnode" aria-label="Permalink to &quot;`ScriptingNode`&quot;">​</a></h3><h4 id="constructor-new-2" tabindex="-1">constructor <code>new()</code> <a class="header-anchor" href="#constructor-new-2" aria-label="Permalink to &quot;constructor `new()`&quot;">​</a></h4><p>Creates a new scripting node.</p><h4 id="method-get-script-string" tabindex="-1">method <code>get_script(): string</code> <a class="header-anchor" href="#method-get-script-string" aria-label="Permalink to &quot;method `get_script(): string`&quot;">​</a></h4><p>Returns the Lua script of the node.</p><h4 id="method-set-script-script-string-scriptingnode" tabindex="-1">method <code>set_script(script: string): ScriptingNode</code> <a class="header-anchor" href="#method-set-script-script-string-scriptingnode" aria-label="Permalink to &quot;method `set_script(script: string): ScriptingNode`&quot;">​</a></h4><p>Sets the Lua script of the node. Note that on success the new node will be returned!</p><h3 id="enum-valuetype" tabindex="-1">enum <code>ValueType</code> <a class="header-anchor" href="#enum-valuetype" aria-label="Permalink to &quot;enum `ValueType`&quot;">​</a></h3><h4 id="valuetype-float" tabindex="-1"><code>ValueType.Float</code> <a class="header-anchor" href="#valuetype-float" aria-label="Permalink to &quot;`ValueType.Float`&quot;">​</a></h4><h4 id="valuetype-vec3" tabindex="-1"><code>ValueType.Vec3</code> <a class="header-anchor" href="#valuetype-vec3" aria-label="Permalink to &quot;`ValueType.Vec3`&quot;">​</a></h4><h4 id="valuetype-vec4" tabindex="-1"><code>ValueType.Vec4</code> <a class="header-anchor" href="#valuetype-vec4" aria-label="Permalink to &quot;`ValueType.Vec4`&quot;">​</a></h4><h4 id="valuetype-matrix" tabindex="-1"><code>ValueType.Matrix</code> <a class="header-anchor" href="#valuetype-matrix" aria-label="Permalink to &quot;`ValueType.Matrix`&quot;">​</a></h4><h4 id="valuetype-quat" tabindex="-1"><code>ValueType.Quat</code> <a class="header-anchor" href="#valuetype-quat" aria-label="Permalink to &quot;`ValueType.Quat`&quot;">​</a></h4><h3 id="operation" tabindex="-1"><code>Operation</code> <a class="header-anchor" href="#operation" aria-label="Permalink to &quot;`Operation`&quot;">​</a></h3><h3 id="constructor-new-inputs-table-string-valuetype-outputs-table-string-valuetype" tabindex="-1">constructor <code>new(inputs: table[string, ValueType], outputs: table[string, ValueType])</code> <a class="header-anchor" href="#constructor-new-inputs-table-string-valuetype-outputs-table-string-valuetype" aria-label="Permalink to &quot;constructor `new(inputs: table[string, ValueType], outputs: table[string, ValueType])`&quot;">​</a></h3><p>Creates a new operation from the given <code>inputs</code> and <code>outputs</code>. The <code>inputs</code> and <code>outputs</code> tables should have the form <code>{ name = ValueType }</code>. If label name contains spaces, pass it like this: <code>{ [&quot;label name&quot;] = ValueType }</code>.</p><h4 id="attribute-inputtypes-valuetype" tabindex="-1">attribute <code>inputTypes: ValueType[]</code> <a class="header-anchor" href="#attribute-inputtypes-valuetype" aria-label="Permalink to &quot;attribute `inputTypes: ValueType[]`&quot;">​</a></h4><p>Types of the operation&#39;s inputs.</p><h4 id="attribute-outputtypes-valuetype" tabindex="-1">attribute <code>outputTypes: ValueType[]</code> <a class="header-anchor" href="#attribute-outputtypes-valuetype" aria-label="Permalink to &quot;attribute `outputTypes: ValueType[]`&quot;">​</a></h4><p>Types of the operation&#39;s outputs.</p><h4 id="attribute-defaultinputnames-string" tabindex="-1">attribute <code>defaultInputNames: string[]</code> <a class="header-anchor" href="#attribute-defaultinputnames-string" aria-label="Permalink to &quot;attribute `defaultInputNames: string[]`&quot;">​</a></h4><p>Names of the operation&#39;s inputs, must be the same length as <code>inputTypes</code>.</p><h4 id="attribute-defaultoutputnames-string" tabindex="-1">attribute <code>defaultOutputNames: string[]</code> <a class="header-anchor" href="#attribute-defaultoutputnames-string" aria-label="Permalink to &quot;attribute `defaultOutputNames: string[]`&quot;">​</a></h4><p>Names of the operation&#39;s outputs, must be the same length as <code>outputTypes</code>.</p><h3 id="scripting-node-api-functions" tabindex="-1">Scripting Node API functions <a class="header-anchor" href="#scripting-node-api-functions" aria-label="Permalink to &quot;Scripting Node API functions&quot;">​</a></h3><p>Scripting Node is a special node that can be modified using Lua scripts. You can specify node properties by creating a new <code>Operation</code> and attaching it to the node. The API provides a set of functions - <code>on_init</code> and <code>on_update_values</code> - that can be used in the script to interact with the node, you can also access the node&#39;s properties by using the <code>self.node</code> object. To save custom properties, you can use the <code>self</code> table, for example <code>self.my_property = 1</code>.</p><p>Example of a simple script:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">operation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Operation.</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">	{ x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ValueType.</span><span style="color:#B392F0;">Float</span><span style="color:#E1E4E8;">, y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ValueType.</span><span style="color:#B392F0;">Float</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">	{ result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ValueType.</span><span style="color:#B392F0;">Vec3</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">on_init</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Node initialized!&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">end</span></span>\n<span class="line"><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">on_update_values</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> operator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">as_operator</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">is_input_plugged</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">is_input_plugged</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">then</span></span>\n<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">get_input_float</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">get_input_float</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">set_value</span><span style="color:#E1E4E8;">(Vec3.</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(x, y, x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y))</span></span>\n<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">end</span></span>\n<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">operation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Operation.</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">	{ x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ValueType.</span><span style="color:#6F42C1;">Float</span><span style="color:#24292E;">, y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ValueType.</span><span style="color:#6F42C1;">Float</span><span style="color:#24292E;"> },</span></span>\n<span class="line"><span style="color:#24292E;">	{ result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ValueType.</span><span style="color:#6F42C1;">Vec3</span><span style="color:#24292E;"> }</span></span>\n<span class="line"><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">on_init</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Node initialized!&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">end</span></span>\n<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">on_update_values</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> operator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">as_operator</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">is_input_plugged</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">is_input_plugged</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">then</span></span>\n<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">get_input_float</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">get_input_float</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">set_value</span><span style="color:#24292E;">(Vec3.</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(x, y, x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y))</span></span>\n<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">end</span></span>\n<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div><h4 id="attribute-self-operation-operation" tabindex="-1">attribute <code>self.operation: Operation</code> <a class="header-anchor" href="#attribute-self-operation-operation" aria-label="Permalink to &quot;attribute `self.operation: Operation`&quot;">​</a></h4><p>The operation which is used to create the node.</p><h4 id="attribute-self-node-operator" tabindex="-1">attribute <code>self.node: Operator</code> <a class="header-anchor" href="#attribute-self-node-operator" aria-label="Permalink to &quot;attribute `self.node: Operator`&quot;">​</a></h4><p>The node that the script is attached to.</p><h4 id="function-self-on-init" tabindex="-1">function <code>self.on_init()</code> <a class="header-anchor" href="#function-self-on-init" aria-label="Permalink to &quot;function `self.on_init()`&quot;">​</a></h4><p>Called when the node is created. Function is protected, errors will be caught and printed to the console.</p><h4 id="function-self-on-update-values" tabindex="-1">function <code>self.on_update_values()</code> <a class="header-anchor" href="#function-self-on-update-values" aria-label="Permalink to &quot;function `self.on_update_values()`&quot;">​</a></h4><p>Called when the node&#39;s values are updated. Function is protected, errors will be caught and printed to the console.</p><h3 id="workspace-api-functions" tabindex="-1">Workspace API functions <a class="header-anchor" href="#workspace-api-functions" aria-label="Permalink to &quot;Workspace API functions&quot;">​</a></h3><h4 id="function-i3t-print-operator-types" tabindex="-1">function <code>I3T.print_operator_types()</code> <a class="header-anchor" href="#function-i3t-print-operator-types" aria-label="Permalink to &quot;function `I3T.print_operator_types()`&quot;">​</a></h4><p>Prints all available operator types to the console.</p><h4 id="function-i3t-print-transform-types" tabindex="-1">function <code>I3T.print_transform_types()</code> <a class="header-anchor" href="#function-i3t-print-transform-types" aria-label="Permalink to &quot;function `I3T.print_transform_types()`&quot;">​</a></h4><p>Prints all available transform types to the console.</p><h4 id="function-i3t-print-workspace" tabindex="-1">function <code>I3T.print_workspace()</code> <a class="header-anchor" href="#function-i3t-print-workspace" aria-label="Permalink to &quot;function `I3T.print_workspace()`&quot;">​</a></h4><p>Prints the workspace nodes to the console in the form of signatures.</p><h4 id="function-i3t-get-node-id-number-node" tabindex="-1">function <code>I3T.get_node(id: number): Node</code> <a class="header-anchor" href="#function-i3t-get-node-id-number-node" aria-label="Permalink to &quot;function `I3T.get_node(id: number): Node`&quot;">​</a></h4><p>Returns nil if the node with the given <code>id</code> does not exist.</p><h4 id="function-i3t-find-node-startidx-number-endidx-number-pred-node-nil" tabindex="-1">function <code>I3T.find_node(startIdx: number, endIdx: number, pred): Node | nil</code> <a class="header-anchor" href="#function-i3t-find-node-startidx-number-endidx-number-pred-node-nil" aria-label="Permalink to &quot;function `I3T.find_node(startIdx: number, endIdx: number, pred): Node | nil`&quot;">​</a></h4><p>Finds a node in the workspace, see <code>I3T.find_node_in</code> for more information.</p><h4 id="function-i3t-find-node-in-nodes-node-startidx-number-endidx-number-pred-node-nil" tabindex="-1">function <code>I3T.find_node_in(nodes: Node[], startIdx: number, endIdx: number, pred): Node | nil</code> <a class="header-anchor" href="#function-i3t-find-node-in-nodes-node-startidx-number-endidx-number-pred-node-nil" aria-label="Permalink to &quot;function `I3T.find_node_in(nodes: Node[], startIdx: number, endIdx: number, pred): Node | nil`&quot;">​</a></h4><p>Finds a node in the given <code>nodes</code> array starting from the <code>startIdx</code> index up to the <code>endIdx</code> index, where <code>pred</code> is a function that takes a <code>Node</code> and returns a boolean (<code>function[bool(Node)]</code>).</p><h4 id="function-i3t-delete-node-node-node" tabindex="-1">function <code>I3T.delete_node(node: Node)</code> <a class="header-anchor" href="#function-i3t-delete-node-node-node" aria-label="Permalink to &quot;function `I3T.delete_node(node: Node)`&quot;">​</a></h4><p>Deletes the given <code>node</code> from the workspace.</p><h4 id="function-i3t-to-script-string" tabindex="-1">function <code>I3T.to_script(): string</code> <a class="header-anchor" href="#function-i3t-to-script-string" aria-label="Permalink to &quot;function `I3T.to_script(): string`&quot;">​</a></h4><p>Returns the Lua script representation of the workspace.</p><h4 id="function-i3t-get-all-nodes-node" tabindex="-1">function <code>I3T.get_all_nodes(): Node[]</code> <a class="header-anchor" href="#function-i3t-get-all-nodes-node" aria-label="Permalink to &quot;function `I3T.get_all_nodes(): Node[]`&quot;">​</a></h4><p>Returns all nodes in the workspace.</p><h4 id="function-i3t-get-node-id-number-node-1" tabindex="-1">function <code>I3T.get_node(id: number): Node</code> <a class="header-anchor" href="#function-i3t-get-node-id-number-node-1" aria-label="Permalink to &quot;function `I3T.get_node(id: number): Node`&quot;">​</a></h4><p>Returns the node with the given <code>id</code>.</p><h4 id="function-i3t-delete-node-node-node-1" tabindex="-1">function <code>I3T.delete_node(node: Node)</code> <a class="header-anchor" href="#function-i3t-delete-node-node-node-1" aria-label="Permalink to &quot;function `I3T.delete_node(node: Node)`&quot;">​</a></h4><p>Deletes the given <code>node</code> from the workspace.</p><h4 id="function-i3t-plug-from-number-from-index-number-to-number-to-index-number" tabindex="-1">function <code>I3T.plug(from: number, from_index: number, to: number, to_index: number)</code> <a class="header-anchor" href="#function-i3t-plug-from-number-from-index-number-to-number-to-index-number" aria-label="Permalink to &quot;function `I3T.plug(from: number, from_index: number, to: number, to_index: number)`&quot;">​</a></h4><p>Plugs the output of the node with the given <code>from</code> id at the given <code>from_index</code> to the input of the node with the given <code>to</code> id at the given <code>to_index</code>. <strong>Uses 0-based indexing.</strong></p><h4 id="function-i3t-unplug-input-node-number-index-number" tabindex="-1">function <code>I3T.unplug_input(node: number, index: number)</code> <a class="header-anchor" href="#function-i3t-unplug-input-node-number-index-number" aria-label="Permalink to &quot;function `I3T.unplug_input(node: number, index: number)`&quot;">​</a></h4><p>Unplugs the input of the node with the given <code>node</code> id at the given <code>index</code>.</p><h4 id="function-i3t-unplug-output-node-number-index-number" tabindex="-1">function <code>I3T.unplug_output(node: number, index: number)</code> <a class="header-anchor" href="#function-i3t-unplug-output-node-number-index-number" aria-label="Permalink to &quot;function `I3T.unplug_output(node: number, index: number)`&quot;">​</a></h4><p>Unplugs the output of the node with the given <code>node</code> id at the given <code>index</code>.</p><h4 id="function-i3t-workspace-clear" tabindex="-1">function <code>I3T.workspace.clear()</code> <a class="header-anchor" href="#function-i3t-workspace-clear" aria-label="Permalink to &quot;function `I3T.workspace.clear()`&quot;">​</a></h4><p>Deletes all nodes from the workspace.</p><h4 id="function-i3t-workspace-set-zoom-value-number" tabindex="-1">function <code>I3T.workspace.set_zoom(value: number)</code> <a class="header-anchor" href="#function-i3t-workspace-set-zoom-value-number" aria-label="Permalink to &quot;function `I3T.workspace.set_zoom(value: number)`&quot;">​</a></h4><p>Sets the zoom level of the workspace.</p><h4 id="function-i3t-workspace-set-work-area-min-vec2-max-vec2" tabindex="-1">function <code>I3T.workspace.set_work_area(min: Vec2, max: Vec2)</code> <a class="header-anchor" href="#function-i3t-workspace-set-work-area-min-vec2-max-vec2" aria-label="Permalink to &quot;function `I3T.workspace.set_work_area(min: Vec2, max: Vec2)`&quot;">​</a></h4><p>Sets the work area of the workspace, where <code>min</code> is the top-left corner and <code>max</code> is the bottom-right corner.</p>',221),r=[s];function l(d,c,i,h,p,u){return o(),a("div",null,r)}const f=e(n,[["render",l]]);export{b as __pageData,f as default};
