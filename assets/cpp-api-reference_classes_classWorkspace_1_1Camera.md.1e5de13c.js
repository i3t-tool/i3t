import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Workspace::Camera","description":"","frontmatter":{"title":"Workspace::Camera"},"headers":[],"relativePath":"cpp-api-reference/classes/classWorkspace_1_1Camera.md","filePath":"cpp-api-reference/classes/classWorkspace_1_1Camera.md"}'),r={name:"cpp-api-reference/classes/classWorkspace_1_1Camera.md"},o=a(`<h1 id="workspace-camera" tabindex="-1">Workspace::Camera <a class="header-anchor" href="#workspace-camera" aria-label="Permalink to &quot;Workspace::Camera&quot;">​</a></h1><p><code>#include &quot;GUI/Workspace/Nodes/Camera.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html">Workspace::CoreNodeWithPins</a>, <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">Workspace::CoreNode</a>, <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html">Workspace::Node</a>, <a href="/cpp-api-reference/classes/classIVisitable.html">IVisitable</a>, <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a>, <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a>, std::enable_shared_from_this&lt; DiwneObject &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-camera">Camera</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-~camera">~Camera</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-accept">accept</a></strong>(<a href="/cpp-api-reference/classes/classNodeVisitor.html">NodeVisitor</a> &amp; visitor) override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-drawmenulevelofdetail">drawMenuLevelOfDetail</a></strong>() override</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-getprojection">getProjection</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-getview">getView</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-iscamera">isCamera</a></strong>()</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-maxlengthofdata">maxLengthOfData</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-middlecontent">middleContent</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-popupcontent">popupContent</a></strong>() override&lt;br&gt;Content of popup menu raise on this object.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-processselect">processSelect</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-processunselect">processUnselect</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-topcontent">topContent</a></strong>() override</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#function-updatedataitemswidth">updateDataItemsWidth</a></strong>() override</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-axison">m_axisOn</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-fillfrustum">m_fillFrustum</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-frustumcolor">m_frustumColor</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-frustumoutlinecolor">m_frustumOutlineColor</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-showcamera">m_showCamera</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-showfrustum">m_showFrustum</a></strong></td></tr><tr><td>std::weak_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html">Vp::SceneCamera</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-viewportcamera">m_viewportCamera</a></strong></td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-projection">m_projection</a></strong></td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Camera.html#variable-m-view">m_view</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html">Workspace::CoreNodeWithPins</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-corenodewithpins">CoreNodeWithPins</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a> &gt; nodebase, bool showDataOnPins =true)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-finalize">finalize</a></strong>() override</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreInPin.html">CoreInPin</a> &gt; &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-getinputs">getInputs</a></strong>() const&lt;br&gt;get vector of input pins</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreOutPin.html">CoreOutPin</a> &gt; &gt; const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-getoutputs">getOutputs</a></strong>() const&lt;br&gt;get vector of output pins</td></tr><tr><td>virtual std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreOutPin.html">CoreOutPin</a> &gt; &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-getoutputstoshow">getOutputsToShow</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-leftcontent">leftContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#function-rightcontent">rightContent</a></strong>() override</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html">Workspace::CoreNodeWithPins</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#variable-m-showdataonpins">m_showDataOnPins</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreInPin.html">CoreInPin</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#variable-m-workspaceinputs">m_workspaceInputs</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreOutPin.html">CoreOutPin</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNodeWithPins.html#variable-m-workspaceoutputs">m_workspaceOutputs</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">Workspace::CoreNode</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-corenode">CoreNode</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a> &gt; nodebase)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-~corenode">~CoreNode</a></strong>() override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawdatalabel">drawDataLabel</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawmenuduplicate">drawMenuDuplicate</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawmenuseteditable">drawMenuSetEditable</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawmenusetprecision">drawMenuSetPrecision</a></strong>()</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getdataitemswidth">getDataItemsWidth</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-floatpopupmode">FloatPopupMode</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getfloatpopupmode">getFloatPopupMode</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getislabelbeingedited">getIsLabelBeingEdited</a></strong>()</td></tr><tr><td>const std::string &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getkeyword">getKeyword</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-levelofdetail">LevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getlevelofdetail">getLevelOfDetail</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a> &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getnodebase">getNodebase</a></strong>() const</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-getnumberofvisibledecimal">getNumberOfVisibleDecimal</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-processdrag">processDrag</a></strong>() override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-setfloatpopupmode">setFloatPopupMode</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-floatpopupmode">FloatPopupMode</a> mode)</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-levelofdetail">LevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-setlevelofdetail">setLevelOfDetail</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-levelofdetail">LevelOfDetail</a> levelOfDetail)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-setnumberofvisibledecimal">setNumberOfVisibleDecimal</a></strong>(int value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawmenulevelofdetail-builder">drawMenuLevelOfDetail_builder</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; node, std::vector&lt; <a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-levelofdetail">LevelOfDetail</a> &gt; const &amp; levels_of_detail)</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">Workspace::CoreNode</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-dataitemswidth">m_dataItemsWidth</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-floatpopupmode">FloatPopupMode</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-floatpopupmode">m_floatPopupMode</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-headerminwidth">m_headerMinWidth</a></strong> &lt;br&gt;Can be used to specify the minimum header width of the node.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-isfirstdraw">m_isFirstDraw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-islabelbeingedited">m_isLabelBeingEdited</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-levelofdetail">LevelOfDetail</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-levelofdetail">m_levelOfDetail</a></strong></td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a> &gt; const</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-nodebase">m_nodebase</a></strong> &lt;br&gt;reference to <a href="./.html">Core</a></td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#variable-m-numberofvisibledecimal">m_numberOfVisibleDecimal</a></strong> &lt;br&gt;number of decimal places used while display floats in the workspace</td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html">Workspace::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-node">Node</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> id, std::string const topLabel =&quot;Header&quot;, std::string const middleLabel =&quot;Content&quot;)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-~node">~Node</a></strong>()&lt;br&gt;Default destructor.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-beforecontent">beforeContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-bottomcontent">bottomContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-bypassfocusforinteractionaction">bypassFocusForInteractionAction</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-deleteaction">deleteAction</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-drawmenudelete">drawMenuDelete</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-getduplicatenode">getDuplicateNode</a></strong>() const</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-getmiddlelabel">getMiddleLabel</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-getremovefromworkspace">getRemoveFromWorkspace</a></strong>() const</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-gettoplabel">getTopLabel</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-leftcontent">leftContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-rightcontent">rightContent</a></strong>() override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-setduplicatenode">setDuplicateNode</a></strong>(bool value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-setmiddlelabel">setMiddleLabel</a></strong>(std::string label)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-setremovefromworkspace">setRemoveFromWorkspace</a></strong>(bool value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-settoplabel">setTopLabel</a></strong>(std::string label)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html">Workspace::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#variable-m-duplicatenode">m_duplicateNode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#variable-m-removefromworkspacewindow">m_removeFromWorkspaceWindow</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html">Workspace::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#variable-m-middlelabel">m_middleLabel</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#variable-m-toplabel">m_topLabel</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-node">Node</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> id, std::string const labelDiwne =&quot;DiwneNode&quot;)&lt;br&gt;Default constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-~node">~Node</a></strong>()&lt;br&gt;Default destructor.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-afterenddiwne">afterEndDiwne</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-allowdrawing">allowDrawing</a></strong>() override&lt;br&gt;Decision maker whether object should be drawn (not outside of window for example)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-begin">begin</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-bottomcontent">bottomContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-bottomcontentdiwne">bottomContentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-content">content</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-deleteaction">deleteAction</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-deleteactiondiwne">deleteActionDiwne</a></strong>()</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-drawnodediwne">drawNodeDiwne</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmodenodeposition">DrawModeNodePosition</a> nodePosMode =<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enumvalue-onitsposition">DrawModeNodePosition::OnItsPosition</a>, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a> drawMode =<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enumvalue-interacting">DrawMode::Interacting</a>)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-end">end</a></strong>() override</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getdragactiontype">getDragActionType</a></strong>() const</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getholdactiontype">getHoldActionType</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getid">getId</a></strong>() const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getnodepositiondiwne">getNodePositionDiwne</a></strong>() const</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getnoderectdiwne">getNodeRectDiwne</a></strong>() const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getnoderectsizediwne">getNodeRectSizeDiwne</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getrectdiwne">getRectDiwne</a></strong>() const override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-getrender">getRender</a></strong>() const</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-gettouchactiontype">getTouchActionType</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-leftcontent">leftContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-leftcontentdiwne">leftContentDiwne</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-middlecontentdiwne">middleContentDiwne</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">Node</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-operator=">operator=</a></strong>(const <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">Node</a> &amp; other)&lt;br&gt;Assignment operator.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-processdrag">processDrag</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-rightcontent">rightContent</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-rightcontentdiwne">rightContentDiwne</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-setnodepositiondiwne">setNodePositionDiwne</a></strong>(ImVec2 const &amp; position)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-setrender">setRender</a></strong>(bool render)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-setselected">setSelected</a></strong>(const bool selected) override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-topcontentdiwne">topContentDiwne</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-translatenodepositiondiwne">translateNodePositionDiwne</a></strong>(ImVec2 const amount)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#function-updatesizes">updateSizes</a></strong>() override</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-drawanyway">m_drawAnyway</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-bottomrectdiwne">m_bottomRectDiwne</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-centerdummyspace">m_centerDummySpace</a></strong> &lt;br&gt;indent value to center the middle part</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-leftrectdiwne">m_leftRectDiwne</a></strong></td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-middlerectdiwne">m_middleRectDiwne</a></strong></td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-nodepositiondiwne">m_nodePositionDiwne</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmodenodeposition">DrawModeNodePosition</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-nodeposmode">m_nodePosMode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-render">m_render</a></strong> &lt;br&gt;used to hide nodes in tutorial scenes (action &quot;toggleNodeWorkspaceVisibility&quot;)</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-rightrectdiwne">m_rightRectDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-todelete">m_toDelete</a></strong> &lt;br&gt;Set to true after node delete action.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html#variable-m-toprectdiwne">m_topRectDiwne</a></strong> &lt;br&gt;Rectangle of parts of node in diwne, are computed every frame based on node content and m_nodePositionDiwne.</td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-diwneobject">DiwneObject</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> id, std::string const labelDiwne)&lt;br&gt;Constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-~diwneobject">~DiwneObject</a></strong>() =default</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-aftercontent">afterContent</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-aftercontentdiwne">afterContentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-afterend">afterEnd</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-afterenddiwne">afterEndDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowdrawing">allowDrawing</a></strong>()&lt;br&gt;Decision maker whether object should be drawn (not outside of window for example)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowinteraction">allowInteraction</a></strong>()&lt;br&gt;Decision maker whether object can interact (not include content elements)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessdrag">allowProcessDrag</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessfocused">allowProcessFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessfocusedforinteraction">allowProcessFocusedForInteraction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocesshold">allowProcessHold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessraisepopup">allowProcessRaisePopup</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessselect">allowProcessSelect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessunhold">allowProcessUnhold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessunselect">allowProcessUnselect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforebegin">beforeBegin</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforecontent">beforeContent</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforecontentdiwne">beforeContentDiwne</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-begin">begin</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassdragaction">bypassDragAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassfocusaction">bypassFocusAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassfocusforinteractionaction">bypassFocusForInteractionAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassholdaction">bypassHoldAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassraisepopupaction">bypassRaisePopupAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassselectaction">bypassSelectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypasstouchaction">bypassTouchAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassunholdaction">bypassUnholdAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassunselectaction">bypassUnselectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-content">content</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-contentdiwne">contentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-drawdiwne">drawDiwne</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a> drawMode =<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enumvalue-interacting">DrawMode::Interacting</a>)&lt;br&gt;Main function for drawing object and deal with interactions.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-end">end</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-finalize">finalize</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-finalizediwne">finalizeDiwne</a></strong>()</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getdragactiontype">getDragActionType</a></strong>() const =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getholdactiontype">getHoldActionType</a></strong>() const =0</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getiddiwne">getIdDiwne</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getrectdiwne">getRectDiwne</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getselectable">getSelectable</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getselected">getSelected</a></strong>() const&lt;br&gt;Getter of selection state.</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-gettouchactiontype">getTouchActionType</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-initialize">initialize</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-initializediwne">initializeDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-interactionbegininlastdraw">interactionBeginInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-interactionendinlastdraw">interactionEndInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processdrag">processDrag</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processdragdiwne">processDragDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocused">processFocused</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocuseddiwne">processFocusedDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocusedforinteraction">processFocusedForInteraction</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocusedforinteractiondiwne">processFocusedForInteractionDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processhold">processHold</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processholddiwne">processHoldDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractions">processInteractions</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractionsalways">processInteractionsAlways</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractionsdiwne">processInteractionsDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processraisepopupdiwne">processRaisePopupDiwne</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processselectdiwne">processSelectDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processshowpopupdiwne">processShowPopupDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunhold">processUnhold</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunholddiwne">processUnholdDiwne</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunselectdiwne">processUnselectDiwne</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-setselectable">setSelectable</a></strong>(bool const selectable)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-setselected">setSelected</a></strong>(bool const selected)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-showtooltiplabel">showTooltipLabel</a></strong>(std::string const &amp; label, ImColor const &amp;&amp; color)&lt;br&gt;Show a colored text for example for immediate hints.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-updatesizes">updateSizes</a></strong>()</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-diwne">diwne</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-drawmode">m_drawMode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-focused">m_focused</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-focusedforinteraction">m_focusedForInteraction</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-iddiwne">m_idDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-inner-interaction-happen">m_inner_interaction_happen</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-inner-interaction-happen-previous-draw">m_inner_interaction_happen_previous_draw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isactive">m_isActive</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isdragged">m_isDragged</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isheld">m_isHeld</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-labeldiwne">m_labelDiwne</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-popupiddiwne">m_popupIDDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-selectable">m_selectable</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-selected">m_selected</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-camera" tabindex="-1">function Camera <a class="header-anchor" href="#function-camera" aria-label="Permalink to &quot;function Camera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Camera</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">DIWNE</span><span style="color:#E1E4E8;">::Diwne </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> diwne</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Camera</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">DIWNE</span><span style="color:#24292E;">::Diwne </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> diwne</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-camera-1" tabindex="-1">function ~Camera <a class="header-anchor" href="#function-camera-1" aria-label="Permalink to &quot;function ~Camera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#B392F0;">Camera</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">Camera</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-accept" tabindex="-1">function accept <a class="header-anchor" href="#function-accept" aria-label="Permalink to &quot;function accept&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NodeVisitor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">visitor</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NodeVisitor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">visitor</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classIVisitable.html#function-accept">IVisitable::accept</a></p><h3 id="function-drawmenulevelofdetail" tabindex="-1">function drawMenuLevelOfDetail <a class="header-anchor" href="#function-drawmenulevelofdetail" aria-label="Permalink to &quot;function drawMenuLevelOfDetail&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawMenuLevelOfDetail</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawMenuLevelOfDetail</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-drawmenulevelofdetail">Workspace::CoreNode::drawMenuLevelOfDetail</a></p><h3 id="function-getprojection" tabindex="-1">function getProjection <a class="header-anchor" href="#function-getprojection" aria-label="Permalink to &quot;function getProjection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Sequence </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProjection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Sequence </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProjection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-getview" tabindex="-1">function getView <a class="header-anchor" href="#function-getview" aria-label="Permalink to &quot;function getView&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Sequence </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getView</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Sequence </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getView</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-iscamera" tabindex="-1">function isCamera <a class="header-anchor" href="#function-iscamera" aria-label="Permalink to &quot;function isCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isCamera</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isCamera</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-maxlengthofdata" tabindex="-1">function maxLengthOfData <a class="header-anchor" href="#function-maxlengthofdata" aria-label="Permalink to &quot;function maxLengthOfData&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">maxLengthOfData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">maxLengthOfData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-maxlengthofdata">Workspace::CoreNode::maxLengthOfData</a></p><h3 id="function-middlecontent" tabindex="-1">function middleContent <a class="header-anchor" href="#function-middlecontent" aria-label="Permalink to &quot;function middleContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middleContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-middlecontent">Workspace::Node::middleContent</a></p><h3 id="function-popupcontent" tabindex="-1">function popupContent <a class="header-anchor" href="#function-popupcontent" aria-label="Permalink to &quot;function popupContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popupContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popupContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Content of popup menu raise on this object.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-popupcontent">Workspace::Node::popupContent</a></p><h3 id="function-processselect" tabindex="-1">function processSelect <a class="header-anchor" href="#function-processselect" aria-label="Permalink to &quot;function processSelect&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processSelect</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processSelect</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processselect">DIWNE::DiwneObject::processSelect</a></p><h3 id="function-processunselect" tabindex="-1">function processUnselect <a class="header-anchor" href="#function-processunselect" aria-label="Permalink to &quot;function processUnselect&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processUnselect</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processUnselect</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunselect">DIWNE::DiwneObject::processUnselect</a></p><h3 id="function-topcontent" tabindex="-1">function topContent <a class="header-anchor" href="#function-topcontent" aria-label="Permalink to &quot;function topContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">topContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">topContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1Node.html#function-topcontent">Workspace::Node::topContent</a></p><h3 id="function-updatedataitemswidth" tabindex="-1">function updateDataItemsWidth <a class="header-anchor" href="#function-updatedataitemswidth" aria-label="Permalink to &quot;function updateDataItemsWidth&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateDataItemsWidth</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateDataItemsWidth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html#function-updatedataitemswidth">Workspace::CoreNode::updateDataItemsWidth</a></p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-axison" tabindex="-1">variable m_axisOn <a class="header-anchor" href="#variable-m-axison" aria-label="Permalink to &quot;variable m_axisOn&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_axisOn {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_axisOn {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-fillfrustum" tabindex="-1">variable m_fillFrustum <a class="header-anchor" href="#variable-m-fillfrustum" aria-label="Permalink to &quot;variable m_fillFrustum&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_fillFrustum {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_fillFrustum {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-frustumcolor" tabindex="-1">variable m_frustumColor <a class="header-anchor" href="#variable-m-frustumcolor" aria-label="Permalink to &quot;variable m_frustumColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_frustumColor {</span><span style="color:#79B8FF;">0.35</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.27</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.06</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_frustumColor {</span><span style="color:#005CC5;">0.35</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.27</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.06</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-frustumoutlinecolor" tabindex="-1">variable m_frustumOutlineColor <a class="header-anchor" href="#variable-m-frustumoutlinecolor" aria-label="Permalink to &quot;variable m_frustumOutlineColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_frustumOutlineColor {</span><span style="color:#79B8FF;">1.</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_frustumOutlineColor {</span><span style="color:#005CC5;">1.</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-showcamera" tabindex="-1">variable m_showCamera <a class="header-anchor" href="#variable-m-showcamera" aria-label="Permalink to &quot;variable m_showCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_showCamera {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_showCamera {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-showfrustum" tabindex="-1">variable m_showFrustum <a class="header-anchor" href="#variable-m-showfrustum" aria-label="Permalink to &quot;variable m_showFrustum&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_showFrustum {</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_showFrustum {</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-viewportcamera" tabindex="-1">variable m_viewportCamera <a class="header-anchor" href="#variable-m-viewportcamera" aria-label="Permalink to &quot;variable m_viewportCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::weak_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vp</span><span style="color:#E1E4E8;">::SceneCamera </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_viewportCamera;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::weak_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vp</span><span style="color:#24292E;">::SceneCamera </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_viewportCamera;</span></span></code></pre></div><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-projection" tabindex="-1">variable m_projection <a class="header-anchor" href="#variable-m-projection" aria-label="Permalink to &quot;variable m_projection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Sequence </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_projection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Sequence </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_projection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-m-view" tabindex="-1">variable m_view <a class="header-anchor" href="#variable-m-view" aria-label="Permalink to &quot;variable m_view&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Sequence </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Sequence </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span></code></pre></div><hr><p>Updated on 2025-01-23 at 08:58:54 +0000</p>`,95),n=[o];function c(l,p,i,d,h,f){return t(),s("div",null,n)}const g=e(r,[["render",c]]);export{u as __pageData,g as default};
