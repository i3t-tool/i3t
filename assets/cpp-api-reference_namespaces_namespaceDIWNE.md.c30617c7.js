import{_ as t,o as s,c as n,Q as a}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"DIWNE","description":"","frontmatter":{"title":"DIWNE"},"headers":[],"relativePath":"cpp-api-reference/namespaces/namespaceDIWNE.md","filePath":"cpp-api-reference/namespaces/namespaceDIWNE.md"}'),e={name:"cpp-api-reference/namespaces/namespaceDIWNE.md"},o=a(`<h1 id="diwne" tabindex="-1">DIWNE <a class="header-anchor" href="#diwne" aria-label="Permalink to &quot;DIWNE&quot;">​</a></h1><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a></strong> &lt;br&gt;The node editor object In ancestor of this object you will probably store your nodes (links, pins) It store inter-object interactions Every <a href="./.html">DiwneObject</a> has reference to this object.</td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a></strong> &lt;br&gt;All objects in <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html">DIWNE</a> are inherited from <a href="./.html">DiwneObject</a><a href="./.html">DiwneObject</a> covers the functionality common to all Objects in the node editor - such as selecting, dragging, hovering,...</td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Link.html">DIWNE::Link</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a></strong> &lt;br&gt;graphical representation od a box in the workspace node editor</td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Pin.html">DIWNE::Pin</a></strong></td></tr><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structDIWNE_1_1SettingsDiwne.html">DIWNE::SettingsDiwne</a></strong> &lt;br&gt;Storage of all values.</td></tr></tbody></table><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>enum</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></strong> { None, FocusOnObject, InteractingContent, NewLink, HoldNode, HoldPin, HoldLink, HoldWorkarea, DragNode, DragPin, DragLink, DragWorkarea, TouchNode, TouchPin, TouchLink, TouchWorkarea, SelectionRectFull, SelectionRectTouch}</td></tr><tr><td>enum</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a></strong> { JustDraw, Interacting}&lt;br&gt;Drawing mode of <a href="./.html">DiwneObject</a></td></tr><tr><td>enum</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmodenodeposition">DrawModeNodePosition</a></strong> { OnCursorPosition, OnItsPosition}&lt;br&gt;Used when one node is inside of another -&gt; the inner node is drawn OnCursorPosition when outer node is drawn.</td></tr><tr><td>enum</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">IconType</a></strong> { NoIcon, Circle, Rectangle, TriangleLeft, TriangleRight, TriangleDownLeft, TriangleDownRight, GrabDownLeft, GrabDownRight, Cross, Hyphen, Stop, Pause, SkipBack, SkipBack2, SkipForward, SkipForward2, Rewind, FastForward, AtFrom, AtTo}&lt;br&gt;pin icon shape type used in WorkspaceCorePin::content(), file WorkspaceElementWitCoreData.cpp::379 drawn by <a href="./.html">Diwne::DrawIcon</a>, method Diwne::DrawIconXXXX, file Diwne.cpp</td></tr><tr><td>typedef unsigned int</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">ID</a></strong></td></tr><tr><td>typedef std::function&lt; void(...)&gt;</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-popupcontent-function-pointer">popupContent_function_pointer</a></strong> &lt;br&gt;you can pass any arguments to you function with popup menu content</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>template &lt;typename T ,std::enable_if&lt; std::is_base_of&lt; DiwneObject, T &gt;::value, bool &gt;::type =true&amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#function-expandpopupcontent">expandPopupContent</a></strong>(T &amp; object)</td></tr><tr><td>template &lt;typename... Args&amp;gt; &lt;br&gt;bool</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#function-popupdiwne">popupDiwne</a></strong>(std::string const popupID, ImVec2 const &amp; popupPos, void(*)(Args...) popupContent, Args &amp;&amp;... args)&lt;br&gt;Function showing popup It open ImGui popup on given position, fill in your content and close it.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#function-scaleallsizes">ScaleAllSizes</a></strong>(ImGuiStyle &amp; style, float scale_factor)</td></tr></tbody></table><h2 id="types-documentation" tabindex="-1">Types Documentation <a class="header-anchor" href="#types-documentation" aria-label="Permalink to &quot;Types Documentation&quot;">​</a></h2><h3 id="enum-diwneaction" tabindex="-1">enum DiwneAction <a class="header-anchor" href="#enum-diwneaction" aria-label="Permalink to &quot;enum DiwneAction&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>None</td><td></td><td></td></tr><tr><td>FocusOnObject</td><td></td><td></td></tr><tr><td>InteractingContent</td><td></td><td></td></tr><tr><td>NewLink</td><td></td><td></td></tr><tr><td>HoldNode</td><td></td><td></td></tr><tr><td>HoldPin</td><td></td><td></td></tr><tr><td>HoldLink</td><td></td><td></td></tr><tr><td>HoldWorkarea</td><td></td><td></td></tr><tr><td>DragNode</td><td></td><td></td></tr><tr><td>DragPin</td><td></td><td></td></tr><tr><td>DragLink</td><td></td><td></td></tr><tr><td>DragWorkarea</td><td></td><td></td></tr><tr><td>TouchNode</td><td></td><td></td></tr><tr><td>TouchPin</td><td></td><td></td></tr><tr><td>TouchLink</td><td></td><td></td></tr><tr><td>TouchWorkarea</td><td></td><td></td></tr><tr><td>SelectionRectFull</td><td></td><td></td></tr><tr><td>SelectionRectTouch</td><td></td><td></td></tr></tbody></table><h3 id="enum-drawmode" tabindex="-1">enum DrawMode <a class="header-anchor" href="#enum-drawmode" aria-label="Permalink to &quot;enum DrawMode&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>JustDraw</td><td></td><td>Draw object only - block all (node editor&#39;s) interactions</td></tr><tr><td>Interacting</td><td></td><td>Usual mode - draw and allow interaction too</td></tr></tbody></table><p>Drawing mode of <a href="./.html">DiwneObject</a></p><h3 id="enum-drawmodenodeposition" tabindex="-1">enum DrawModeNodePosition <a class="header-anchor" href="#enum-drawmodenodeposition" aria-label="Permalink to &quot;enum DrawModeNodePosition&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>OnCursorPosition</td><td></td><td>cursor position in screen coordinates</td></tr><tr><td>OnItsPosition</td><td></td><td>node position in <a href="./.html">Diwne</a> coordinates</td></tr></tbody></table><p>Used when one node is inside of another -&gt; the inner node is drawn OnCursorPosition when outer node is drawn.</p><h3 id="enum-icontype" tabindex="-1">enum IconType <a class="header-anchor" href="#enum-icontype" aria-label="Permalink to &quot;enum IconType&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>NoIcon</td><td></td><td></td></tr><tr><td>Circle</td><td></td><td></td></tr><tr><td>Rectangle</td><td></td><td></td></tr><tr><td>TriangleLeft</td><td></td><td></td></tr><tr><td>TriangleRight</td><td></td><td></td></tr><tr><td>TriangleDownLeft</td><td></td><td></td></tr><tr><td>TriangleDownRight</td><td></td><td></td></tr><tr><td>GrabDownLeft</td><td></td><td></td></tr><tr><td>GrabDownRight</td><td></td><td></td></tr><tr><td>Cross</td><td></td><td></td></tr><tr><td>Hyphen</td><td></td><td></td></tr><tr><td>Stop</td><td></td><td>Black Square For Stop (U+23F9)</td></tr><tr><td>Pause</td><td></td><td>Double Vertical Bar (U+23F8)</td></tr><tr><td>SkipBack</td><td></td><td></td></tr><tr><td>SkipBack2</td><td></td><td>&quot;&lt;</td></tr><tr><td>SkipForward</td><td></td><td>&quot;&gt;</td></tr><tr><td>SkipForward2</td><td></td><td></td></tr><tr><td>Rewind</td><td></td><td>Black Left-Pointing Double Triangle (U+23EA)</td></tr><tr><td>FastForward</td><td></td><td>Black Right-Pointing Double Triangle (U+23E9)</td></tr><tr><td>AtFrom</td><td></td><td></td></tr><tr><td>AtTo</td><td></td><td></td></tr></tbody></table><p>pin icon shape type used in WorkspaceCorePin::content(), file WorkspaceElementWitCoreData.cpp::379 drawn by <a href="./.html">Diwne::DrawIcon</a>, method Diwne::DrawIconXXXX, file Diwne.cpp</p><h3 id="typedef-id" tabindex="-1">typedef ID <a class="header-anchor" href="#typedef-id" aria-label="Permalink to &quot;typedef ID&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DIWNE</span><span style="color:#E1E4E8;">::ID;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DIWNE</span><span style="color:#24292E;">::ID;</span></span></code></pre></div><h3 id="typedef-popupcontent-function-pointer" tabindex="-1">typedef popupContent_function_pointer <a class="header-anchor" href="#typedef-popupcontent-function-pointer" aria-label="Permalink to &quot;typedef popupContent_function_pointer&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::function</span><span style="color:#F97583;">&lt;void</span><span style="color:#E1E4E8;">(...)</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DIWNE</span><span style="color:#E1E4E8;">::popupContent_function_pointer;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::function</span><span style="color:#D73A49;">&lt;void</span><span style="color:#24292E;">(...)</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DIWNE</span><span style="color:#24292E;">::popupContent_function_pointer;</span></span></code></pre></div><p>you can pass any arguments to you function with popup menu content</p><h2 id="functions-documentation" tabindex="-1">Functions Documentation <a class="header-anchor" href="#functions-documentation" aria-label="Permalink to &quot;Functions Documentation&quot;">​</a></h2><h3 id="function-expandpopupcontent" tabindex="-1">function expandPopupContent <a class="header-anchor" href="#function-expandpopupcontent" aria-label="Permalink to &quot;function expandPopupContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> ,</span></span>
<span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">enable_if</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">is_base_of</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">DiwneObject</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;::</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> &gt;::</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">true&gt;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expandPopupContent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> ,</span></span>
<span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">enable_if</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">is_base_of</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">DiwneObject</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;::</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> &gt;::</span><span style="color:#D73A49;">type</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">true&gt;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expandPopupContent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">object</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-popupdiwne" tabindex="-1">function popupDiwne <a class="header-anchor" href="#function-popupdiwne" aria-label="Permalink to &quot;function popupDiwne&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;">... </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popupDiwne</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">popupID</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">popupPos</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">(*)(</span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;">...) </span><span style="color:#B392F0;">popupContent</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">... </span><span style="color:#FFAB70;">args</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;">... </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popupDiwne</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">popupID</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">popupPos</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">(*)(</span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;">...) </span><span style="color:#6F42C1;">popupContent</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">... </span><span style="color:#E36209;">args</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Function showing popup It open ImGui popup on given position, fill in your content and close it.</p><p><strong>Parameters</strong>:</p><ul><li><strong>popupID</strong> is identification of popup that have been raised (so is open and should be drawn)</li><li><strong>popupPos</strong> position of popup in screen coords</li><li><strong>popupContent</strong> is function with content of popup - it can take any (number of) arguments</li><li><strong>args</strong> arguments that will be passed to popupContent function</li></ul><p><strong>Return</strong>: true if popup is drawn, false otherwise</p><h3 id="function-scaleallsizes" tabindex="-1">function ScaleAllSizes <a class="header-anchor" href="#function-scaleallsizes" aria-label="Permalink to &quot;function ScaleAllSizes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScaleAllSizes</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImGuiStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">style</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scale_factor</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScaleAllSizes</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImGuiStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">style</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scale_factor</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><hr><p>Updated on 2025-02-25 at 07:08:42 +0000</p>`,37),p=[o];function l(r,c,d,i,y,E){return s(),n("div",null,p)}const m=t(e,[["render",l]]);export{u as __pageData,m as default};
