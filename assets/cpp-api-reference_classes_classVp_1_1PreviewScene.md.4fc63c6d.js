import{_ as e,o as t,c as a,Q as s}from"./chunks/framework.0f749972.js";const _=JSON.parse('{"title":"Vp::PreviewScene","description":"","frontmatter":{"title":"Vp::PreviewScene"},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1PreviewScene.md","filePath":"cpp-api-reference/classes/classVp_1_1PreviewScene.md"}'),r={name:"cpp-api-reference/classes/classVp_1_1PreviewScene.md"},n=s(`<h1 id="vp-previewscene" tabindex="-1">Vp::PreviewScene <a class="header-anchor" href="#vp-previewscene" aria-label="Permalink to &quot;Vp::PreviewScene&quot;">​</a></h1><p><code>#include &quot;Viewport/scene/scenes/PreviewScene.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1PreviewScene.html#function-previewscene">PreviewScene</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Viewport.html">Viewport</a> * viewport)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1PreviewScene.html#function-init">init</a></strong>() override&lt;br&gt;Initialises the scene.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1OrbitCamera.html">OrbitCamera</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1PreviewScene.html#variable-m-orbitcamera">m_orbitCamera</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-scene">Scene</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Viewport.html">Viewport</a> * viewport)</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-~scene">~Scene</a></strong>() =default</td></tr><tr><td>template &lt;typename T ,typename std::enable_if&lt; std::is_base_of&lt; Entity, T &gt;::value, bool &gt;::type =true&amp;gt; &lt;br&gt;std::weak_ptr&lt; T &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-addentity">addEntity</a></strong>(std::shared_ptr&lt; T &gt; entity)&lt;br&gt;Adds entity to the scene.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-addselectioncallback">addSelectionCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> *)&gt; callback)</td></tr><tr><td>virtual <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-createrendertarget">createRenderTarget</a></strong>(const <a href="/cpp-api-reference/classes/classVp_1_1RenderOptions.html">RenderOptions</a> &amp; options)&lt;br&gt;Create and populates a <a href="./.html">SceneRenderTarget</a> object with expected framebuffer objects for the scenes render pass.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-draw">draw</a></strong>(int width, int height, glm::mat4 view, glm::mat4 projection, <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &amp; renderTarget, const <a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a> &amp; displayOptions)&lt;br&gt;Draw the scene using the provided view and projection matrices.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-draw">draw</a></strong>(int width, int height, <a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &amp; renderTarget, const <a href="/cpp-api-reference/classes/classVp_1_1DisplayOptions.html">DisplayOptions</a> &amp; displayOptions)&lt;br&gt;Draw the scene using the scene&#39;s camera.</td></tr><tr><td>const std::vector&lt; std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> &gt; &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-getentities">getEntities</a></strong>() const</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-loadsettings">loadSettings</a></strong>(<a href="/cpp-api-reference/classes/structVp_1_1ViewportSettings.html">ViewportSettings</a> &amp; stg, bool scene, bool global)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-processinput">processInput</a></strong>(double dt, glm::vec2 mousePos, glm::ivec2 windowSize)&lt;br&gt;Update input logic.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-processselection">processSelection</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1SceneRenderTarget.html">SceneRenderTarget</a> &amp; renderTarget, glm::vec2 mousePos, glm::ivec2 windowSize)&lt;br&gt;Update selection logic.</td></tr><tr><td>template &lt;typename T ,typename std::enable_if&lt; std::is_base_of&lt; Entity, T &gt;::value, bool &gt;::type =true&amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-removeentity">removeEntity</a></strong>(std::weak_ptr&lt; T &gt; entity)&lt;br&gt;Remove entity from the scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-savesettings">saveSettings</a></strong>(<a href="/cpp-api-reference/classes/structVp_1_1ViewportSettings.html">ViewportSettings</a> &amp; stg, bool scene, bool global)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-triggerselectioncallbacks">triggerSelectionCallbacks</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * entity)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-update">update</a></strong>(double dt)&lt;br&gt;Update entity logic.</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-rendersortedtransparententities">renderSortedTransparentEntities</a></strong>(glm::mat4 view, glm::mat4 projection, const std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt; &amp; entities) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-sortexplicitlyorderedtransparententities">sortExplicitlyOrderedTransparentEntities</a></strong>(std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt; &amp; entities)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-sortunorderedtransparententities">sortUnorderedTransparentEntities</a></strong>(glm::mat4 view, std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt; &amp; entities)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html">AbstractCamera</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-camera">m_camera</a></strong></td></tr><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1Lighting.html">Lighting</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-lighting">m_lighting</a></strong></td></tr><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1SelectStencil.html">SelectStencil</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-selectstencil">m_selectStencil</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Viewport.html">Viewport</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-viewport">m_viewport</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-entities">m_entities</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-explicittransparencyorderentitiesfirst">m_explicitTransparencyOrderEntitiesFirst</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-explicittransparencyorderentitieslast">m_explicitTransparencyOrderEntitiesLast</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-highlightedentities">m_highlightedEntities</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-selectedentity">m_selectedEntity</a></strong></td></tr><tr><td>std::vector&lt; std::function&lt; void(<a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> *)&gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-selectioncallbacks">m_selectionCallbacks</a></strong> &lt;br&gt;Callbacks that get triggered on entity selection.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Entity</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#variable-m-unorderedtransparententities">m_unorderedTransparentEntities</a></strong></td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Vp::Scene</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Scene.html#friend-viewport">Viewport</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-previewscene" tabindex="-1">function PreviewScene <a class="header-anchor" href="#function-previewscene" aria-label="Permalink to &quot;function PreviewScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PreviewScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    Viewport </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> viewport</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PreviewScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Viewport </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> viewport</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-init" tabindex="-1">function init <a class="header-anchor" href="#function-init" aria-label="Permalink to &quot;function init&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Initialises the scene.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Scene.html#function-init">Vp::Scene::init</a></p><p>Should be called before any draw operations.</p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-orbitcamera" tabindex="-1">variable m_orbitCamera <a class="header-anchor" href="#variable-m-orbitcamera" aria-label="Permalink to &quot;variable m_orbitCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::shared_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> OrbitCamera </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_orbitCamera;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::shared_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> OrbitCamera </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_orbitCamera;</span></span></code></pre></div><hr><p>Updated on 2025-01-23 at 08:58:54 +0000</p>`,31),c=[n];function p(l,i,o,d,h,f){return t(),a("div",null,c)}const g=e(r,[["render",p]]);export{_ as __pageData,g as default};
