import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Workspace::WorkspaceDiwne","description":"","frontmatter":{"title":"Workspace::WorkspaceDiwne"},"headers":[],"relativePath":"cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.md","filePath":"cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.md"}'),n={name:"cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.md"},o=t(`<h1 id="workspace-workspacediwne" tabindex="-1">Workspace::WorkspaceDiwne <a class="header-anchor" href="#workspace-workspacediwne" aria-label="Permalink to &quot;Workspace::WorkspaceDiwne&quot;">​</a></h1><p><code>#include &quot;GUI/Workspace/WorkspaceDiwne.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a>, <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a>, std::enable_shared_from_this&lt; DiwneObject &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-workspacediwne">WorkspaceDiwne</a></strong>(<a href="/cpp-api-reference/classes/structDIWNE_1_1SettingsDiwne.html">DIWNE::SettingsDiwne</a> * settingsDiwne)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-~workspacediwne">~WorkspaceDiwne</a></strong>() override</td></tr><tr><td>template &lt;class T &amp;gt; &lt;br&gt;auto</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-addnodetoposition">addNodeToPosition</a></strong>(ImVec2 const position =ImVec2(0, 0), bool shiftToLeftByNodeWidth =false)</td></tr><tr><td>template &lt;class T &amp;gt; &lt;br&gt;auto</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-addnodetopositionofpopup">addNodeToPositionOfPopup</a></strong>()</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-addtypeconstructornode">addTypeConstructorNode</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-aftercontent">afterContent</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-afterend">afterEnd</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-beforebegin">beforeBegin</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-beforecontent">beforeContent</a></strong>() override</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassdiwnegetselectionrectanglesize">bypassDiwneGetSelectionRectangleSize</a></strong>() override</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassdiwnegetselectionrectanglestartposition">bypassDiwneGetSelectionRectangleStartPosition</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassdragaction">bypassDragAction</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassholdaction">bypassHoldAction</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassselectionrectangleaction">bypassSelectionRectangleAction</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypassunholdaction">bypassUnholdAction</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-bypasszoomaction">bypassZoomAction</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-clear">clear</a></strong>() override&lt;br&gt;Clear all nodes from the node editor.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-content">content</a></strong>() override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-copyselectednodes">copySelectedNodes</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-cutselectednodes">cutSelectedNodes</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-deletecallback">deleteCallback</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-deselectnodes">deselectNodes</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-deselectworkspacenode">deselectWorkspaceNode</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; transform)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-detectrotationtransformandsetfloatmode">detectRotationTransformAndSetFloatMode</a></strong>(auto node)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-duplicateclickednode">duplicateClickedNode</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-duplicateselectednodes">duplicateSelectedNodes</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-finalize">finalize</a></strong>() override</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallcameras">getAllCameras</a></strong>()</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallinputfreemodel">getAllInputFreeModel</a></strong>()</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallinputfreesequence">getAllInputFreeSequence</a></strong>()</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Model.html">Model</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallmodels">getAllModels</a></strong>()</td></tr><tr><td>const std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallnodes">getAllNodes</a></strong>() const</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getallnodesinnerincluded">getAllNodesInnerIncluded</a></strong>()</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;<a href="/cpp-api-reference/files/Result_8h.html#using-result">Result</a>&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; T &gt;, <a href="/cpp-api-reference/classes/structError.html">Error</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getnode">getNode</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">Core::ID</a> id, bool searchInner =false) const&lt;br&gt;O(N) where N is workspace nodes count.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getovernodesrectanglediwne">getOverNodesRectangleDiwne</a></strong>(std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt; nodes)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getselectednodes">getSelectedNodes</a></strong>()</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getselectednodesinnerincluded">getSelectedNodesInnerIncluded</a></strong>()</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Model.html">Model</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getsequencemodels">getSequenceModels</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt; seq)</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getworkspacediwneaction">getWorkspaceDiwneAction</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getworkspacediwneaction-previousframe">getWorkspaceDiwneAction_previousFrame</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-getworkspacediwneactionactive">getWorkspaceDiwneActionActive</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-invertselection">invertSelection</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-isnodelabelbeingedited">isNodeLabelBeingEdited</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-manipulatorstartcheck3d">manipulatorStartCheck3D</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-pasteselectednodes">pasteSelectedNodes</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-popupcontent">popupContent</a></strong>() override&lt;br&gt;Content of popup menu raise on this object.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-processcreateandplugtypeconstructor">processCreateAndPlugTypeConstructor</a></strong>()&lt;br&gt;For a given input, create appropriate constructor box and plug it to this input.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-processdragallselectednodes">processDragAllSelectedNodes</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-processtrackingmove">processTrackingMove</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-processzoom">processZoom</a></strong>() override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-replacenode">replaceNode</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; oldNode, <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; newNode)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-selectall">selectAll</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-setworkareazoom">setWorkAreaZoom</a></strong>(float val =1) override</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-setworkspacediwneaction">setWorkspaceDiwneAction</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a> wda)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-shiftinteractingnodetoend">shiftInteractingNodeToEnd</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-shiftnodestobegin">shiftNodesToBegin</a></strong>(std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt; const &amp; nodesToShift)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-shiftnodestoend">shiftNodesToEnd</a></strong>(std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt; const &amp; nodesToShift)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-toggleselectednodesvisibility">toggleSelectedNodesVisibility</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackinginit">trackingInit</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt; sequence, std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Model.html">Model</a> &gt; &gt; models, bool isRightToLeft)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingjaggedleft">trackingJaggedLeft</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingjaggedright">trackingJaggedRight</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingmodeswitch">trackingModeSwitch</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingsmoothleft">trackingSmoothLeft</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingsmoothright">trackingSmoothRight</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingswitch">trackingSwitch</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingswitchoff">trackingSwitchOff</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-trackingswitchon">trackingSwitchOn</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a> &gt; sequence =nullptr, bool isRightToLeft =true)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-zoomtoall">zoomToAll</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-zoomtorectangle">zoomToRectangle</a></strong>(ImRect const &amp; rect)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#function-zoomtoselected">zoomToSelected</a></strong>()</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> *</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-copiednodes">copiedNodes</a></strong></td></tr><tr><td>ImDrawListSplitter</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-channelsplitter">m_channelSplitter</a></strong></td></tr><tr><td>std::unordered_map&lt; <a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">Core::ID</a>, <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-coreidmap">m_coreIdMap</a></strong> &lt;br&gt;A map connecting <a href="./.html">Core</a> node id&#39;s with equivalent gui nodes.</td></tr><tr><td>std::vector&lt; CoreLink &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-linkscameratosequence">m_linksCameraToSequence</a></strong></td></tr><tr><td>std::vector&lt; CoreLink * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-linkstodraw">m_linksToDraw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-reconnectcameratosequence">m_reconnectCameraToSequence</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-trackingfromleft">m_trackingFromLeft</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-updatedataitemswidth">m_updateDataItemsWidth</a></strong> &lt;br&gt;Indicates a change in zoom level this frame.</td></tr><tr><td><a href="/cpp-api-reference/classes/classWorkspace_1_1ViewportHighlightResolver.html">ViewportHighlightResolver</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-viewporthighlightresolver">m_viewportHighlightResolver</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a> *</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-viewportlastselectedentity">m_viewportLastSelectedEntity</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-viewportselectionchanged">m_viewportSelectionChanged</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-workspacecorenodes">m_workspaceCoreNodes</a></strong> &lt;br&gt;All WorkspaceNodes.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-workspacediwneaction">m_workspaceDiwneAction</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceWorkspace.html#enum-workspacediwneaction">WorkspaceDiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-m-workspacediwneactionpreviousframe">m_workspaceDiwneActionPreviousFrame</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-smoothtracking">smoothTracking</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-timeuntilnexttrack">timeUntilNextTrack</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1MatrixTracker.html">Core::MatrixTracker</a> *</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#variable-tracking">tracking</a></strong></td></tr></tbody></table><h2 id="friends" tabindex="-1">Friends <a class="header-anchor" href="#friends" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classWorkspace_1_1WorkspaceDiwne.html#friend-sequencemovenodetoworkspace">Sequence::moveNodeToWorkspace</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classWorkspace_1_1CoreNode.html">CoreNode</a> &gt; node)</td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-diwne">Diwne</a></strong>(<a href="/cpp-api-reference/classes/structDIWNE_1_1SettingsDiwne.html">DIWNE::SettingsDiwne</a> * settingsDiwne)&lt;br&gt;Default constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-~diwne">~Diwne</a></strong>()&lt;br&gt;Default destructor.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-addbeziercurvediwne">AddBezierCurveDiwne</a></strong>(const ImVec2 &amp; p1, const ImVec2 &amp; p2, const ImVec2 &amp; p3, const ImVec2 &amp; p4, ImVec4 col, float thickness, int num_segments =0) const&lt;br&gt;Draw Bezier (not Bezier really) curve to window ImDrawList.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-addrectdiwne">AddRectDiwne</a></strong>(const ImVec2 &amp; p_min, const ImVec2 &amp; p_max, ImVec4 col, float rounding =0.0f, ImDrawFlags rounding_corners =ImDrawFlags_RoundCornersAll, float thickness =1.0f) const&lt;br&gt;Draw rectangle to window ImDrawlist.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-addrectfilleddiwne">AddRectFilledDiwne</a></strong>(const ImVec2 &amp; p_min, const ImVec2 &amp; p_max, ImVec4 col, float rounding =0.0f, ImDrawFlags rounding_corners =ImDrawFlags_RoundCornersAll) const&lt;br&gt;Draw filled rectangle to window ImDrawlist.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-aftercontentdiwne">afterContentDiwne</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-afterenddiwne">afterEndDiwne</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-allowdrawing">allowDrawing</a></strong>() override&lt;br&gt;Decision maker whether object should be drawn (not outside of window for example)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-allowprocessfocused">allowProcessFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-allowprocessselectionrectangle">allowProcessSelectionRectangle</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-allowprocesszoom">allowProcessZoom</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-applyzoomscaling">applyZoomScaling</a></strong>()&lt;br&gt;Modifies the current ImGuiStyle and Font depending on the current diwne zoom level.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-applyzoomscalingtofont">applyZoomScalingToFont</a></strong>(ImFont * font, ImFont * largeFont =nullptr)&lt;br&gt;Modifies the current Font depending on the current diwne zoom level.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-begin">begin</a></strong>() override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-blockraisepopup">blockRaisePopup</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassdiwnegetpopupnewpositionaction">bypassDiwneGetPopupNewPositionAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassdiwnesetpopuppositionaction">bypassDiwneSetPopupPositionAction</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousedelta">bypassGetMouseDelta</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousedragdelta0">bypassGetMouseDragDelta0</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousedragdelta1">bypassGetMouseDragDelta1</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousedragdelta2">bypassGetMouseDragDelta2</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousepos">bypassGetMousePos</a></strong>()</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetmousewheel">bypassGetMouseWheel</a></strong>()</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassgetzoomdelta">bypassGetZoomDelta</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassisitemactive">bypassIsItemActive</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassisitemclicked0">bypassIsItemClicked0</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassisitemclicked1">bypassIsItemClicked1</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassisitemclicked2">bypassIsItemClicked2</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismouseclicked0">bypassIsMouseClicked0</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismouseclicked1">bypassIsMouseClicked1</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismouseclicked2">bypassIsMouseClicked2</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedown0">bypassIsMouseDown0</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedown1">bypassIsMouseDown1</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedown2">bypassIsMouseDown2</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedragging0">bypassIsMouseDragging0</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedragging1">bypassIsMouseDragging1</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousedragging2">bypassIsMouseDragging2</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousereleased0">bypassIsMouseReleased0</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousereleased1">bypassIsMouseReleased1</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassismousereleased2">bypassIsMouseReleased2</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassmouseclickedpos0">bypassMouseClickedPos0</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassmouseclickedpos1">bypassMouseClickedPos1</a></strong>()</td></tr><tr><td>virtual ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassmouseclickedpos2">bypassMouseClickedPos2</a></strong>()</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-diwne2screen">diwne2screen</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-diwne2screen-nozoom">diwne2screen_noZoom</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-diwne2workarea">diwne2workArea</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-diwne2workarea-nozoom">diwne2workArea_noZoom</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicon">DrawIcon</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">DIWNE::IconType</a> bgIconType, ImColor bgShapeColor, ImColor bgInnerColor, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">DIWNE::IconType</a> fgIconType, ImColor fgShapeColor, ImColor fgInnerColor, ImVec2 size, ImVec4 padding, bool filled, ImVec2 thickness =ImVec2(1, 1), float rounding =0) const&lt;br&gt;Draw an Icon combined from two parts (foreground and background) to the window <em>ImDrawList</em> filled with a <em>ShapeColor</em>.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconcircle">DrawIconCircle</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const&lt;br&gt;Draw a circle icon.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconcross">DrawIconCross</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float shapeThickness =2, float innerThickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconfastforward">DrawIconFastForward</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicongrabdownleft">DrawIconGrabDownLeft</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicongrabdownright">DrawIconGrabDownRight</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconhyphen">DrawIconHyphen</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =3.0f) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconpause">DrawIconPause</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, ImVec2 thickness =ImVec2(1, 1), float rounding =0) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconrectangle">DrawIconRectangle</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, ImVec2 thickness =ImVec2(1, 1), float rounding =0) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconrewind">DrawIconRewind</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconskipback">DrawIconSkipBack</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconskipback2">DrawIconSkipBack2</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconskipforward">DrawIconSkipForward</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawiconskipforward2">DrawIconSkipForward2</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicontriangledownleft">DrawIconTriangleDownLeft</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicontriangledownright">DrawIconTriangleDownRight</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicontriangleleft">DrawIconTriangleLeft</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-drawicontriangleright">DrawIconTriangleRight</a></strong>(ImDrawList * idl, ImColor shapeColor, ImColor innerColor, ImVec2 topLeft, ImVec2 bottomRight, bool filled, float thickness =1) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-emptybutton">EmptyButton</a></strong>(ImVec2 size, ImColor color, float rounding)&lt;br&gt;Just the shape of the button, no interaction.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-end">end</a></strong>() override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-ensurezoomscaling">ensureZoomScaling</a></strong>(bool active)&lt;br&gt;Ensure that zoom scaling is active or not based on a passed parameter.</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-finalizediwne">finalizeDiwne</a></strong>() override</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getdiwneaction">getDiwneAction</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getdiwneactionactive">getDiwneActionActive</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getdiwneactionpreviousframe">getDiwneActionPreviousFrame</a></strong>() const</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getdragactiontype">getDragActionType</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/classes/classDIWNE_1_1Link.html">DIWNE::Link</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-gethelperlink">getHelperLink</a></strong>()</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getholdactiontype">getHoldActionType</a></strong>() const</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;std::shared_ptr&lt; T &gt;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getlastactivenode">getLastActiveNode</a></strong>()</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;std::shared_ptr&lt; T &gt;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getlastactivepin">getLastActivePin</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getnodesselectionchanged">getNodesSelectionChanged</a></strong>()</td></tr><tr><td>ImVec2 const &amp;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getpopupposition">getPopupPosition</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getrectdiwne">getRectDiwne</a></strong>() const override</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getselectionrectanglediwne">getSelectionRectangleDiwne</a></strong>()</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-gettouchactiontype">getTouchActionType</a></strong>() const</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getworkareadiwne">getWorkAreaDiwne</a></strong>() const&lt;br&gt;Update position and size of work area on screen and on diwne.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getworkareascreen">getWorkAreaScreen</a></strong>() const</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-getworkareazoom">getWorkAreaZoom</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-iconbutton">IconButton</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">DIWNE::IconType</a> bgIconType, ImColor bgShapeColor, ImColor bgInnerColor, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">DIWNE::IconType</a> fgIconType, ImColor fgShapeColor, ImColor fgInnerColor, ImVec2 size, ImVec4 padding, bool filled, std::string const id) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-iconbutton">IconButton</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-icontype">DIWNE::IconType</a> bgIconType, ImColor bgShapeColor, ImColor bgInnerColor, ImVec2 size, ImVec4 padding, bool filled, std::string const id) const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-initializediwne">initializeDiwne</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processdiwneselectionrectangle">processDiwneSelectionRectangle</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processdiwnezoom">processDiwneZoom</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processdrag">processDrag</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processinteractions">processInteractions</a></strong>() override</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processinteractionsdiwne">processInteractionsDiwne</a></strong>() override</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-restorezoomscaling">restoreZoomScaling</a></strong>()&lt;br&gt;Restores the current ImGuiStyle and Font back to its state before <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-applyzoomscaling">applyZoomScaling()</a> was last called.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-restorezoomscalingtofont">restoreZoomScalingToFont</a></strong>(ImFont * font, float originalScale)</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-screen2diwne">screen2diwne</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-screen2diwne-nozoom">screen2diwne_noZoom</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-screen2workarea">screen2workArea</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setdiwneaction">setDiwneAction</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a> action)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setlastactivenode">setLastActiveNode</a></strong>(std::shared_ptr&lt; T &gt; node)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setlastactivepin">setLastActivePin</a></strong>(std::shared_ptr&lt; T &gt; pin)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setnodesselectionchanged">setNodesSelectionChanged</a></strong>(bool value)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setpopupposition">setPopupPosition</a></strong>(ImVec2 position)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setworkareadiwne">setWorkAreaDiwne</a></strong>(ImRect rect)</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-transformfromdiwnetoimgui">transformFromDiwneToImGui</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec4</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-transformfromdiwnetoimgui">transformFromDiwneToImGui</a></strong>(const ImVec4 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-transformfromimguitodiwne">transformFromImGuiToDiwne</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec4</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-transformfromimguitodiwne">transformFromImGuiToDiwne</a></strong>(const ImVec4 &amp; point) const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-translateworkareadiwne">translateWorkAreaDiwne</a></strong>(ImVec2 const &amp; distance)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-translateworkareadiwnezoomed">translateWorkAreaDiwneZoomed</a></strong>(ImVec2 const &amp; distance)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-updateworkarearectangles">updateWorkAreaRectangles</a></strong>()</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-workarea2diwne">workArea2diwne</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-workarea2diwne-nozoom">workArea2diwne_noZoom</a></strong>(const ImVec2 &amp; point) const</td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-workarea2screen">workArea2screen</a></strong>(const ImVec2 &amp; point) const</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-allowunselectingnodes">m_allowUnselectingNodes</a></strong> &lt;br&gt;for example when holding ctrl nodes not going unselected when sleection rect get out of them</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-diwnedebug">m_diwneDebug</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-objectfocused">m_objectFocused</a></strong> &lt;br&gt;only one object can be focused</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-popupdrawn">m_popupDrawn</a></strong> &lt;br&gt;not draw popup two times</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-takesnap">m_takeSnap</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-tooltipdrawn">m_tooltipDrawn</a></strong> &lt;br&gt;not draw tooltip two times</td></tr><tr><td><a href="/cpp-api-reference/classes/structDIWNE_1_1SettingsDiwne.html">DIWNE::SettingsDiwne</a> *</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-mp-settingsdiwne">mp_settingsDiwne</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-diwneaction">m_diwneAction</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-diwneaction-previousframe">m_diwneAction_previousFrame</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-drawing">m_drawing</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/classDIWNE_1_1Link.html">DIWNE::Link</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-helperlink">m_helperLink</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-nodesselectionchanged">m_nodesSelectionChanged</a></strong></td></tr><tr><td>ImVec2</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-popupposition">m_popupPosition</a></strong></td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-selectionrectangediwne">m_selectionRectangeDiwne</a></strong></td></tr><tr><td>ImColor</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-selectionrectangefullcolor">m_selectionRectangeFullColor</a></strong></td></tr><tr><td>ImColor</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-selectionrectangetouchcolor">m_selectionRectangeTouchColor</a></strong></td></tr><tr><td>ImDrawListSplitter</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-splitter">m_splitter</a></strong> &lt;br&gt;Every nodes should be draw to its own channel.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-workareadiwne">m_workAreaDiwne</a></strong> &lt;br&gt;Rectangle of work area on diwne.</td></tr><tr><td>ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-workareascreen">m_workAreaScreen</a></strong> &lt;br&gt;Rectangle of work area on screen.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-workareazoom">m_workAreaZoom</a></strong> &lt;br&gt;<a href="/cpp-api-reference/namespaces/namespaceWorkspace.html">Workspace</a> zoom factor.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-zoomoriginalfontscale">m_zoomOriginalFontScale</a></strong> &lt;br&gt;For restore value after this window is done.</td></tr><tr><td>ImGuiStyle</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-zoomoriginalstyle">m_zoomOriginalStyle</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-m-zoomscalingapplied">m_zoomScalingApplied</a></strong></td></tr><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classDIWNE_1_1Node.html">DIWNE::Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-mp-lastactivenode">mp_lastActiveNode</a></strong></td></tr><tr><td>std::shared_ptr&lt; <a href="/cpp-api-reference/classes/classDIWNE_1_1Pin.html">DIWNE::Pin</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#variable-mp-lastactivepin">mp_lastActivePin</a></strong></td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-diwneobject">DiwneObject</a></strong>(<a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp; diwne, <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> id, std::string const labelDiwne)&lt;br&gt;Constructor.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-~diwneobject">~DiwneObject</a></strong>() =default</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-aftercontentdiwne">afterContentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-afterenddiwne">afterEndDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowdrawing">allowDrawing</a></strong>()&lt;br&gt;Decision maker whether object should be drawn (not outside of window for example)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowinteraction">allowInteraction</a></strong>()&lt;br&gt;Decision maker whether object can interact (not include content elements)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessdrag">allowProcessDrag</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessfocused">allowProcessFocused</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessfocusedforinteraction">allowProcessFocusedForInteraction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocesshold">allowProcessHold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessraisepopup">allowProcessRaisePopup</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessselect">allowProcessSelect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessunhold">allowProcessUnhold</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-allowprocessunselect">allowProcessUnselect</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforebegindiwne">beforeBeginDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforecontentdiwne">beforeContentDiwne</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-begin">begin</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassfocusaction">bypassFocusAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassfocusforinteractionaction">bypassFocusForInteractionAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassraisepopupaction">bypassRaisePopupAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassselectaction">bypassSelectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypasstouchaction">bypassTouchAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassunselectaction">bypassUnselectAction</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-contentdiwne">contentDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-drawdiwne">drawDiwne</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a> drawMode =<a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enumvalue-interacting">DrawMode::Interacting</a>)&lt;br&gt;Main function for drawing object and deal with interactions.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-end">end</a></strong>() =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-finalizediwne">finalizeDiwne</a></strong>()</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getdragactiontype">getDragActionType</a></strong>() const =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getholdactiontype">getHoldActionType</a></strong>() const =0</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getiddiwne">getIdDiwne</a></strong>() const</td></tr><tr><td>virtual ImRect</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getrectdiwne">getRectDiwne</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getselectable">getSelectable</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-getselected">getSelected</a></strong>() const&lt;br&gt;Getter of selection state.</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-diwneaction">DIWNE::DiwneAction</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-gettouchactiontype">getTouchActionType</a></strong>() const =0</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-initialize">initialize</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-initializediwne">initializeDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-interactionbegininlastdraw">interactionBeginInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-interactionendinlastdraw">interactionEndInLastDraw</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processdrag">processDrag</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processdragdiwne">processDragDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocused">processFocused</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocuseddiwne">processFocusedDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocusedforinteraction">processFocusedForInteraction</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processfocusedforinteractiondiwne">processFocusedForInteractionDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processhold">processHold</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processholddiwne">processHoldDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractions">processInteractions</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractionsalways">processInteractionsAlways</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processinteractionsdiwne">processInteractionsDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processraisepopupdiwne">processRaisePopupDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processselect">processSelect</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processselectdiwne">processSelectDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processshowpopupdiwne">processShowPopupDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunhold">processUnhold</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunholddiwne">processUnholdDiwne</a></strong>()</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunselect">processUnselect</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-processunselectdiwne">processUnselectDiwne</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-setselectable">setSelectable</a></strong>(bool const selectable)</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-setselected">setSelected</a></strong>(bool const selected)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-showtooltiplabel">showTooltipLabel</a></strong>(std::string const &amp; label, ImColor const &amp;&amp; color)&lt;br&gt;Show a colored text for example for immediate hints.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-updatesizes">updateSizes</a></strong>()</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html">DIWNE::DiwneObject</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html">DIWNE::Diwne</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-diwne">diwne</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#enum-drawmode">DrawMode</a></td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-drawmode">m_drawMode</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-focused">m_focused</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-focusedforinteraction">m_focusedForInteraction</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceDIWNE.html#typedef-id">DIWNE::ID</a> const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-iddiwne">m_idDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-inner-interaction-happen">m_inner_interaction_happen</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-inner-interaction-happen-previous-draw">m_inner_interaction_happen_previous_draw</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isactive">m_isActive</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isdragged">m_isDragged</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-isheld">m_isHeld</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-labeldiwne">m_labelDiwne</a></strong></td></tr><tr><td>std::string const</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-popupiddiwne">m_popupIDDiwne</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-selectable">m_selectable</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#variable-m-selected">m_selected</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-workspacediwne" tabindex="-1">function WorkspaceDiwne <a class="header-anchor" href="#function-workspacediwne" aria-label="Permalink to &quot;function WorkspaceDiwne&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">WorkspaceDiwne</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">DIWNE</span><span style="color:#E1E4E8;">::SettingsDiwne </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> settingsDiwne</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">WorkspaceDiwne</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">DIWNE</span><span style="color:#24292E;">::SettingsDiwne </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> settingsDiwne</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-workspacediwne-1" tabindex="-1">function ~WorkspaceDiwne <a class="header-anchor" href="#function-workspacediwne-1" aria-label="Permalink to &quot;function ~WorkspaceDiwne&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#B392F0;">WorkspaceDiwne</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">WorkspaceDiwne</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><h3 id="function-addnodetoposition" tabindex="-1">function addNodeToPosition <a class="header-anchor" href="#function-addnodetoposition" aria-label="Permalink to &quot;function addNodeToPosition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addNodeToPosition</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">position</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shiftToLeftByNodeWidth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addNodeToPosition</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">position</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shiftToLeftByNodeWidth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-addnodetopositionofpopup" tabindex="-1">function addNodeToPositionOfPopup <a class="header-anchor" href="#function-addnodetopositionofpopup" aria-label="Permalink to &quot;function addNodeToPositionOfPopup&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addNodeToPositionOfPopup</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addNodeToPositionOfPopup</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-addtypeconstructornode" tabindex="-1">function addTypeConstructorNode <a class="header-anchor" href="#function-addtypeconstructornode" aria-label="Permalink to &quot;function addTypeConstructorNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addTypeConstructorNode</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addTypeConstructorNode</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-aftercontent" tabindex="-1">function afterContent <a class="header-anchor" href="#function-aftercontent" aria-label="Permalink to &quot;function afterContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-aftercontent">DIWNE::DiwneObject::afterContent</a></p><p>is called as last inside object</p><h3 id="function-afterend" tabindex="-1">function afterEnd <a class="header-anchor" href="#function-afterend" aria-label="Permalink to &quot;function afterEnd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterEnd</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterEnd</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-afterend">DIWNE::DiwneObject::afterEnd</a></p><p>is called after closing object, sizes are updated already</p><h3 id="function-beforebegin" tabindex="-1">function beforeBegin <a class="header-anchor" href="#function-beforebegin" aria-label="Permalink to &quot;function beforeBegin&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeBegin</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeBegin</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforebegin">DIWNE::DiwneObject::beforeBegin</a></p><p>is called before begin of object drawing (but after <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-allowdrawing">allowDrawing()</a> decision)</p><h3 id="function-beforecontent" tabindex="-1">function beforeContent <a class="header-anchor" href="#function-beforecontent" aria-label="Permalink to &quot;function beforeContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-beforecontent">DIWNE::DiwneObject::beforeContent</a></p><p>is called first inside of object</p><h3 id="function-bypassdiwnegetselectionrectanglesize" tabindex="-1">function bypassDiwneGetSelectionRectangleSize <a class="header-anchor" href="#function-bypassdiwnegetselectionrectanglesize" aria-label="Permalink to &quot;function bypassDiwneGetSelectionRectangleSize&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassDiwneGetSelectionRectangleSize</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassDiwneGetSelectionRectangleSize</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassdiwnegetselectionrectanglesize">DIWNE::Diwne::bypassDiwneGetSelectionRectangleSize</a></p><h3 id="function-bypassdiwnegetselectionrectanglestartposition" tabindex="-1">function bypassDiwneGetSelectionRectangleStartPosition <a class="header-anchor" href="#function-bypassdiwnegetselectionrectanglestartposition" aria-label="Permalink to &quot;function bypassDiwneGetSelectionRectangleStartPosition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImVec2</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassDiwneGetSelectionRectangleStartPosition</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImVec2</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassDiwneGetSelectionRectangleStartPosition</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassdiwnegetselectionrectanglestartposition">DIWNE::Diwne::bypassDiwneGetSelectionRectangleStartPosition</a></p><h3 id="function-bypassdragaction" tabindex="-1">function bypassDragAction <a class="header-anchor" href="#function-bypassdragaction" aria-label="Permalink to &quot;function bypassDragAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassDragAction</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassDragAction</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassdragaction">DIWNE::DiwneObject::bypassDragAction</a></p><p>action used for dragging object</p><h3 id="function-bypassholdaction" tabindex="-1">function bypassHoldAction <a class="header-anchor" href="#function-bypassholdaction" aria-label="Permalink to &quot;function bypassHoldAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassHoldAction</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassHoldAction</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassholdaction">DIWNE::DiwneObject::bypassHoldAction</a></p><p>action used for holding object (check only if object is not held)</p><h3 id="function-bypassselectionrectangleaction" tabindex="-1">function bypassSelectionRectangleAction <a class="header-anchor" href="#function-bypassselectionrectangleaction" aria-label="Permalink to &quot;function bypassSelectionRectangleAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassSelectionRectangleAction</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassSelectionRectangleAction</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypassselectionrectangleaction">DIWNE::Diwne::bypassSelectionRectangleAction</a></p><h3 id="function-bypassunholdaction" tabindex="-1">function bypassUnholdAction <a class="header-anchor" href="#function-bypassunholdaction" aria-label="Permalink to &quot;function bypassUnholdAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassUnholdAction</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassUnholdAction</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-bypassunholdaction">DIWNE::DiwneObject::bypassUnholdAction</a></p><p>action used for unholding object (check only if object is held)</p><h3 id="function-bypasszoomaction" tabindex="-1">function bypassZoomAction <a class="header-anchor" href="#function-bypasszoomaction" aria-label="Permalink to &quot;function bypassZoomAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bypassZoomAction</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bypassZoomAction</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-bypasszoomaction">DIWNE::Diwne::bypassZoomAction</a></p><h3 id="function-clear" tabindex="-1">function clear <a class="header-anchor" href="#function-clear" aria-label="Permalink to &quot;function clear&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Clear all nodes from the node editor.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-clear">DIWNE::Diwne::clear</a></p><h3 id="function-content" tabindex="-1">function content <a class="header-anchor" href="#function-content" aria-label="Permalink to &quot;function content&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-content">DIWNE::DiwneObject::content</a></p><p>content of object</p><p>TodoCannot draw with empty workspace -&gt; <code>m_channelSplitter.Split(ImGui::GetWindowDrawList(), node_count );</code> exception.</p><p>Todosee #111, wrongly computed m_takeSnap value.</p><h3 id="function-copyselectednodes" tabindex="-1">function copySelectedNodes <a class="header-anchor" href="#function-copyselectednodes" aria-label="Permalink to &quot;function copySelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copySelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copySelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-cutselectednodes" tabindex="-1">function cutSelectedNodes <a class="header-anchor" href="#function-cutselectednodes" aria-label="Permalink to &quot;function cutSelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cutSelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cutSelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-deletecallback" tabindex="-1">function deleteCallback <a class="header-anchor" href="#function-deletecallback" aria-label="Permalink to &quot;function deleteCallback&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteCallback</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteCallback</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-deselectnodes" tabindex="-1">function deselectNodes <a class="header-anchor" href="#function-deselectnodes" aria-label="Permalink to &quot;function deselectNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deselectNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deselectNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-deselectworkspacenode" tabindex="-1">function deselectWorkspaceNode <a class="header-anchor" href="#function-deselectworkspacenode" aria-label="Permalink to &quot;function deselectWorkspaceNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deselectWorkspaceNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">transform</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deselectWorkspaceNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">transform</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-detectrotationtransformandsetfloatmode" tabindex="-1">function detectRotationTransformAndSetFloatMode <a class="header-anchor" href="#function-detectrotationtransformandsetfloatmode" aria-label="Permalink to &quot;function detectRotationTransformAndSetFloatMode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">detectRotationTransformAndSetFloatMode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">node</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detectRotationTransformAndSetFloatMode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#E36209;">node</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-duplicateclickednode" tabindex="-1">function duplicateClickedNode <a class="header-anchor" href="#function-duplicateclickednode" aria-label="Permalink to &quot;function duplicateClickedNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duplicateClickedNode</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duplicateClickedNode</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-duplicateselectednodes" tabindex="-1">function duplicateSelectedNodes <a class="header-anchor" href="#function-duplicateselectednodes" aria-label="Permalink to &quot;function duplicateSelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duplicateSelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duplicateSelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-finalize" tabindex="-1">function finalize <a class="header-anchor" href="#function-finalize" aria-label="Permalink to &quot;function finalize&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finalize</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finalize</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-finalize">DIWNE::DiwneObject::finalize</a></p><p>is called every time in <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-drawdiwne">drawDiwne()</a> do any finalization of your object here</p><h3 id="function-getallcameras" tabindex="-1">function getAllCameras <a class="header-anchor" href="#function-getallcameras" aria-label="Permalink to &quot;function getAllCameras&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getAllCameras</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getAllCameras</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getallinputfreemodel" tabindex="-1">function getAllInputFreeModel <a class="header-anchor" href="#function-getallinputfreemodel" aria-label="Permalink to &quot;function getAllInputFreeModel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getAllInputFreeModel</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getAllInputFreeModel</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getallinputfreesequence" tabindex="-1">function getAllInputFreeSequence <a class="header-anchor" href="#function-getallinputfreesequence" aria-label="Permalink to &quot;function getAllInputFreeSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getAllInputFreeSequence</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getAllInputFreeSequence</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getallmodels" tabindex="-1">function getAllModels <a class="header-anchor" href="#function-getallmodels" aria-label="Permalink to &quot;function getAllModels&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getAllModels</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getAllModels</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getallnodes" tabindex="-1">function getAllNodes <a class="header-anchor" href="#function-getallnodes" aria-label="Permalink to &quot;function getAllNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllNodes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllNodes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-getallnodesinnerincluded" tabindex="-1">function getAllNodesInnerIncluded <a class="header-anchor" href="#function-getallnodesinnerincluded" aria-label="Permalink to &quot;function getAllNodesInnerIncluded&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getAllNodesInnerIncluded</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getAllNodesInnerIncluded</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getnode" tabindex="-1">function getNode <a class="header-anchor" href="#function-getnode" aria-label="Permalink to &quot;function getNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> &gt;, </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ID</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">searchInner</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> &gt;, </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ID</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">searchInner</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>O(N) where N is workspace nodes count.</p><p><strong>Parameters</strong>:</p><ul><li><strong>id</strong></li></ul><p><strong>Template Parameters</strong>:</p><ul><li><strong>T</strong></li></ul><p><strong>Return</strong>:</p><h3 id="function-getovernodesrectanglediwne" tabindex="-1">function getOverNodesRectangleDiwne <a class="header-anchor" href="#function-getovernodesrectanglediwne" aria-label="Permalink to &quot;function getOverNodesRectangleDiwne&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ImRect</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOverNodesRectangleDiwne</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#FFAB70;">nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ImRect</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOverNodesRectangleDiwne</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#E36209;">nodes</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-getselectednodes" tabindex="-1">function getSelectedNodes <a class="header-anchor" href="#function-getselectednodes" aria-label="Permalink to &quot;function getSelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getSelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getSelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getselectednodesinnerincluded" tabindex="-1">function getSelectedNodesInnerIncluded <a class="header-anchor" href="#function-getselectednodesinnerincluded" aria-label="Permalink to &quot;function getSelectedNodesInnerIncluded&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getSelectedNodesInnerIncluded</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getSelectedNodesInnerIncluded</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getsequencemodels" tabindex="-1">function getSequenceModels <a class="header-anchor" href="#function-getsequencemodels" aria-label="Permalink to &quot;function getSequenceModels&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#B392F0;">getSequenceModels</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">seq</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#6F42C1;">getSequenceModels</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">seq</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-getworkspacediwneaction" tabindex="-1">function getWorkspaceDiwneAction <a class="header-anchor" href="#function-getworkspacediwneaction" aria-label="Permalink to &quot;function getWorkspaceDiwneAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkspaceDiwneAction</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWorkspaceDiwneAction</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkspaceDiwneAction</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWorkspaceDiwneAction</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getworkspacediwneaction-previousframe" tabindex="-1">function getWorkspaceDiwneAction_previousFrame <a class="header-anchor" href="#function-getworkspacediwneaction-previousframe" aria-label="Permalink to &quot;function getWorkspaceDiwneAction_previousFrame&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkspaceDiwneAction</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWorkspaceDiwneAction_previousFrame</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkspaceDiwneAction</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWorkspaceDiwneAction_previousFrame</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-getworkspacediwneactionactive" tabindex="-1">function getWorkspaceDiwneActionActive <a class="header-anchor" href="#function-getworkspacediwneactionactive" aria-label="Permalink to &quot;function getWorkspaceDiwneActionActive&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkspaceDiwneAction</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWorkspaceDiwneActionActive</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkspaceDiwneAction</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWorkspaceDiwneActionActive</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-invertselection" tabindex="-1">function invertSelection <a class="header-anchor" href="#function-invertselection" aria-label="Permalink to &quot;function invertSelection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invertSelection</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invertSelection</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-isnodelabelbeingedited" tabindex="-1">function isNodeLabelBeingEdited <a class="header-anchor" href="#function-isnodelabelbeingedited" aria-label="Permalink to &quot;function isNodeLabelBeingEdited&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNodeLabelBeingEdited</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNodeLabelBeingEdited</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-manipulatorstartcheck3d" tabindex="-1">function manipulatorStartCheck3D <a class="header-anchor" href="#function-manipulatorstartcheck3d" aria-label="Permalink to &quot;function manipulatorStartCheck3D&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">manipulatorStartCheck3D</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">manipulatorStartCheck3D</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-pasteselectednodes" tabindex="-1">function pasteSelectedNodes <a class="header-anchor" href="#function-pasteselectednodes" aria-label="Permalink to &quot;function pasteSelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pasteSelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pasteSelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-popupcontent" tabindex="-1">function popupContent <a class="header-anchor" href="#function-popupcontent" aria-label="Permalink to &quot;function popupContent&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">popupContent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">popupContent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Content of popup menu raise on this object.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1DiwneObject.html#function-popupcontent">DIWNE::DiwneObject::popupContent</a></p><h3 id="function-processcreateandplugtypeconstructor" tabindex="-1">function processCreateAndPlugTypeConstructor <a class="header-anchor" href="#function-processcreateandplugtypeconstructor" aria-label="Permalink to &quot;function processCreateAndPlugTypeConstructor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processCreateAndPlugTypeConstructor</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processCreateAndPlugTypeConstructor</span><span style="color:#24292E;">()</span></span></code></pre></div><p>For a given input, create appropriate constructor box and plug it to this input.</p><p><strong>Return</strong>: true if successful (input was not a Ptr)</p><h3 id="function-processdragallselectednodes" tabindex="-1">function processDragAllSelectedNodes <a class="header-anchor" href="#function-processdragallselectednodes" aria-label="Permalink to &quot;function processDragAllSelectedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processDragAllSelectedNodes</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processDragAllSelectedNodes</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-processtrackingmove" tabindex="-1">function processTrackingMove <a class="header-anchor" href="#function-processtrackingmove" aria-label="Permalink to &quot;function processTrackingMove&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processTrackingMove</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processTrackingMove</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-processzoom" tabindex="-1">function processZoom <a class="header-anchor" href="#function-processzoom" aria-label="Permalink to &quot;function processZoom&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processZoom</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processZoom</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-processzoom">DIWNE::Diwne::processZoom</a></p><h3 id="function-replacenode" tabindex="-1">function replaceNode <a class="header-anchor" href="#function-replacenode" aria-label="Permalink to &quot;function replaceNode&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">replaceNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">oldNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">newNode</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">replaceNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">oldNode</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">newNode</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-selectall" tabindex="-1">function selectAll <a class="header-anchor" href="#function-selectall" aria-label="Permalink to &quot;function selectAll&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectAll</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectAll</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-setworkareazoom" tabindex="-1">function setWorkAreaZoom <a class="header-anchor" href="#function-setworkareazoom" aria-label="Permalink to &quot;function setWorkAreaZoom&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setWorkAreaZoom</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setWorkAreaZoom</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classDIWNE_1_1Diwne.html#function-setworkareazoom">DIWNE::Diwne::setWorkAreaZoom</a></p><h3 id="function-setworkspacediwneaction" tabindex="-1">function setWorkspaceDiwneAction <a class="header-anchor" href="#function-setworkspacediwneaction" aria-label="Permalink to &quot;function setWorkspaceDiwneAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setWorkspaceDiwneAction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">WorkspaceDiwneAction</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">wda</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setWorkspaceDiwneAction</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">WorkspaceDiwneAction</span><span style="color:#24292E;"> </span><span style="color:#E36209;">wda</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-shiftinteractingnodetoend" tabindex="-1">function shiftInteractingNodeToEnd <a class="header-anchor" href="#function-shiftinteractingnodetoend" aria-label="Permalink to &quot;function shiftInteractingNodeToEnd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shiftInteractingNodeToEnd</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shiftInteractingNodeToEnd</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-shiftnodestobegin" tabindex="-1">function shiftNodesToBegin <a class="header-anchor" href="#function-shiftnodestobegin" aria-label="Permalink to &quot;function shiftNodesToBegin&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shiftNodesToBegin</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nodesToShift</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shiftNodesToBegin</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nodesToShift</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-shiftnodestoend" tabindex="-1">function shiftNodesToEnd <a class="header-anchor" href="#function-shiftnodestoend" aria-label="Permalink to &quot;function shiftNodesToEnd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shiftNodesToEnd</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nodesToShift</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shiftNodesToEnd</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nodesToShift</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-toggleselectednodesvisibility" tabindex="-1">function toggleSelectedNodesVisibility <a class="header-anchor" href="#function-toggleselectednodesvisibility" aria-label="Permalink to &quot;function toggleSelectedNodesVisibility&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggleSelectedNodesVisibility</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggleSelectedNodesVisibility</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackinginit" tabindex="-1">function trackingInit <a class="header-anchor" href="#function-trackinginit" aria-label="Permalink to &quot;function trackingInit&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingInit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">sequence</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#FFAB70;">models</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isRightToLeft</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingInit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">sequence</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#E36209;">models</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isRightToLeft</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Precondition</strong>: <code>sequence</code> is not null.</p><h3 id="function-trackingjaggedleft" tabindex="-1">function trackingJaggedLeft <a class="header-anchor" href="#function-trackingjaggedleft" aria-label="Permalink to &quot;function trackingJaggedLeft&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingJaggedLeft</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingJaggedLeft</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingjaggedright" tabindex="-1">function trackingJaggedRight <a class="header-anchor" href="#function-trackingjaggedright" aria-label="Permalink to &quot;function trackingJaggedRight&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingJaggedRight</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingJaggedRight</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingmodeswitch" tabindex="-1">function trackingModeSwitch <a class="header-anchor" href="#function-trackingmodeswitch" aria-label="Permalink to &quot;function trackingModeSwitch&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingModeSwitch</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingModeSwitch</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingsmoothleft" tabindex="-1">function trackingSmoothLeft <a class="header-anchor" href="#function-trackingsmoothleft" aria-label="Permalink to &quot;function trackingSmoothLeft&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingSmoothLeft</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingSmoothLeft</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingsmoothright" tabindex="-1">function trackingSmoothRight <a class="header-anchor" href="#function-trackingsmoothright" aria-label="Permalink to &quot;function trackingSmoothRight&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingSmoothRight</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingSmoothRight</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingswitch" tabindex="-1">function trackingSwitch <a class="header-anchor" href="#function-trackingswitch" aria-label="Permalink to &quot;function trackingSwitch&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingSwitch</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingSwitch</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingswitchoff" tabindex="-1">function trackingSwitchOff <a class="header-anchor" href="#function-trackingswitchoff" aria-label="Permalink to &quot;function trackingSwitchOff&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingSwitchOff</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingSwitchOff</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-trackingswitchon" tabindex="-1">function trackingSwitchOn <a class="header-anchor" href="#function-trackingswitchon" aria-label="Permalink to &quot;function trackingSwitchOn&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackingSwitchOn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">sequence</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isRightToLeft</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackingSwitchOn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">sequence</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isRightToLeft</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-zoomtoall" tabindex="-1">function zoomToAll <a class="header-anchor" href="#function-zoomtoall" aria-label="Permalink to &quot;function zoomToAll&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">zoomToAll</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">zoomToAll</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-zoomtorectangle" tabindex="-1">function zoomToRectangle <a class="header-anchor" href="#function-zoomtorectangle" aria-label="Permalink to &quot;function zoomToRectangle&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">zoomToRectangle</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImRect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rect</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">zoomToRectangle</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImRect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rect</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-zoomtoselected" tabindex="-1">function zoomToSelected <a class="header-anchor" href="#function-zoomtoselected" aria-label="Permalink to &quot;function zoomToSelected&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">zoomToSelected</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">zoomToSelected</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-copiednodes" tabindex="-1">variable copiedNodes <a class="header-anchor" href="#variable-copiednodes" aria-label="Permalink to &quot;variable copiedNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Memento </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> copiedNodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Memento </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> copiedNodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-m-channelsplitter" tabindex="-1">variable m_channelSplitter <a class="header-anchor" href="#variable-m-channelsplitter" aria-label="Permalink to &quot;variable m_channelSplitter&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ImDrawListSplitter m_channelSplitter;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ImDrawListSplitter m_channelSplitter;</span></span></code></pre></div><h3 id="variable-m-coreidmap" tabindex="-1">variable m_coreIdMap <a class="header-anchor" href="#variable-m-coreidmap" aria-label="Permalink to &quot;variable m_coreIdMap&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::unordered_map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::ID, CoreNode </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_coreIdMap;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::unordered_map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::ID, CoreNode </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_coreIdMap;</span></span></code></pre></div><p>A map connecting <a href="./.html">Core</a> node id&#39;s with equivalent gui nodes.</p><p>Contains raw pointers as values so it can be populated in constructors.</p><h3 id="variable-m-linkscameratosequence" tabindex="-1">variable m_linksCameraToSequence <a class="header-anchor" href="#variable-m-linkscameratosequence" aria-label="Permalink to &quot;variable m_linksCameraToSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> CoreLink </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_linksCameraToSequence;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> CoreLink </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_linksCameraToSequence;</span></span></code></pre></div><h3 id="variable-m-linkstodraw" tabindex="-1">variable m_linksToDraw <a class="header-anchor" href="#variable-m-linkstodraw" aria-label="Permalink to &quot;variable m_linksToDraw&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> CoreLink </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_linksToDraw;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> CoreLink </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_linksToDraw;</span></span></code></pre></div><h3 id="variable-m-reconnectcameratosequence" tabindex="-1">variable m_reconnectCameraToSequence <a class="header-anchor" href="#variable-m-reconnectcameratosequence" aria-label="Permalink to &quot;variable m_reconnectCameraToSequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_reconnectCameraToSequence;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_reconnectCameraToSequence;</span></span></code></pre></div><h3 id="variable-m-trackingfromleft" tabindex="-1">variable m_trackingFromLeft <a class="header-anchor" href="#variable-m-trackingfromleft" aria-label="Permalink to &quot;variable m_trackingFromLeft&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_trackingFromLeft;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_trackingFromLeft;</span></span></code></pre></div><h3 id="variable-m-updatedataitemswidth" tabindex="-1">variable m_updateDataItemsWidth <a class="header-anchor" href="#variable-m-updatedataitemswidth" aria-label="Permalink to &quot;variable m_updateDataItemsWidth&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_updateDataItemsWidth;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_updateDataItemsWidth;</span></span></code></pre></div><p>Indicates a change in zoom level this frame.</p><h3 id="variable-m-viewporthighlightresolver" tabindex="-1">variable m_viewportHighlightResolver <a class="header-anchor" href="#variable-m-viewporthighlightresolver" aria-label="Permalink to &quot;variable m_viewportHighlightResolver&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ViewportHighlightResolver m_viewportHighlightResolver;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ViewportHighlightResolver m_viewportHighlightResolver;</span></span></code></pre></div><h3 id="variable-m-viewportlastselectedentity" tabindex="-1">variable m_viewportLastSelectedEntity <a class="header-anchor" href="#variable-m-viewportlastselectedentity" aria-label="Permalink to &quot;variable m_viewportLastSelectedEntity&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Vp</span><span style="color:#E1E4E8;">::Entity </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> m_viewportLastSelectedEntity {</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Vp</span><span style="color:#24292E;">::Entity </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> m_viewportLastSelectedEntity {</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-viewportselectionchanged" tabindex="-1">variable m_viewportSelectionChanged <a class="header-anchor" href="#variable-m-viewportselectionchanged" aria-label="Permalink to &quot;variable m_viewportSelectionChanged&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_viewportSelectionChanged {</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_viewportSelectionChanged {</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-workspacecorenodes" tabindex="-1">variable m_workspaceCoreNodes <a class="header-anchor" href="#variable-m-workspacecorenodes" aria-label="Permalink to &quot;variable m_workspaceCoreNodes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> CoreNode </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_workspaceCoreNodes;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> CoreNode </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_workspaceCoreNodes;</span></span></code></pre></div><p>All WorkspaceNodes.</p><p><strong>Note</strong>: Nodes inside Sequences are not directly in this vector (they are in <a href="/cpp-api-reference/classes/classWorkspace_1_1Sequence.html">Sequence</a>)</p><h3 id="variable-m-workspacediwneaction" tabindex="-1">variable m_workspaceDiwneAction <a class="header-anchor" href="#variable-m-workspacediwneaction" aria-label="Permalink to &quot;variable m_workspaceDiwneAction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WorkspaceDiwneAction m_workspaceDiwneAction;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WorkspaceDiwneAction m_workspaceDiwneAction;</span></span></code></pre></div><h3 id="variable-m-workspacediwneactionpreviousframe" tabindex="-1">variable m_workspaceDiwneActionPreviousFrame <a class="header-anchor" href="#variable-m-workspacediwneactionpreviousframe" aria-label="Permalink to &quot;variable m_workspaceDiwneActionPreviousFrame&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WorkspaceDiwneAction m_workspaceDiwneActionPreviousFrame;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WorkspaceDiwneAction m_workspaceDiwneActionPreviousFrame;</span></span></code></pre></div><h3 id="variable-smoothtracking" tabindex="-1">variable smoothTracking <a class="header-anchor" href="#variable-smoothtracking" aria-label="Permalink to &quot;variable smoothTracking&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> smoothTracking;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> smoothTracking;</span></span></code></pre></div><h3 id="variable-timeuntilnexttrack" tabindex="-1">variable timeUntilNextTrack <a class="header-anchor" href="#variable-timeuntilnexttrack" aria-label="Permalink to &quot;variable timeUntilNextTrack&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> timeUntilNextTrack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> timeUntilNextTrack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-tracking" tabindex="-1">variable tracking <a class="header-anchor" href="#variable-tracking" aria-label="Permalink to &quot;variable tracking&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::MatrixTracker </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> tracking;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::MatrixTracker </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> tracking;</span></span></code></pre></div><h2 id="friends-1" tabindex="-1">Friends <a class="header-anchor" href="#friends-1" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><h3 id="friend-sequence-movenodetoworkspace" tabindex="-1">friend Sequence::moveNodeToWorkspace <a class="header-anchor" href="#friend-sequence-movenodetoworkspace" aria-label="Permalink to &quot;friend Sequence::moveNodeToWorkspace&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">moveNodeToWorkspace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">CoreNode</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">node</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">moveNodeToWorkspace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">CoreNode</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">node</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 09:46:56 +0000</p>`,245),l=[o];function c(p,r,i,d,h,g){return e(),a("div",null,l)}const y=s(n,[["render",c]]);export{u as __pageData,y as default};
