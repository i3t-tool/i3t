import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Vp::Entity","description":"","frontmatter":{"title":"Vp::Entity","summary":"A scene entity base class."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1Entity.md","filePath":"cpp-api-reference/classes/classVp_1_1Entity.md"}'),l={name:"cpp-api-reference/classes/classVp_1_1Entity.md"},t=n(`<h1 id="vp-entity" tabindex="-1">Vp::Entity <a class="header-anchor" href="#vp-entity" aria-label="Permalink to &quot;Vp::Entity&quot;">​</a></h1><p>A scene entity base class.</p><p><code>#include &quot;Viewport/entity/Entity.h&quot;</code></p><p>Inherited by <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">Vp::GameObject</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-entity">Entity</a></strong>()</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-~entity">~Entity</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-dispose">dispose</a></strong>() =0</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-getdisplaytype">getDisplayType</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-gethighlightcolor">getHighlightColor</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-ishighlighted">isHighlighted</a></strong>() const</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneadd">onSceneAdd</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Called when the entity is added to a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneremove">onSceneRemove</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Called when the entity is removed from a scene.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(glm::mat4 view, glm::mat4 projection)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(glm::mat4 view, glm::mat4 projection, bool silhouette)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-setdisplaytype">setDisplayType</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a> type)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlightcolor">setHighlightColor</a></strong>(glm::vec3 highlightColor)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlighted">setHighlighted</a></strong>(bool highlight)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-update">update</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene) =0</td></tr></tbody></table><h2 id="protected-functions" tabindex="-1">Protected Functions <a class="header-anchor" href="#protected-functions" aria-label="Permalink to &quot;Protected Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) =0&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-backfacecull">m_backFaceCull</a></strong></td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-explicittransparencyorder">m_explicitTransparencyOrder</a></strong> &lt;br&gt;Explicit order for ordered transparency.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlight">m_highlight</a></strong> &lt;br&gt;Whether to paint this entity with an outline, can be used for selection or just highlighting.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightcolor">m_highlightColor</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightusedepth">m_highlightUseDepth</a></strong> &lt;br&gt;Whether the highlight outline should respect the scene&#39;s depth buffer.</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-modelmatrix">m_modelMatrix</a></strong> &lt;br&gt;Model transformation of the entity.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-opaque">m_opaque</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectable">m_selectable</a></strong> &lt;br&gt;Whether this entity should be written into the selection stencil buffer.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectionid">m_selectionId</a></strong> &lt;br&gt;Id of the object, -1 if not assigned, for selection purposes.</td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-shader">m_shader</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-visible">m_visible</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether this entity should be rendered using order independent transparency, relevant if using a shader that supports wboit.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboitfunc">m_wboitFunc</a></strong> &lt;br&gt;Index of the weight function to be used in wboit.</td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-displaytype">m_displayType</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-entity" tabindex="-1">function Entity <a class="header-anchor" href="#function-entity" aria-label="Permalink to &quot;function Entity&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-entity-1" tabindex="-1">function ~Entity <a class="header-anchor" href="#function-entity-1" aria-label="Permalink to &quot;function ~Entity&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=default</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=default</span></span></code></pre></div><h3 id="function-dispose" tabindex="-1">function dispose <a class="header-anchor" href="#function-dispose" aria-label="Permalink to &quot;function dispose&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-dispose">Vp::GameObject::dispose</a></p><h3 id="function-getdisplaytype" tabindex="-1">function getDisplayType <a class="header-anchor" href="#function-getdisplaytype" aria-label="Permalink to &quot;function getDisplayType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DisplayType</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDisplayType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DisplayType</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDisplayType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-gethighlightcolor" tabindex="-1">function getHighlightColor <a class="header-anchor" href="#function-gethighlightcolor" aria-label="Permalink to &quot;function getHighlightColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHighlightColor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHighlightColor</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-ishighlighted" tabindex="-1">function isHighlighted <a class="header-anchor" href="#function-ishighlighted" aria-label="Permalink to &quot;function isHighlighted&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHighlighted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHighlighted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-onsceneadd" tabindex="-1">function onSceneAdd <a class="header-anchor" href="#function-onsceneadd" aria-label="Permalink to &quot;function onSceneAdd&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneAdd</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneAdd</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Called when the entity is added to a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> to which it has been added</li></ul><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-onsceneadd">Vp::SceneCamera::onSceneAdd</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-onsceneadd">Vp::SceneModel::onSceneAdd</a></p><h3 id="function-onsceneremove" tabindex="-1">function onSceneRemove <a class="header-anchor" href="#function-onsceneremove" aria-label="Permalink to &quot;function onSceneRemove&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSceneRemove</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSceneRemove</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Called when the entity is removed from a scene.</p><p><strong>Parameters</strong>:</p><ul><li><strong>scene</strong> <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> from which it has been removed</li></ul><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-onsceneremove">Vp::SceneCamera::onSceneRemove</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-onsceneremove">Vp::SceneModel::onSceneRemove</a></p><h3 id="function-render" tabindex="-1">function render <a class="header-anchor" href="#function-render" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-render-1" tabindex="-1">function render <a class="header-anchor" href="#function-render-1" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">silhouette</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">silhouette</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-setdisplaytype" tabindex="-1">function setDisplayType <a class="header-anchor" href="#function-setdisplaytype" aria-label="Permalink to &quot;function setDisplayType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setDisplayType</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">DisplayType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setDisplayType</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">DisplayType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-sethighlightcolor" tabindex="-1">function setHighlightColor <a class="header-anchor" href="#function-sethighlightcolor" aria-label="Permalink to &quot;function setHighlightColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setHighlightColor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">highlightColor</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setHighlightColor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">highlightColor</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-sethighlighted" tabindex="-1">function setHighlighted <a class="header-anchor" href="#function-sethighlighted" aria-label="Permalink to &quot;function setHighlighted&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setHighlighted</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">highlight</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setHighlighted</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">highlight</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-update" tabindex="-1">function update <a class="header-anchor" href="#function-update" aria-label="Permalink to &quot;function update&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1FrustumObject.html#function-update">Vp::FrustumObject::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-update">Vp::GameObject::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-update">Vp::SceneCamera::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-update">Vp::SceneModel::update</a></p><h2 id="protected-functions-documentation" tabindex="-1">Protected Functions Documentation <a class="header-anchor" href="#protected-functions-documentation" aria-label="Permalink to &quot;Protected Functions Documentation&quot;">​</a></h2><h3 id="function-render-2" tabindex="-1">function render <a class="header-anchor" href="#function-render-2" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-render-3" tabindex="-1">function render <a class="header-anchor" href="#function-render-3" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">silhouette</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">silhouette</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p>IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1ColoredObject.html#function-render">Vp::ColoredObject::render</a>, <a href="/cpp-api-reference/classes/classVp_1_1FrustumObject.html#function-render">Vp::FrustumObject::render</a>, <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-render">Vp::GameObject::render</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-render">Vp::SceneModel::render</a>, <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#function-render">Vp::TexturedObject::render</a></p><p>Currently there is no error checking and wrongly passed shader type will CAUSE UNDEFINED BEHAVIOUR!</p><p>Using dynamic casts instead might be undesirable (slow) here (this might just be a premature optimalization) Generally the shader passed to this method is the m_shader of this entity. However we need functionality that allows us to change the shader temporarily (like for drawing silhouettes) Because of this the shader can also sometimes be something else, usually some derived type of the one the entity expects. I couldn&#39;t find a way to inform what kinds of shaders an entity is able to use in its render methods. The type of the shader must be the base <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> class and so some kind of casting must occur.</p><p>Another option could be to use some kind of a typeid/enum system that tells us what type a shader is (rather than use dynamic cast). But that approach ignores inheritance which we need and having multiple types of shaders and entity member variable seems very inflexible.</p><p>The true elegant solution probably doesn&#39;t involve inheritance at all and rather uses composition, together with an ECS or something. But it was decided to not dive into that realm and so we are stuck with this seemingly simple but not very flexible inheritance structure.</p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-backfacecull" tabindex="-1">variable m_backFaceCull <a class="header-anchor" href="#variable-m-backfacecull" aria-label="Permalink to &quot;variable m_backFaceCull&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_backFaceCull;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_backFaceCull;</span></span></code></pre></div><h3 id="variable-m-explicittransparencyorder" tabindex="-1">variable m_explicitTransparencyOrder <a class="header-anchor" href="#variable-m-explicittransparencyorder" aria-label="Permalink to &quot;variable m_explicitTransparencyOrder&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_explicitTransparencyOrder;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_explicitTransparencyOrder;</span></span></code></pre></div><p>Explicit order for ordered transparency.</p><h3 id="variable-m-highlight" tabindex="-1">variable m_highlight <a class="header-anchor" href="#variable-m-highlight" aria-label="Permalink to &quot;variable m_highlight&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_highlight;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_highlight;</span></span></code></pre></div><p>Whether to paint this entity with an outline, can be used for selection or just highlighting.</p><h3 id="variable-m-highlightcolor" tabindex="-1">variable m_highlightColor <a class="header-anchor" href="#variable-m-highlightcolor" aria-label="Permalink to &quot;variable m_highlightColor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_highlightColor;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_highlightColor;</span></span></code></pre></div><h3 id="variable-m-highlightusedepth" tabindex="-1">variable m_highlightUseDepth <a class="header-anchor" href="#variable-m-highlightusedepth" aria-label="Permalink to &quot;variable m_highlightUseDepth&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_highlightUseDepth;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_highlightUseDepth;</span></span></code></pre></div><p>Whether the highlight outline should respect the scene&#39;s depth buffer.</p><h3 id="variable-m-modelmatrix" tabindex="-1">variable m_modelMatrix <a class="header-anchor" href="#variable-m-modelmatrix" aria-label="Permalink to &quot;variable m_modelMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_modelMatrix {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_modelMatrix {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Model transformation of the entity.</p><h3 id="variable-m-opaque" tabindex="-1">variable m_opaque <a class="header-anchor" href="#variable-m-opaque" aria-label="Permalink to &quot;variable m_opaque&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_opaque;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_opaque;</span></span></code></pre></div><h3 id="variable-m-selectable" tabindex="-1">variable m_selectable <a class="header-anchor" href="#variable-m-selectable" aria-label="Permalink to &quot;variable m_selectable&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_selectable;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_selectable;</span></span></code></pre></div><p>Whether this entity should be written into the selection stencil buffer.</p><h3 id="variable-m-selectionid" tabindex="-1">variable m_selectionId <a class="header-anchor" href="#variable-m-selectionid" aria-label="Permalink to &quot;variable m_selectionId&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_selectionId {</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_selectionId {</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Id of the object, -1 if not assigned, for selection purposes.</p><h3 id="variable-m-shader" tabindex="-1">variable m_shader <a class="header-anchor" href="#variable-m-shader" aria-label="Permalink to &quot;variable m_shader&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Shader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> m_shader {</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Shader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> m_shader {</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-visible" tabindex="-1">variable m_visible <a class="header-anchor" href="#variable-m-visible" aria-label="Permalink to &quot;variable m_visible&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_visible;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_visible;</span></span></code></pre></div><h3 id="variable-m-wboit" tabindex="-1">variable m_wboit <a class="header-anchor" href="#variable-m-wboit" aria-label="Permalink to &quot;variable m_wboit&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> m_wboit;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> m_wboit;</span></span></code></pre></div><p>Whether this entity should be rendered using order independent transparency, relevant if using a shader that supports wboit.</p><h3 id="variable-m-wboitfunc" tabindex="-1">variable m_wboitFunc <a class="header-anchor" href="#variable-m-wboitfunc" aria-label="Permalink to &quot;variable m_wboitFunc&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_wboitFunc;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_wboitFunc;</span></span></code></pre></div><p>Index of the weight function to be used in wboit.</p><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-displaytype" tabindex="-1">variable m_displayType <a class="header-anchor" href="#variable-m-displaytype" aria-label="Permalink to &quot;variable m_displayType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DisplayType m_displayType {</span><span style="color:#B392F0;">DisplayType</span><span style="color:#E1E4E8;">::Default};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DisplayType m_displayType {</span><span style="color:#6F42C1;">DisplayType</span><span style="color:#24292E;">::Default};</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 12:46:15 +0000</p>`,102),p=[t];function o(c,r,i,d,h,y){return a(),e("div",null,p)}const g=s(l,[["render",o]]);export{u as __pageData,g as default};
