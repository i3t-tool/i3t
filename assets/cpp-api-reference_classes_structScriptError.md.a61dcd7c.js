import{_ as s,o as a,c as t,Q as e}from"./chunks/framework.0f749972.js";const E=JSON.parse('{"title":"ScriptError","description":"","frontmatter":{"title":"ScriptError"},"headers":[],"relativePath":"cpp-api-reference/classes/structScriptError.md","filePath":"cpp-api-reference/classes/structScriptError.md"}'),n={name:"cpp-api-reference/classes/structScriptError.md"},r=e(`<h1 id="scripterror" tabindex="-1">ScriptError <a class="header-anchor" href="#scripterror" aria-label="Permalink to &quot;ScriptError&quot;">​</a></h1><p><code>#include &quot;Scripting/ScriptingModule.h&quot;</code></p><h2 id="public-types" tabindex="-1">Public Types <a class="header-anchor" href="#public-types" aria-label="Permalink to &quot;Public Types&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>enum</td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#enum-type">Type</a></strong> { SyntaxError, RuntimeError}</td></tr></tbody></table><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#function-scripterror">ScriptError</a></strong>(int line, <a href="/cpp-api-reference/classes/structScriptError.html#enum-type">Type</a> type, std::string message)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#function-scripterror">ScriptError</a></strong>(std::string message)</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::optional&lt; int &gt;</td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#variable-line">line</a></strong> &lt;br&gt;Line number from.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#variable-message">message</a></strong></td></tr><tr><td>std::optional&lt; <a href="/cpp-api-reference/classes/structScriptError.html#enum-type">Type</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/structScriptError.html#variable-type">type</a></strong></td></tr></tbody></table><h2 id="public-types-documentation" tabindex="-1">Public Types Documentation <a class="header-anchor" href="#public-types-documentation" aria-label="Permalink to &quot;Public Types Documentation&quot;">​</a></h2><h3 id="enum-type" tabindex="-1">enum Type <a class="header-anchor" href="#enum-type" aria-label="Permalink to &quot;enum Type&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>SyntaxError</td><td></td><td></td></tr><tr><td>RuntimeError</td><td></td><td></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-scripterror" tabindex="-1">function ScriptError <a class="header-anchor" href="#function-scripterror" aria-label="Permalink to &quot;function ScriptError&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScriptError</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> line,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Type type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string message</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScriptError</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> line,</span></span>
<span class="line"><span style="color:#24292E;">    Type type,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string message</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-scripterror-1" tabindex="-1">function ScriptError <a class="header-anchor" href="#function-scripterror-1" aria-label="Permalink to &quot;function ScriptError&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScriptError</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string message</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScriptError</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string message</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-line" tabindex="-1">variable line <a class="header-anchor" href="#variable-line" aria-label="Permalink to &quot;variable line&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> line;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> line;</span></span></code></pre></div><p>Line number from.</p><h3 id="variable-message" tabindex="-1">variable message <a class="header-anchor" href="#variable-message" aria-label="Permalink to &quot;variable message&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string message;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string message;</span></span></code></pre></div><h3 id="variable-type" tabindex="-1">variable type <a class="header-anchor" href="#variable-type" aria-label="Permalink to &quot;variable type&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Type </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Type </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type;</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 13:37:16 +0000</p>`,26),p=[r];function l(o,c,i,d,h,u){return a(),t("div",null,p)}const b=s(n,[["render",l]]);export{E as __pageData,b as default};
