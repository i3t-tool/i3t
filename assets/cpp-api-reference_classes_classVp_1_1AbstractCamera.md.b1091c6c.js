import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Vp::AbstractCamera","description":"","frontmatter":{"title":"Vp::AbstractCamera","summary":"Abstract camera base class."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1AbstractCamera.md","filePath":"cpp-api-reference/classes/classVp_1_1AbstractCamera.md"}'),t={name:"cpp-api-reference/classes/classVp_1_1AbstractCamera.md"},o=e(`<h1 id="vp-abstractcamera" tabindex="-1">Vp::AbstractCamera <a class="header-anchor" href="#vp-abstractcamera" aria-label="Permalink to &quot;Vp::AbstractCamera&quot;">​</a></h1><p>Abstract camera base class. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Viewport/camera/AbstractCamera.h&quot;</code></p><p>Inherited by <a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html">Vp::AbstractOrbitCamera</a>, <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html">Vp::AggregateCamera</a></p><h2 id="public-types" tabindex="-1">Public Types <a class="header-anchor" href="#public-types" aria-label="Permalink to &quot;Public Types&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>enum class</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#enum-viewpoint">Viewpoint</a></strong> { LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK}</td></tr></tbody></table><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-~abstractcamera">~AbstractCamera</a></strong>() =default</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronbox">centerOnBox</a></strong>(glm::vec3 boxMin, glm::vec3 boxMax, bool interpolate)&lt;br&gt;Moves camera so that the specified axis aligned bounding box is visible.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronobjects">centerOnObjects</a></strong>(const std::vector&lt; const <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a> * &gt; objects)&lt;br&gt;Moves camera so that the specified objects are visible.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronscene">centerOnScene</a></strong>(const <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Moves camera so that all objects in the scene are visible.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-centeronselection">centerOnSelection</a></strong>(const <a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Moves camera so that all selected objects in the scene are visible.</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getdirection">getDirection</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getfov">getFov</a></strong>() const</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getheight">getHeight</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getposition">getPosition</a></strong>() const</td></tr><tr><td>virtual glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getprojection">getProjection</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getright">getRight</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getup">getUp</a></strong>() const</td></tr><tr><td>virtual glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getview">getView</a></strong>() const</td></tr><tr><td>virtual int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getwidth">getWidth</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getzfar">getZFar</a></strong>() const</td></tr><tr><td>virtual float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getznear">getZNear</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-interpolate">interpolate</a></strong>(glm::mat4 from, glm::mat4 to)&lt;br&gt;Begin interpolation from one view matrix to another, the interpolation will take m_interpolationPeriod seconds in realtime.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-isinterpolating">isInterpolating</a></strong>(float &amp; progress) const&lt;br&gt;Checks whether interpolation between view matrices is currently happening.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-processinput">processInput</a></strong>(double dt, glm::vec2 mousePos, glm::ivec2 windowSize) =0&lt;br&gt;Updates the internal camera state with user input.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setfov">setFov</a></strong>(float fov)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setzfar">setZFar</a></strong>(float zFar)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-setznear">setZNear</a></strong>(float zNear)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-size">size</a></strong>(int width, int height)&lt;br&gt;Sets the camera resolution in pixels.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-update">update</a></strong>() =0&lt;br&gt;Recalculates the view and projection matrices based on the internal camera state.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-viewpoint">viewpoint</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#enum-viewpoint">AbstractCamera::Viewpoint</a> viewpoint)&lt;br&gt;Moves the camera to the specified viewpoint.</td></tr></tbody></table><h2 id="protected-functions" tabindex="-1">Protected Functions <a class="header-anchor" href="#protected-functions" aria-label="Permalink to &quot;Protected Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; glm::vec3 &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-createboundingboxworldpoints">createBoundingBoxWorldPoints</a></strong>(glm::vec3 boxMin, glm::vec3 boxMax, glm::mat4 modelMatrix)</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-createprojectionmatrix">createProjectionMatrix</a></strong>(bool nonShrinking) const</td></tr></tbody></table><h2 id="protected-attributes" tabindex="-1">Protected Attributes <a class="header-anchor" href="#protected-attributes" aria-label="Permalink to &quot;Protected Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationfrom">interpolationFrom</a></strong></td></tr><tr><td>double</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationperiod">interpolationPeriod</a></strong></td></tr><tr><td>std::chrono::time_point&lt; std::chrono::steady_clock, std::chrono::duration&lt; double &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationstart">interpolationStart</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-interpolationto">interpolationTo</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-direction">m_direction</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-fov">m_fov</a></strong> &lt;br&gt;Vertical field of vision in degrees.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-height">m_height</a></strong> &lt;br&gt;Camera resolution height in pixels.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-position">m_position</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-projection">m_projection</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-right">m_right</a></strong></td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-up">m_up</a></strong></td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-view">m_view</a></strong></td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-width">m_width</a></strong> &lt;br&gt;Camera resolution width in pixels.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-zfar">m_zFar</a></strong> &lt;br&gt;Distance to the far clipping pane.</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#variable-m-znear">m_zNear</a></strong> &lt;br&gt;Distance to the near clipping pane.</td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">AbstractCamera</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vp</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">AbstractCamera</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Abstract camera base class.</p><p>Holds a view matrix and projection information. Also contains further information about its view space (position, direction, up and right vectors)</p><h2 id="public-types-documentation" tabindex="-1">Public Types Documentation <a class="header-anchor" href="#public-types-documentation" aria-label="Permalink to &quot;Public Types Documentation&quot;">​</a></h2><h3 id="enum-viewpoint" tabindex="-1">enum Viewpoint <a class="header-anchor" href="#enum-viewpoint" aria-label="Permalink to &quot;enum Viewpoint&quot;">​</a></h3><table><thead><tr><th>Enumerator</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>LEFT</td><td></td><td></td></tr><tr><td>RIGHT</td><td></td><td></td></tr><tr><td>TOP</td><td></td><td></td></tr><tr><td>BOTTOM</td><td></td><td></td></tr><tr><td>FRONT</td><td></td><td></td></tr><tr><td>BACK</td><td></td><td></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-abstractcamera" tabindex="-1">function ~AbstractCamera <a class="header-anchor" href="#function-abstractcamera" aria-label="Permalink to &quot;function ~AbstractCamera&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#B392F0;">AbstractCamera</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=default</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">AbstractCamera</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=default</span></span></code></pre></div><h3 id="function-centeronbox" tabindex="-1">function centerOnBox <a class="header-anchor" href="#function-centeronbox" aria-label="Permalink to &quot;function centerOnBox&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">centerOnBox</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMin</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMax</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">interpolate</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">centerOnBox</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMin</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMax</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">interpolate</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Moves camera so that the specified axis aligned bounding box is visible.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AbstractOrbitCamera.html#function-centeronbox">Vp::AbstractOrbitCamera::centerOnBox</a>, <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-centeronbox">Vp::AggregateCamera::centerOnBox</a></p><h3 id="function-centeronobjects" tabindex="-1">function centerOnObjects <a class="header-anchor" href="#function-centeronobjects" aria-label="Permalink to &quot;function centerOnObjects&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">centerOnObjects</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">objects</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">centerOnObjects</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">objects</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Moves camera so that the specified objects are visible.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-centeronobjects">Vp::AggregateCamera::centerOnObjects</a></p><h3 id="function-centeronscene" tabindex="-1">function centerOnScene <a class="header-anchor" href="#function-centeronscene" aria-label="Permalink to &quot;function centerOnScene&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">centerOnScene</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">centerOnScene</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Moves camera so that all objects in the scene are visible.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-centeronscene">Vp::AggregateCamera::centerOnScene</a></p><h3 id="function-centeronselection" tabindex="-1">function centerOnSelection <a class="header-anchor" href="#function-centeronselection" aria-label="Permalink to &quot;function centerOnSelection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">centerOnSelection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">centerOnSelection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Moves camera so that all selected objects in the scene are visible.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-centeronselection">Vp::AggregateCamera::centerOnSelection</a></p><h3 id="function-getdirection" tabindex="-1">function getDirection <a class="header-anchor" href="#function-getdirection" aria-label="Permalink to &quot;function getDirection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDirection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDirection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getdirection">Vp::AggregateCamera::getDirection</a></p><h3 id="function-getfov" tabindex="-1">function getFov <a class="header-anchor" href="#function-getfov" aria-label="Permalink to &quot;function getFov&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFov</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFov</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getfov">Vp::AggregateCamera::getFov</a></p><h3 id="function-getheight" tabindex="-1">function getHeight <a class="header-anchor" href="#function-getheight" aria-label="Permalink to &quot;function getHeight&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getheight">Vp::AggregateCamera::getHeight</a></p><h3 id="function-getposition" tabindex="-1">function getPosition <a class="header-anchor" href="#function-getposition" aria-label="Permalink to &quot;function getPosition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPosition</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPosition</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getposition">Vp::AggregateCamera::getPosition</a></p><h3 id="function-getprojection" tabindex="-1">function getProjection <a class="header-anchor" href="#function-getprojection" aria-label="Permalink to &quot;function getProjection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProjection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProjection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Return</strong>: The camera projection matrix</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getprojection">Vp::AggregateCamera::getProjection</a></p><h3 id="function-getright" tabindex="-1">function getRight <a class="header-anchor" href="#function-getright" aria-label="Permalink to &quot;function getRight&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRight</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getright">Vp::AggregateCamera::getRight</a></p><h3 id="function-getup" tabindex="-1">function getUp <a class="header-anchor" href="#function-getup" aria-label="Permalink to &quot;function getUp&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUp</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUp</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getup">Vp::AggregateCamera::getUp</a></p><h3 id="function-getview" tabindex="-1">function getView <a class="header-anchor" href="#function-getview" aria-label="Permalink to &quot;function getView&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getView</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getView</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Return</strong>: The camera view matrix</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getview">Vp::AggregateCamera::getView</a></p><h3 id="function-getwidth" tabindex="-1">function getWidth <a class="header-anchor" href="#function-getwidth" aria-label="Permalink to &quot;function getWidth&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWidth</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWidth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getwidth">Vp::AggregateCamera::getWidth</a></p><h3 id="function-getzfar" tabindex="-1">function getZFar <a class="header-anchor" href="#function-getzfar" aria-label="Permalink to &quot;function getZFar&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getZFar</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getZFar</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getzfar">Vp::AggregateCamera::getZFar</a></p><h3 id="function-getznear" tabindex="-1">function getZNear <a class="header-anchor" href="#function-getznear" aria-label="Permalink to &quot;function getZNear&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getZNear</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getZNear</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-getznear">Vp::AggregateCamera::getZNear</a></p><h3 id="function-interpolate" tabindex="-1">function interpolate <a class="header-anchor" href="#function-interpolate" aria-label="Permalink to &quot;function interpolate&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interpolate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">to</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interpolate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">from</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">to</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Begin interpolation from one view matrix to another, the interpolation will take m_interpolationPeriod seconds in realtime.</p><p><strong>Parameters</strong>:</p><ul><li><strong>from</strong> Start view matrix</li><li><strong>to</strong> End view matrix</li></ul><p>During that period the <a href="/cpp-api-reference/classes/classVp_1_1AbstractCamera.html#function-getview">getView()</a> method will be returning the interpolated view matrix rather than the one actually stored. This interpolation is independent from any internal parameters of the camera and does not modify it.</p><h3 id="function-isinterpolating" tabindex="-1">function isInterpolating <a class="header-anchor" href="#function-isinterpolating" aria-label="Permalink to &quot;function isInterpolating&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isInterpolating</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">progress</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isInterpolating</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">progress</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>Checks whether interpolation between view matrices is currently happening.</p><p><strong>Parameters</strong>:</p><ul><li><strong>progress</strong> Reference to which progress is written.</li></ul><p><strong>Return</strong>: true if interpolating, false otherwise</p><p>If interpolating, the progress argument is set to the current progress in range &lt;0, 1&gt;.</p><h3 id="function-processinput" tabindex="-1">function processInput <a class="header-anchor" href="#function-processinput" aria-label="Permalink to &quot;function processInput&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processInput</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">dt</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">mousePos</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ivec2</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processInput</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">dt</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mousePos</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ivec2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">windowSize</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p>Updates the internal camera state with user input.</p><p><strong>Parameters</strong>:</p><ul><li><strong>mousePos</strong> Mouse position relative to the window size.</li><li><strong>windowSize</strong> The window size in pixels.</li></ul><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-processinput">Vp::AggregateCamera::processInput</a>, <a href="/cpp-api-reference/classes/classVp_1_1OrbitCamera.html#function-processinput">Vp::OrbitCamera::processInput</a>, <a href="/cpp-api-reference/classes/classVp_1_1TrackballCamera.html#function-processinput">Vp::TrackballCamera::processInput</a></p><h3 id="function-setfov" tabindex="-1">function setFov <a class="header-anchor" href="#function-setfov" aria-label="Permalink to &quot;function setFov&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setFov</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fov</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setFov</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fov</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-setfov">Vp::AggregateCamera::setFov</a></p><h3 id="function-setzfar" tabindex="-1">function setZFar <a class="header-anchor" href="#function-setzfar" aria-label="Permalink to &quot;function setZFar&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setZFar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">zFar</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setZFar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">zFar</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-setzfar">Vp::AggregateCamera::setZFar</a></p><h3 id="function-setznear" tabindex="-1">function setZNear <a class="header-anchor" href="#function-setznear" aria-label="Permalink to &quot;function setZNear&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setZNear</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">zNear</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setZNear</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">zNear</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-setznear">Vp::AggregateCamera::setZNear</a></p><h3 id="function-size" tabindex="-1">function size <a class="header-anchor" href="#function-size" aria-label="Permalink to &quot;function size&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">width</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">height</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">width</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Sets the camera resolution in pixels.</p><p><strong>Parameters</strong>:</p><ul><li><strong>width</strong> Screen width in pixels</li><li><strong>height</strong> Screen height in pixels</li></ul><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-size">Vp::AggregateCamera::size</a></p><p>Should be called prior to the Camera::update() method.</p><h3 id="function-update" tabindex="-1">function update <a class="header-anchor" href="#function-update" aria-label="Permalink to &quot;function update&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p>Recalculates the view and projection matrices based on the internal camera state.</p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-update">Vp::AggregateCamera::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1OrbitCamera.html#function-update">Vp::OrbitCamera::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1TrackballCamera.html#function-update">Vp::TrackballCamera::update</a></p><p>Generally this method should build up a new view matrix from scratch using some arbitrary internal variables. From the calculated view matrix, direction, up, right and position information should be updated.</p><h3 id="function-viewpoint" tabindex="-1">function viewpoint <a class="header-anchor" href="#function-viewpoint" aria-label="Permalink to &quot;function viewpoint&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">viewpoint</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">AbstractCamera</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Viewpoint</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">viewpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">viewpoint</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">AbstractCamera</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Viewpoint</span><span style="color:#24292E;"> </span><span style="color:#E36209;">viewpoint</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Moves the camera to the specified viewpoint.</p><p><strong>Parameters</strong>:</p><ul><li><strong>viewpoint</strong></li></ul><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1AggregateCamera.html#function-viewpoint">Vp::AggregateCamera::viewpoint</a>, <a href="/cpp-api-reference/classes/classVp_1_1OrbitCamera.html#function-viewpoint">Vp::OrbitCamera::viewpoint</a>, <a href="/cpp-api-reference/classes/classVp_1_1TrackballCamera.html#function-viewpoint">Vp::TrackballCamera::viewpoint</a></p><p>Subclasses need to provide their own implementations.</p><h2 id="protected-functions-documentation" tabindex="-1">Protected Functions Documentation <a class="header-anchor" href="#protected-functions-documentation" aria-label="Permalink to &quot;Protected Functions Documentation&quot;">​</a></h2><h3 id="function-createboundingboxworldpoints" tabindex="-1">function createBoundingBoxWorldPoints <a class="header-anchor" href="#function-createboundingboxworldpoints" aria-label="Permalink to &quot;function createBoundingBoxWorldPoints&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">createBoundingBoxWorldPoints</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMin</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">boxMax</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">modelMatrix</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">createBoundingBoxWorldPoints</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMin</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;"> </span><span style="color:#E36209;">boxMax</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">modelMatrix</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-createprojectionmatrix" tabindex="-1">function createProjectionMatrix <a class="header-anchor" href="#function-createprojectionmatrix" aria-label="Permalink to &quot;function createProjectionMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProjectionMatrix</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nonShrinking</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProjectionMatrix</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nonShrinking</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><h2 id="protected-attributes-documentation" tabindex="-1">Protected Attributes Documentation <a class="header-anchor" href="#protected-attributes-documentation" aria-label="Permalink to &quot;Protected Attributes Documentation&quot;">​</a></h2><h3 id="variable-interpolationfrom" tabindex="-1">variable interpolationFrom <a class="header-anchor" href="#variable-interpolationfrom" aria-label="Permalink to &quot;variable interpolationFrom&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 interpolationFrom;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 interpolationFrom;</span></span></code></pre></div><h3 id="variable-interpolationperiod" tabindex="-1">variable interpolationPeriod <a class="header-anchor" href="#variable-interpolationperiod" aria-label="Permalink to &quot;variable interpolationPeriod&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> interpolationPeriod {</span><span style="color:#79B8FF;">0.14</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> interpolationPeriod {</span><span style="color:#005CC5;">0.14</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-interpolationstart" tabindex="-1">variable interpolationStart <a class="header-anchor" href="#variable-interpolationstart" aria-label="Permalink to &quot;variable interpolationStart&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">chrono</span><span style="color:#E1E4E8;">::time_point</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">chrono</span><span style="color:#E1E4E8;">::steady_clock, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">chrono</span><span style="color:#E1E4E8;">::duration</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> interpolationStart {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">chrono</span><span style="color:#24292E;">::time_point</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">chrono</span><span style="color:#24292E;">::steady_clock, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">chrono</span><span style="color:#24292E;">::duration</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> interpolationStart {};</span></span></code></pre></div><h3 id="variable-interpolationto" tabindex="-1">variable interpolationTo <a class="header-anchor" href="#variable-interpolationto" aria-label="Permalink to &quot;variable interpolationTo&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 interpolationTo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 interpolationTo;</span></span></code></pre></div><h3 id="variable-m-direction" tabindex="-1">variable m_direction <a class="header-anchor" href="#variable-m-direction" aria-label="Permalink to &quot;variable m_direction&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-fov" tabindex="-1">variable m_fov <a class="header-anchor" href="#variable-m-fov" aria-label="Permalink to &quot;variable m_fov&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> m_fov </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">90.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> m_fov </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">90.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Vertical field of vision in degrees.</p><h3 id="variable-m-height" tabindex="-1">variable m_height <a class="header-anchor" href="#variable-m-height" aria-label="Permalink to &quot;variable m_height&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_height {</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_height {</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Camera resolution height in pixels.</p><h3 id="variable-m-position" tabindex="-1">variable m_position <a class="header-anchor" href="#variable-m-position" aria-label="Permalink to &quot;variable m_position&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_position </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-projection" tabindex="-1">variable m_projection <a class="header-anchor" href="#variable-m-projection" aria-label="Permalink to &quot;variable m_projection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_projection {</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_projection {</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-right" tabindex="-1">variable m_right <a class="header-anchor" href="#variable-m-right" aria-label="Permalink to &quot;variable m_right&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-up" tabindex="-1">variable m_up <a class="header-anchor" href="#variable-m-up" aria-label="Permalink to &quot;variable m_up&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 m_up </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 m_up </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="variable-m-view" tabindex="-1">variable m_view <a class="header-anchor" href="#variable-m-view" aria-label="Permalink to &quot;variable m_view&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 m_view {</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 m_view {</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="variable-m-width" tabindex="-1">variable m_width <a class="header-anchor" href="#variable-m-width" aria-label="Permalink to &quot;variable m_width&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m_width {</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_width {</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">};</span></span></code></pre></div><p>Camera resolution width in pixels.</p><h3 id="variable-m-zfar" tabindex="-1">variable m_zFar <a class="header-anchor" href="#variable-m-zfar" aria-label="Permalink to &quot;variable m_zFar&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> m_zFar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">270.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> m_zFar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">270.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Distance to the far clipping pane.</p><h3 id="variable-m-znear" tabindex="-1">variable m_zNear <a class="header-anchor" href="#variable-m-znear" aria-label="Permalink to &quot;variable m_zNear&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> m_zNear </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> m_zNear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Distance to the near clipping pane.</p><hr><p>Updated on 2024-10-15 at 20:41:58 +0000</p>`,163),p=[o];function l(r,c,i,d,y,E){return a(),n("div",null,p)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
