import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.0f749972.js";const m=JSON.parse('{"title":"Core::TransformImpl< ETransformType::Quat >","description":"","frontmatter":{"title":"Core::TransformImpl&lt; ETransformType::Quat &gt;","summary":"Quaternion class Quaternion represents the matrix, crated from quaternion."},"headers":[],"relativePath":"cpp-api-reference/classes/classCore_1_1TransformImpl_3_01ETransformType_1_1Quat_01_4.md","filePath":"cpp-api-reference/classes/classCore_1_1TransformImpl_3_01ETransformType_1_1Quat_01_4.md"}'),r={name:"cpp-api-reference/classes/classCore_1_1TransformImpl_3_01ETransformType_1_1Quat_01_4.md"},n=a(`<h1 id="core-transformimpl-etransformtype-quat" tabindex="-1">Core::TransformImpl&lt; ETransformType::Quat &gt; <a class="header-anchor" href="#core-transformimpl-etransformtype-quat" aria-label="Permalink to &quot;Core::TransformImpl&amp;lt; ETransformType::Quat &amp;gt;&quot;">​</a></h1><p>Quaternion class Quaternion represents the matrix, crated from quaternion. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Core/Nodes/TransformImpl.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classcore_1_1transform.html">Core::Transform</a>, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a>, std::enable_shared_from_this&lt; Node &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-transformimpl">TransformImpl</a></strong>()</td></tr><tr><td>const glm::quat &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-getnormalizedquat">getNormalizedQuat</a></strong>() const</td></tr><tr><td>const glm::quat &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-getquat">getQuat</a></strong>() const&lt;br&gt;returns the quaternion or normalized quaternion when synergies</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-initdefaults">initDefaults</a></strong>() override&lt;br&gt;Init the (non-zero) second level parameters (from LOD::SetValues) via their initDefaults and update the internal transformation matrix).</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-isvalid">isValid</a></strong>() const override&lt;br&gt;Is the quaternion normalized?</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-resetmatrixfromdefaults">resetMatrixFromDefaults</a></strong>() override&lt;br&gt;Update matrix to match the default &quot;quat&quot; value.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-setdefaultvaluewithsynergies">setDefaultValueWithSynergies</a></strong>(const std::string &amp; name, <a href="/cpp-api-reference/classes/classcore_1_1data.html">Core::Data</a> &amp;&amp; val) override&lt;br&gt;set new quat <em>val</em>, and normalize the default &quot;quat&quot; if synergies enabled!</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structcore_1_1valuesetresult.html">ValueSetResult</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-setvalue">setValue</a></strong>(const glm::mat4 &amp; mat) override&lt;br&gt;Lock non-editable values.</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structcore_1_1valuesetresult.html">ValueSetResult</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-setvalue">setValue</a></strong>(const glm::quat &amp; q) override</td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classcore_1_1transform.html">Core::Transform</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-transform">Transform</a></strong>(const <a href="/cpp-api-reference/classes/structcore_1_1transformoperation.html">TransformOperation</a> &amp; transformType)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-createdefaults">createDefaults</a></strong>()&lt;br&gt;Prepare storage for second level parameters (std::map with values)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-disablesynergies">disableSynergies</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-enablesynergies">enableSynergies</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-free">free</a></strong>()</td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getactivepart">getActivePart</a></strong>() const</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getcurrentindex">getCurrentIndex</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getcurrentsequence">getCurrentSequence</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/structcore_1_1transformoperation.html#using-valuemap">TransformOperation::ValueMap</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getdefaulttypes">getDefaultTypes</a></strong>() const</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getdefaultvalue">getDefaultValue</a></strong>(const std::string &amp; name) const&lt;br&gt;Get the value which the transform can hold (current value stored in the transformation).</td></tr><tr><td>DefaultValues &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getdefaultvalues">getDefaultValues</a></strong>()</td></tr><tr><td>const DefaultValues &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getsaveddefaults">getSavedDefaults</a></strong>() const</td></tr><tr><td>const glm::mat4 &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getsavedvalue">getSavedValue</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#enum-evaluestate">EValueState</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getvaluestate">getValueState</a></strong>(glm::ivec2 coords) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-hasmenusynergies">hasMenuSynergies</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-hassavedvalue">hasSavedValue</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-hassynergies">hasSynergies</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-isinsequence">isInSequence</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-islocked">isLocked</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-lock">lock</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-notifysequence">notifySequence</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-nullsequence">nullSequence</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/structcore_1_1transformoperation.html">TransformOperation</a> *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-properties">properties</a></strong>() const</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-reloadvalue">reloadValue</a></strong>()&lt;br&gt;Restore saved values if they exist.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-savevalue">saveValue</a></strong>()&lt;br&gt;Save current values of the transformation for future reloading.</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;<a href="/cpp-api-reference/classes/structcore_1_1valuesetresult.html">ValueSetResult</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setdefaultvalue">setDefaultValue</a></strong>(const std::string &amp; name, T &amp;&amp; val)&lt;br&gt;Setting of one second level parameter defining the transformation (in LOD::SetValues).</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setdefaultvaluenoupdate">setDefaultValueNoUpdate</a></strong>(const std::string &amp; name, T &amp;&amp; val)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setdefaultvalues">setDefaultValues</a></strong>(const DefaultValues &amp; values)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setsavedvalue">setSavedValue</a></strong>(const glm::mat4 &amp; values)&lt;br&gt;Save the value, read from YAML.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setsequence">setSequence</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * s, int index)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-unlock">unlock</a></strong>()</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classcore_1_1transform.html">Core::Transform</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-cansetvalue">canSetValue</a></strong>(const <a href="/cpp-api-reference/namespaces/namespacecore.html#using-valuemask">ValueMask</a> &amp; mask, glm::ivec2 coords, float value)</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-getdefaultvaluemut">getDefaultValueMut</a></strong>(const std::string &amp; name)</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classcore_1_1transform.html">Core::Transform</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>DefaultValues</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#variable-m-defaultvalues">m_defaultValues</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#variable-m-hasmenusynergies">m_hasMenuSynergies</a></strong> &lt;br&gt;True for transformations, that support synergies, such as scale, eulerAngleXYZ, ortho, frustum, and quaternion ONLY.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#variable-m-hassynergies">m_hasSynergies</a></strong> &lt;br&gt;applicable for: uniform scale, eulerAngleXYZ, ortho, frustum, and quat and quaternion.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#variable-m-islocked">m_isLocked</a></strong> &lt;br&gt;Edit of the matrix is limited to editable values - defined in <a href="./.html">Operations.h</a> g_transforms.</td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classcore_1_1transform.html">Core::Transform</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#friend-graphmanager">GraphManager</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#friend-matrixtracker">MatrixTracker</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#friend-sequence">Sequence</a></strong></td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1transform.html#friend-setactivepart">setActivePart</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt; node, float value)</td></tr></tbody></table><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-adddeletecallback">addDeleteCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> <em>)&gt; callback)&lt;br&gt; The callback parameters: Node</em> = node that has been deleted</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-addplugcallback">addPlugCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, size_t, size_t)&gt; callback)&lt;br&gt;Registers a callback that gets called when the node&#39;s output pins get plugged in.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-addunplugcallback">addUnplugCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, size_t, size_t)&gt; callback)&lt;br&gt;Registers a callback that gets called when the node&#39;s input pins get unplugged.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-addupdatecallback">addUpdateCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *)&gt; callback)&lt;br&gt;Registers a callback that gets called on any <a href="./.html">updateValues()</a> call.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-appendchildnode">appendChildNode</a></strong>(<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt; node)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-areallinputsplugged">areAllInputsPlugged</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-areallinputsunplugged">areAllInputsUnplugged</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-areinputsplugged">areInputsPlugged</a></strong>(int numInputs)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;<a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; T &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-as">as</a></strong>()</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-data">data</a></strong>(size_t index =0)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-finalize">finalize</a></strong>()&lt;br&gt;Prepares node for its destruction, after that the destructor can be called.</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getdata">getData</a></strong>(size_t index =0)&lt;br&gt;Get <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> contents, read only.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#typedef-id">ID</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getid">getId</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getinput">getInput</a></strong>(size_t i)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getinputpins">getInputPins</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getinternaldata">getInternalData</a></strong>(size_t index =0)&lt;br&gt;Get data storage for read and write purposes.</td></tr><tr><td>const char *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getlabel">getLabel</a></strong>() const</td></tr><tr><td>const <a href="/cpp-api-reference/classes/structcore_1_1operation.html">Operation</a> *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getoperation">getOperation</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getoutput">getOutput</a></strong>(size_t i)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getoutputpins">getOutputPins</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getowner">getOwner</a></strong>() const&lt;br&gt;Get direct owner of this node.</td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getptr">getPtr</a></strong>()&lt;br&gt;Get reference to this node instance.</td></tr><tr><td><a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getrootowner">getRootOwner</a></strong>()&lt;br&gt;Get the topmost owner of this node.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getsignature">getSignature</a></strong>()&lt;br&gt;&quot;{node type} #{node ID}&quot;</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#enum-evaluestate">EValueState</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getstate">getState</a></strong>(size_t pinIndex =0)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-init">init</a></strong>()&lt;br&gt;Initialize node id, inputs, and outputs according to the preset node type.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-notifyowner">notifyOwner</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-oninit">onInit</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-operator!=">operator!=</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &amp; other) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-operator==">operator==</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &amp; other) const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#enum-enodeplugresult">ENodePlugResult</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-plug">plug</a></strong>(const <a href="/cpp-api-reference/files/types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> &gt; &amp; childNode, unsigned fromIndex, unsigned toIndex)&lt;br&gt;Connect this (parent) node output to the <code>childNode</code> input.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-pulse">pulse</a></strong>(size_t index)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-receivesignal">receiveSignal</a></strong>(int inputIndex)&lt;br&gt;Implements the operator reaction to the change of its <em>inputIndex</em> input.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-setowner">setOwner</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * owner)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-spreadsignal">spreadSignal</a></strong>()&lt;br&gt;Spread signal to all outputs.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-spreadsignal">spreadSignal</a></strong>(size_t outIndex)&lt;br&gt;Spread signal to the selected output <em>outIndex</em> only.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-updatevalues">updateValues</a></strong>(int inputIndex =0)&lt;br&gt;Computes new values of outputs based on inputs.</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classcore_1_1datamap.html">DataMap</a> *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getdatamap">getDataMap</a></strong>()</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classcore_1_1datamap.html">DataMap</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-getdatamapref">getDataMapRef</a></strong>()</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-node">Node</a></strong>(const <a href="/cpp-api-reference/classes/structcore_1_1operation.html">Operation</a> * operation)&lt;br&gt;<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> is never constructed directory.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-~node">~Node</a></strong>()&lt;br&gt;Delete node.</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespacecore.html#enum-enodeplugresult">ENodePlugResult</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-isplugcorrect">isPlugCorrect</a></strong>(const <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &amp; input, const <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &amp; output)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-onunpluginput">onUnplugInput</a></strong>(size_t index)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-setinternalvalue">setInternalValue</a></strong>(const T &amp; value, size_t index =0)&lt;br&gt;Sets the node value without validation.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-setinternalvalue">setInternalValue</a></strong>(float value, glm::ivec2 coordinates, size_t index =0)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-shouldpulse">shouldPulse</a></strong>(size_t inputIndex, size_t updatedInputIndex)&lt;br&gt;Tests if the <code>updatedInputIndex</code> should be pulsed.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-triggerdeletecallback">triggerDeleteCallback</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * node)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-triggerplugcallback">triggerPlugCallback</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * fromNode, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * toNode, size_t fromIndex, size_t toIndex)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-triggerunplugcallback">triggerUnplugCallback</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * fromNode, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * toNode, size_t fromIndex, size_t toIndex)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#function-triggerupdatecallback">triggerUpdateCallback</a></strong>(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * node)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; <a href="/cpp-api-reference/namespaces/namespacecore.html#enum-evaluestate">EValueState</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-operatorstate">m_OperatorState</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-children">m_children</a></strong> &lt;br&gt;Nested nodes.</td></tr><tr><td>std::list&lt; std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *)&gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-deletecallbacks">m_deleteCallbacks</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#typedef-id">ID</a></td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-id">m_id</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-inputs">m_inputs</a></strong> &lt;br&gt;Inputs of the box: Input tabs with glyphs.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1data.html">Data</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-internaldata">m_internalData</a></strong> &lt;br&gt;Results of operations.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespacecore.html#enum-enodeplugresult">ENodePlugResult</a>(*)(const Pin &amp;input, const Pin &amp;output)</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-isplugcorrectfn">m_isPlugCorrectFn</a></strong> &lt;br&gt;Used by <a href="/cpp-api-reference/classes/classcore_1_1camera.html">Camera</a>.</td></tr><tr><td>const <a href="/cpp-api-reference/classes/structcore_1_1operation.html">Operation</a> *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-operation">m_operation</a></strong> &lt;br&gt;<a href="./.html">Operator</a> node properties.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classcore_1_1pin.html">Pin</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-outputs">m_outputs</a></strong> &lt;br&gt;Outputs of the box: output tabs with glyphs.</td></tr><tr><td><a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-owner">m_owner</a></strong> &lt;br&gt;Owner of the node, used in complex type of nodes, such as sequence or camera.</td></tr><tr><td>std::list&lt; std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, size_t, size_t)&gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-plugcallbacks">m_plugCallbacks</a></strong></td></tr><tr><td>std::list&lt; std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, <a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *, size_t, size_t)&gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-unplugcallbacks">m_unplugCallbacks</a></strong></td></tr><tr><td>std::list&lt; std::function&lt; void(<a href="/cpp-api-reference/classes/classcore_1_1node.html">Node</a> *)&gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#variable-m-updatecallbacks">m_updateCallbacks</a></strong></td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classcore_1_1node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#friend-graphmanager">GraphManager</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classcore_1_1node.html#friend-pin">Pin</a></strong></td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TransformImpl</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">ETransformType</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Quat</span><span style="color:#E1E4E8;"> &gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TransformImpl</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">ETransformType</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Quat</span><span style="color:#24292E;"> &gt;;</span></span></code></pre></div><p>Quaternion class Quaternion represents the matrix, crated from quaternion.</p><p>The inner matrix is always created from a normalized quaternion, so it should always represent a rotation. The default value (LOD SetValue) is either a normalized quaternion (when set with synergies enabled), or a not-normalized quaternion (when set with synergies disabled). <a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-isvalid">isValid()</a> checks the normality of the default quaternion (and matrix determinant, which should be 1 all the times).</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-transformimpl" tabindex="-1">function TransformImpl <a class="header-anchor" href="#function-transformimpl" aria-label="Permalink to &quot;function TransformImpl&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransformImpl</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransformImpl</span><span style="color:#24292E;">()</span></span></code></pre></div><p>&gt; PF: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-enablesynergies">enableSynergies()</a>; means &quot;normalize&quot; the set &gt; &gt;</p><p>quaternion</p><h3 id="function-getnormalizedquat" tabindex="-1">function getNormalizedQuat <a class="header-anchor" href="#function-getnormalizedquat" aria-label="Permalink to &quot;function getNormalizedQuat&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">quat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNormalizedQuat</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">quat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNormalizedQuat</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-getquat" tabindex="-1">function getQuat <a class="header-anchor" href="#function-getquat" aria-label="Permalink to &quot;function getQuat&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">quat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getQuat</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">quat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getQuat</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><p>returns the quaternion or normalized quaternion when synergies</p><p><strong>Return</strong>: quaternion</p><h3 id="function-initdefaults" tabindex="-1">function initDefaults <a class="header-anchor" href="#function-initdefaults" aria-label="Permalink to &quot;function initDefaults&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initDefaults</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initDefaults</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Init the (non-zero) second level parameters (from LOD::SetValues) via their initDefaults and update the internal transformation matrix).</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-initdefaults">Core::Transform::initDefaults</a></p><p>It is overriden in all transforms with their default values. This version is for nodes without the default value (now only the Free node)</p><ul><li>It resets the matrix to identity.</li><li>this is done in free-&gt;<a href="/cpp-api-reference/classes/classcore_1_1transformimpl_3_01etransformtype_1_1quat_01_4.html#function-resetmatrixfromdefaults">resetMatrixFromDefaults()</a></li></ul><h3 id="function-isvalid" tabindex="-1">function isValid <a class="header-anchor" href="#function-isvalid" aria-label="Permalink to &quot;function isValid&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isValid</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isValid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Is the quaternion normalized?</p><p><strong>Return</strong>: true if the default &quot;quat&quot; is of unit length</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-isvalid">Core::Transform::isValid</a></p><h3 id="function-resetmatrixfromdefaults" tabindex="-1">function resetMatrixFromDefaults <a class="header-anchor" href="#function-resetmatrixfromdefaults" aria-label="Permalink to &quot;function resetMatrixFromDefaults&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resetMatrixFromDefaults</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resetMatrixFromDefaults</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Update matrix to match the default &quot;quat&quot; value.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-resetmatrixfromdefaults">Core::Transform::resetMatrixFromDefaults</a></p><h3 id="function-setdefaultvaluewithsynergies" tabindex="-1">function setDefaultValueWithSynergies <a class="header-anchor" href="#function-setdefaultvaluewithsynergies" aria-label="Permalink to &quot;function setDefaultValueWithSynergies&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setDefaultValueWithSynergies</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setDefaultValueWithSynergies</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>set new quat <em>val</em>, and normalize the default &quot;quat&quot; if synergies enabled!</p><p><strong>Parameters</strong>:</p><ul><li><strong>name</strong> quat</li><li><strong>val</strong> new quat value</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setdefaultvaluewithsynergies">Core::Transform::setDefaultValueWithSynergies</a></p><p>todo do it per partes</p><h3 id="function-setvalue" tabindex="-1">function setValue <a class="header-anchor" href="#function-setvalue" aria-label="Permalink to &quot;function setValue&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValueSetResult</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">mat</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValueSetResult</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mat</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Lock non-editable values.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-setvalue">Core::Transform::setValue</a></p><p>And enable synergies, if exist, i.e., <a href="/cpp-api-reference/classes/classcore_1_1transform.html#function-hassynergies">hasSynergies()</a> == true</p><h3 id="function-setvalue-1" tabindex="-1">function setValue <a class="header-anchor" href="#function-setvalue-1" aria-label="Permalink to &quot;function setValue&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValueSetResult</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">quat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">q</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValueSetResult</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">quat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">q</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classcore_1_1node.html#function-setvalue">Core::Node::setValue</a></p><hr><p>Updated on 2024-03-16 at 18:59:45 +0000</p>`,72),o=[n];function l(c,p,i,d,f,u){return t(),s("div",null,o)}const g=e(r,[["render",l]]);export{m as __pageData,g as default};
