import{_ as a,o as e,c as t,Q as s}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Core::Operation","description":"","frontmatter":{"title":"Core::Operation","summary":"Description of each graph node (operation enum, default label, input and output pin names and types)"},"headers":[],"relativePath":"cpp-api-reference/classes/structCore_1_1Operation.md","filePath":"cpp-api-reference/classes/structCore_1_1Operation.md"}'),p={name:"cpp-api-reference/classes/structCore_1_1Operation.md"},n=s('<h1 id="core-operation" tabindex="-1">Core::Operation <a class="header-anchor" href="#core-operation" aria-label="Permalink to &quot;Core::Operation&quot;">​</a></h1><p>Description of each graph node (operation enum, default label, input and output pin names and types)</p><p><code>#include &quot;Core/Nodes/Operations.h&quot;</code></p><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#using-pinnames">PinNames</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-defaultinputnames">defaultInputNames</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-defaultlabel">defaultLabel</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#using-pinnames">PinNames</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-defaultoutputnames">defaultOutputNames</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-defaulttagtext">defaultTagText</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-ignorecycledetection">ignoreCycleDetection</a></strong> &lt;br&gt;used in isPlugCorrect()</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#using-pingroup">PinGroup</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-inputtypes">inputTypes</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-isconstructor">isConstructor</a></strong> &lt;br&gt;Constructor is an operator that can generate value (such as float, vec3, vec4, mat4, pulse,...).</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-keyword">keyWord</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#using-pingroup">PinGroup</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1Operation.html#variable-outputtypes">outputTypes</a></strong></td></tr></tbody></table><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-defaultinputnames" tabindex="-1">variable defaultInputNames <a class="header-anchor" href="#variable-defaultinputnames" aria-label="Permalink to &quot;variable defaultInputNames&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PinNames defaultInputNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DEFAULT_NAMES;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PinNames defaultInputNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DEFAULT_NAMES;</span></span></code></pre></div><h3 id="variable-defaultlabel" tabindex="-1">variable defaultLabel <a class="header-anchor" href="#variable-defaultlabel" aria-label="Permalink to &quot;variable defaultLabel&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string defaultLabel;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string defaultLabel;</span></span></code></pre></div><h3 id="variable-defaultoutputnames" tabindex="-1">variable defaultOutputNames <a class="header-anchor" href="#variable-defaultoutputnames" aria-label="Permalink to &quot;variable defaultOutputNames&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PinNames defaultOutputNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DEFAULT_NAMES;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PinNames defaultOutputNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DEFAULT_NAMES;</span></span></code></pre></div><h3 id="variable-defaulttagtext" tabindex="-1">variable defaultTagText <a class="header-anchor" href="#variable-defaulttagtext" aria-label="Permalink to &quot;variable defaultTagText&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string defaultTagText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NO_TAG;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string defaultTagText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NO_TAG;</span></span></code></pre></div><h3 id="variable-ignorecycledetection" tabindex="-1">variable ignoreCycleDetection <a class="header-anchor" href="#variable-ignorecycledetection" aria-label="Permalink to &quot;variable ignoreCycleDetection&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> ignoreCycleDetection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> ignoreCycleDetection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><p>used in isPlugCorrect()</p><h3 id="variable-inputtypes" tabindex="-1">variable inputTypes <a class="header-anchor" href="#variable-inputtypes" aria-label="Permalink to &quot;variable inputTypes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PinGroup inputTypes;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PinGroup inputTypes;</span></span></code></pre></div><h3 id="variable-isconstructor" tabindex="-1">variable isConstructor <a class="header-anchor" href="#variable-isconstructor" aria-label="Permalink to &quot;variable isConstructor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> isConstructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> isConstructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Constructor is an operator that can generate value (such as float, vec3, vec4, mat4, pulse,...).</p><p>Its behaviour depends on whether its single input is connected.</p><ul><li>For a connected input, the value is taken from the incoming wire.</li><li>For an unconnected input, the value is editable.</li></ul><p>Value</p><ul><li>false - a standard operator node processes only the connected pins and has no <a href="/cpp-api-reference/namespaces/namespaceGUI.html">GUI</a> editable values</li><li>true - not connected inputs are editable</li></ul><h3 id="variable-keyword" tabindex="-1">variable keyWord <a class="header-anchor" href="#variable-keyword" aria-label="Permalink to &quot;variable keyWord&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string keyWord;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string keyWord;</span></span></code></pre></div><h3 id="variable-outputtypes" tabindex="-1">variable outputTypes <a class="header-anchor" href="#variable-outputtypes" aria-label="Permalink to &quot;variable outputTypes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PinGroup outputTypes;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PinGroup outputTypes;</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 12:46:08 +0000</p>',32),l=[n];function o(r,i,c,d,u,h){return e(),t("div",null,l)}const y=a(p,[["render",o]]);export{g as __pageData,y as default};
