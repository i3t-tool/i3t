import{_ as e,o as t,c as a,Q as r}from"./chunks/framework.0f749972.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"lua-api-reference/common.md","filePath":"lua-api-reference/common.md"}'),o={name:"lua-api-reference/common.md"},n=r('<h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><h3 id="vec2" tabindex="-1"><code>Vec2</code> <a class="header-anchor" href="#vec2" aria-label="Permalink to &quot;`Vec2`&quot;">​</a></h3><p>Mapped <code>ImVec2</code> type to Lua.</p><h4 id="constructor-new-x-number-y-number" tabindex="-1">constructor <code>new(x: number, y: number)</code> <a class="header-anchor" href="#constructor-new-x-number-y-number" aria-label="Permalink to &quot;constructor `new(x: number, y: number)`&quot;">​</a></h4><h4 id="attribute-x-number" tabindex="-1">attribute <code>x: number</code> <a class="header-anchor" href="#attribute-x-number" aria-label="Permalink to &quot;attribute `x: number`&quot;">​</a></h4><h4 id="attribute-y-number" tabindex="-1">attribute <code>y: number</code> <a class="header-anchor" href="#attribute-y-number" aria-label="Permalink to &quot;attribute `y: number`&quot;">​</a></h4><h4 id="metamethod-tostring-string" tabindex="-1">metamethod <code>__tostring(): string</code> <a class="header-anchor" href="#metamethod-tostring-string" aria-label="Permalink to &quot;metamethod `__tostring(): string`&quot;">​</a></h4><p>Returns a string representation of the vector in the form <code>[x, y]</code>.</p><h3 id="vec3" tabindex="-1"><code>Vec3</code> <a class="header-anchor" href="#vec3" aria-label="Permalink to &quot;`Vec3`&quot;">​</a></h3><p>Mapped <code>glm::vec3</code> type to Lua.</p><h4 id="constructor-new-x-number-y-number-z-number" tabindex="-1">constructor <code>new(x: number, y: number, z: number)</code> <a class="header-anchor" href="#constructor-new-x-number-y-number-z-number" aria-label="Permalink to &quot;constructor `new(x: number, y: number, z: number)`&quot;">​</a></h4><h4 id="attribute-x-number-1" tabindex="-1">attribute <code>x: number</code> <a class="header-anchor" href="#attribute-x-number-1" aria-label="Permalink to &quot;attribute `x: number`&quot;">​</a></h4><h4 id="attribute-y-number-1" tabindex="-1">attribute <code>y: number</code> <a class="header-anchor" href="#attribute-y-number-1" aria-label="Permalink to &quot;attribute `y: number`&quot;">​</a></h4><h4 id="attribute-z-number" tabindex="-1">attribute <code>z: number</code> <a class="header-anchor" href="#attribute-z-number" aria-label="Permalink to &quot;attribute `z: number`&quot;">​</a></h4><h4 id="metamethod-tostring-string-1" tabindex="-1">metamethod <code>__tostring(): string</code> <a class="header-anchor" href="#metamethod-tostring-string-1" aria-label="Permalink to &quot;metamethod `__tostring(): string`&quot;">​</a></h4><p>Returns a string representation of the vector in the form <code>[x, y, z]</code>.</p><h3 id="vec4" tabindex="-1"><code>Vec4</code> <a class="header-anchor" href="#vec4" aria-label="Permalink to &quot;`Vec4`&quot;">​</a></h3><p>Mapped <code>glm::vec4</code> type to Lua.</p><h4 id="constructor-new-x-number-y-number-z-number-w-number" tabindex="-1">constructor <code>new(x: number, y: number, z: number, w: number)</code> <a class="header-anchor" href="#constructor-new-x-number-y-number-z-number-w-number" aria-label="Permalink to &quot;constructor `new(x: number, y: number, z: number, w: number)`&quot;">​</a></h4><h4 id="attribute-x-number-2" tabindex="-1">attribute <code>x: number</code> <a class="header-anchor" href="#attribute-x-number-2" aria-label="Permalink to &quot;attribute `x: number`&quot;">​</a></h4><h4 id="attribute-y-number-2" tabindex="-1">attribute <code>y: number</code> <a class="header-anchor" href="#attribute-y-number-2" aria-label="Permalink to &quot;attribute `y: number`&quot;">​</a></h4><h4 id="attribute-z-number-1" tabindex="-1">attribute <code>z: number</code> <a class="header-anchor" href="#attribute-z-number-1" aria-label="Permalink to &quot;attribute `z: number`&quot;">​</a></h4><h4 id="attribute-w-number" tabindex="-1">attribute <code>w: number</code> <a class="header-anchor" href="#attribute-w-number" aria-label="Permalink to &quot;attribute `w: number`&quot;">​</a></h4><h4 id="metamethod-tostring-string-2" tabindex="-1">metamethod <code>__tostring(): string</code> <a class="header-anchor" href="#metamethod-tostring-string-2" aria-label="Permalink to &quot;metamethod `__tostring(): string`&quot;">​</a></h4><p>Returns a string representation of the vector in the form <code>[x, y, z, w]</code>.</p><h3 id="mat4" tabindex="-1"><code>Mat4</code> <a class="header-anchor" href="#mat4" aria-label="Permalink to &quot;`Mat4`&quot;">​</a></h3><p>Mapped <code>glm::mat4</code> type to Lua.</p><h4 id="constructor-new-col1-vec4-col2-vec4-col3-vec4-col4-vec4" tabindex="-1">constructor <code>new(col1: Vec4, col2: Vec4, col3: Vec4, col4: Vec4)</code> <a class="header-anchor" href="#constructor-new-col1-vec4-col2-vec4-col3-vec4-col4-vec4" aria-label="Permalink to &quot;constructor `new(col1: Vec4, col2: Vec4, col3: Vec4, col4: Vec4)`&quot;">​</a></h4><h4 id="attribute-x-vec4" tabindex="-1">attribute <code>x: Vec4</code> <a class="header-anchor" href="#attribute-x-vec4" aria-label="Permalink to &quot;attribute `x: Vec4`&quot;">​</a></h4><h4 id="attribute-y-vec4" tabindex="-1">attribute <code>y: Vec4</code> <a class="header-anchor" href="#attribute-y-vec4" aria-label="Permalink to &quot;attribute `y: Vec4`&quot;">​</a></h4><h4 id="attribute-z-vec4" tabindex="-1">attribute <code>z: Vec4</code> <a class="header-anchor" href="#attribute-z-vec4" aria-label="Permalink to &quot;attribute `z: Vec4`&quot;">​</a></h4><h4 id="attribute-w-vec4" tabindex="-1">attribute <code>w: Vec4</code> <a class="header-anchor" href="#attribute-w-vec4" aria-label="Permalink to &quot;attribute `w: Vec4`&quot;">​</a></h4><h4 id="metamethod-tostring-string-3" tabindex="-1">metamethod <code>__tostring(): string</code> <a class="header-anchor" href="#metamethod-tostring-string-3" aria-label="Permalink to &quot;metamethod `__tostring(): string`&quot;">​</a></h4><p>Returns a string representation of the vector in the form <code>[[col1], [col2], [col3], [col4]]</code>.</p><h3 id="timer" tabindex="-1"><code>Timer</code> <a class="header-anchor" href="#timer" aria-label="Permalink to &quot;`Timer`&quot;">​</a></h3><p>Utility class to schedule functions to be called after a delay. Can be created with <code>I3T.set_timer</code> or <code>I3T.set_timeout</code> functions. See <code>Timer</code> class in C++ code for more details.</p><h3 id="i3t-api-functions" tabindex="-1">I3T API functions <a class="header-anchor" href="#i3t-api-functions" aria-label="Permalink to &quot;I3T API functions&quot;">​</a></h3><h4 id="function-i3t-load-script-script-string-boolean" tabindex="-1">function <code>I3T.load_script(script: string): boolean</code> <a class="header-anchor" href="#function-i3t-load-script-script-string-boolean" aria-label="Permalink to &quot;function `I3T.load_script(script: string): boolean`&quot;">​</a></h4><p>Executes the given <code>script</code> string as Lua code.</p><h4 id="function-i3t-load-script-from-path-string-boolean" tabindex="-1">function <code>I3T.load_script_from(path: string): boolean</code> <a class="header-anchor" href="#function-i3t-load-script-from-path-string-boolean" aria-label="Permalink to &quot;function `I3T.load_script_from(path: string): boolean`&quot;">​</a></h4><p>Executes the Lua code from the file at the given <code>path</code>.</p><hr><h4 id="function-i3t-set-timer-intervalseconds-number-callback-function-timer" tabindex="-1">function <code>I3T.set_timer(intervalSeconds: number, callback: function): Timer</code> <a class="header-anchor" href="#function-i3t-set-timer-intervalseconds-number-callback-function-timer" aria-label="Permalink to &quot;function `I3T.set_timer(intervalSeconds: number, callback: function): Timer`&quot;">​</a></h4><p>Creates a new timer that will call the given <code>callback</code> function after the given <code>intervalSeconds</code> delay.</p><h4 id="function-i3t-clear-timer-timer-timer" tabindex="-1">function <code>I3T.clear_timer(timer: Timer)</code> <a class="header-anchor" href="#function-i3t-clear-timer-timer-timer" aria-label="Permalink to &quot;function `I3T.clear_timer(timer: Timer)`&quot;">​</a></h4><p>Removes the given <code>timer</code> from the scheduler.</p><h4 id="function-i3t-set-timeout-delayseconds-number-callback-function-timer" tabindex="-1">function <code>I3T.set_timeout(delaySeconds: number, callback: function): Timer</code> <a class="header-anchor" href="#function-i3t-set-timeout-delayseconds-number-callback-function-timer" aria-label="Permalink to &quot;function `I3T.set_timeout(delaySeconds: number, callback: function): Timer`&quot;">​</a></h4><p>Creates a new timer that will call the given <code>callback</code> function after the given <code>delaySeconds</code> delay.</p><h4 id="function-i3t-clear-timeout-timer-timer" tabindex="-1">function <code>I3T.clear_timeout(timer: Timer)</code> <a class="header-anchor" href="#function-i3t-clear-timeout-timer-timer" aria-label="Permalink to &quot;function `I3T.clear_timeout(timer: Timer)`&quot;">​</a></h4><p>Removes the given <code>timer</code> from the scheduler.</p>',50),c=[n];function i(u,d,l,m,h,b){return t(),a("div",null,c)}const p=e(o,[["render",i]]);export{f as __pageData,p as default};
