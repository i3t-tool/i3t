import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.0f749972.js";const g=JSON.parse('{"title":"Core::Sequence","description":"","frontmatter":{"title":"Core::Sequence","summary":"Sequence of matrices."},"headers":[],"relativePath":"cpp-api-reference/classes/classCore_1_1Sequence.md","filePath":"cpp-api-reference/classes/classCore_1_1Sequence.md"}'),n={name:"cpp-api-reference/classes/classCore_1_1Sequence.md"},r=t(`<h1 id="core-sequence" tabindex="-1">Core::Sequence <a class="header-anchor" href="#core-sequence" aria-label="Permalink to &quot;Core::Sequence&quot;">​</a></h1><p><a href="./.html">Sequence</a> of matrices. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Core/Nodes/Sequence.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a>, std::enable_shared_from_this&lt; Node &gt;</p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-sequence">Sequence</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1MatrixTracker.html">MatrixTracker</a> * tracker)</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-~sequence">~Sequence</a></strong>() override</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Transform.html">Transform</a> &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-getmatref">getMatRef</a></strong>(size_t idx)&lt;br&gt;Get reference to matrix in a sequence at given position.</td></tr><tr><td>const <a href="/cpp-api-reference/namespaces/namespaceCore.html#using-matrices">Matrices</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-getmatrices">getMatrices</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Transform.html">Transform</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-popmatrix">popMatrix</a></strong>(const int index)&lt;br&gt;Pop matrix from a sequence.</td></tr><tr><td><a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-pushmatrix">pushMatrix</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Transform.html">Transform</a> &gt; matrix)&lt;br&gt;Push <code>matrix</code> to the end of the sequence.</td></tr><tr><td><a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-pushmatrix">pushMatrix</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Transform.html">Transform</a> &gt; matrix, size_t index)&lt;br&gt;Pass matrix to a sequence.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1MatrixTracker.html">MatrixTracker</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-starttracking">startTracking</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-trackingdirection">TrackingDirection</a> direction, std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-uptr">UPtr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1IModelProxy.html">IModelProxy</a> &gt; &gt; modelProxy)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-stoptracking">stopTracking</a></strong>()</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-swap">swap</a></strong>(int from, int to)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#function-updatevalues">updateValues</a></strong>(int inputIndex) override&lt;br&gt;Computes new values of outputs based on inputs.</td></tr></tbody></table><h2 id="friends" tabindex="-1">Friends <a class="header-anchor" href="#friends" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#friend-graphmanager">GraphManager</a></strong></td></tr><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html#friend-storage">Storage</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-adddeletecallback">addDeleteCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> <em>)&gt; callback)&lt;br&gt; The callback parameters: Node</em> = node that has been deleted</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-addplugcallback">addPlugCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *, <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *, size_t, size_t)&gt; callback)&lt;br&gt;Registers a callback that gets called when the node&#39;s output pins get plugged in.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-addunplugcallback">addUnplugCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *, <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *, size_t, size_t)&gt; callback)&lt;br&gt;Registers a callback that gets called when the node&#39;s input pins get unplugged.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-addupdatecallback">addUpdateCallback</a></strong>(std::function&lt; void(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *)&gt; callback)&lt;br&gt;Registers a callback that gets called on any <a href="./.html">updateValues()</a> call.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-appendchildnode">appendChildNode</a></strong>(<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &gt; node)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-areallinputsplugged">areAllInputsPlugged</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-areallinputsunplugged">areAllInputsUnplugged</a></strong>() const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-areinputsplugged">areInputsPlugged</a></strong>(int numInputs)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;<a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; T &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-as">as</a></strong>()</td></tr><tr><td>const <a href="/cpp-api-reference/classes/classCore_1_1Data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-data">data</a></strong>(size_t index =0) const&lt;br&gt;Get <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> contents, read only.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-datamut">dataMut</a></strong>(size_t index)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-finalize">finalize</a></strong>()&lt;br&gt;Prepares node for its destruction, after that the destructor can be called.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">ID</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getid">getId</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getinput">getInput</a></strong>(size_t i)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getinputpins">getInputPins</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Data.html">Data</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getinternaldata">getInternalData</a></strong>(size_t index =0)&lt;br&gt;Get data storage for read and write purposes.</td></tr><tr><td>const char *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getlabel">getLabel</a></strong>() const</td></tr><tr><td>const <a href="/cpp-api-reference/classes/structCore_1_1Operation.html">Operation</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getoperation">getOperation</a></strong>() const</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getoutput">getOutput</a></strong>(size_t i)</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &gt; &amp;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getoutputpins">getOutputPins</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getowner">getOwner</a></strong>() const&lt;br&gt;Get direct owner of this node.</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getptr">getPtr</a></strong>()&lt;br&gt;Get reference to this node instance.</td></tr><tr><td><a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getrootowner">getRootOwner</a></strong>()&lt;br&gt;Get the topmost owner of this node.</td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getsignature">getSignature</a></strong>()&lt;br&gt;&quot;{node type} #{node ID}&quot;</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-evaluestate">EValueState</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-getstate">getState</a></strong>(size_t pinIndex =0)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-init">init</a></strong>()&lt;br&gt;Initialize node id, inputs, and outputs according to the preset node type.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-notifyowner">notifyOwner</a></strong>()</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-oninit">onInit</a></strong>()</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-operator!=">operator!=</a></strong>(const <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &amp; other) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-operator==">operator==</a></strong>(const <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &amp; other) const</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-enodeplugresult">ENodePlugResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-plug">plug</a></strong>(const <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> &gt; &amp; childNode, unsigned fromIndex, unsigned toIndex)&lt;br&gt;Connect this (parent) node output to the <code>childNode</code> input.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-pulse">pulse</a></strong>(size_t index)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-receivesignal">receiveSignal</a></strong>(int inputIndex)&lt;br&gt;Implements the operator reaction to the change of its <em>inputIndex</em> input.</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const glm::mat4 &amp; mat)</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const glm::mat4 &amp; mat, const <a href="/cpp-api-reference/classes/classCore_1_1DataMap.html">DataMap</a> &amp; map)&lt;br&gt;Smart set function, used with constrained transformation for value checking.</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const glm::quat &amp; q)</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const glm::vec3 &amp; vec)</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const glm::vec4 &amp; vec)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;<a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(const T &amp; value, unsigned index)</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(float val)&lt;br&gt;Set the value of the node.</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(float val, glm::ivec2 coords)</td></tr><tr><td>virtual <a href="/cpp-api-reference/classes/structCore_1_1SetValueResult.html">SetValueResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setvalue">setValue</a></strong>(void * ptr)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-spreadsignal">spreadSignal</a></strong>()&lt;br&gt;Spread signal to all outputs.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-spreadsignal">spreadSignal</a></strong>(size_t outIndex)&lt;br&gt;Spread signal to the selected output <em>outIndex</em> only.</td></tr></tbody></table><p><strong>Protected Functions inherited from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-node">Node</a></strong>(const <a href="/cpp-api-reference/classes/structCore_1_1Operation.html">Operation</a> &amp; operation)&lt;br&gt;<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> is never constructed directory.</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-~node">~Node</a></strong>()</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-enodeplugresult">ENodePlugResult</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-isplugcorrect">isPlugCorrect</a></strong>(const <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &amp; input, const <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &amp; output)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-onunpluginput">onUnplugInput</a></strong>(size_t index)</td></tr><tr><td>template &lt;typename T &amp;gt; &lt;br&gt;void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setinternalvalue">setInternalValue</a></strong>(const T &amp; value, size_t index =0)&lt;br&gt;Sets the node value without validation.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-setinternalvalue">setInternalValue</a></strong>(float value, glm::ivec2 coordinates, size_t index =0)</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-shouldpulse">shouldPulse</a></strong>(size_t inputIndex, size_t updatedInputIndex)&lt;br&gt;Tests if the <code>updatedInputIndex</code> should be pulsed.</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-triggerdeletecallback">triggerDeleteCallback</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * node)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-triggerplugcallback">triggerPlugCallback</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * fromNode, <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * toNode, size_t fromIndex, size_t toIndex)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-triggerunplugcallback">triggerUnplugCallback</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * fromNode, <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * toNode, size_t fromIndex, size_t toIndex)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-triggerupdatecallback">triggerUpdateCallback</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * node)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; <a href="/cpp-api-reference/namespaces/namespaceCore.html#enum-evaluestate">EValueState</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-operatorstate">m_OperatorState</a></strong></td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> * &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-children">m_children</a></strong> &lt;br&gt;Nested nodes.</td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#typedef-id">ID</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-id">m_id</a></strong></td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-inputs">m_inputs</a></strong> &lt;br&gt;Inputs of the box: Input tabs with glyphs.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Data.html">Data</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-internaldata">m_internalData</a></strong> &lt;br&gt;Results of operations.</td></tr><tr><td><a href="/cpp-api-reference/classes/structCore_1_1Operation.html">Operation</a></td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-operation">m_operation</a></strong> &lt;br&gt;<a href="./.html">Operator</a> node properties.</td></tr><tr><td>std::vector&lt; <a href="/cpp-api-reference/classes/classCore_1_1Pin.html">Pin</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-outputs">m_outputs</a></strong> &lt;br&gt;Outputs of the box: output tabs with glyphs.</td></tr><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Node.html">Node</a> *</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#variable-m-owner">m_owner</a></strong> &lt;br&gt;Owner of the node, used in complex type of nodes, such as sequence or camera.</td></tr></tbody></table><p><strong>Friends inherited from <a href="/cpp-api-reference/classes/classCore_1_1Node.html">Core::Node</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>class</td><td><strong><a href="/cpp-api-reference/classes/classCore_1_1Node.html#friend-pin">Pin</a></strong></td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;">;</span></span></code></pre></div><p><a href="./.html">Sequence</a> of matrices.</p><p>+------------------------—+ | &lt;M&gt; 0 mul | | 0 mul &lt;M&gt; 1 mat | | 1 mat &lt;M&gt; 2 model | +------------------------—+</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-sequence" tabindex="-1">function Sequence <a class="header-anchor" href="#function-sequence" aria-label="Permalink to &quot;function Sequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    MatrixTracker </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> tracker</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    MatrixTracker </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> tracker</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-sequence-1" tabindex="-1">function ~Sequence <a class="header-anchor" href="#function-sequence-1" aria-label="Permalink to &quot;function ~Sequence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#B392F0;">Sequence</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">Sequence</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><h3 id="function-getmatref" tabindex="-1">function getMatRef <a class="header-anchor" href="#function-getmatref" aria-label="Permalink to &quot;function getMatRef&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Transform</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMatRef</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">idx</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Transform</span><span style="color:#24292E;"> &gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMatRef</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">idx</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Get reference to matrix in a sequence at given position.</p><p><strong>Parameters</strong>:</p><ul><li><strong>idx</strong> Index of matrix.</li></ul><p><strong>Return</strong>: Reference to matrix holt in m_matrices vector.</p><p><strong>Be careful</strong> not to access matrix via invalid reference after calling popMatrix.</p><h3 id="function-getmatrices" tabindex="-1">function getMatrices <a class="header-anchor" href="#function-getmatrices" aria-label="Permalink to &quot;function getMatrices&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Matrices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMatrices</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Matrices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMatrices</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-popmatrix" tabindex="-1">function popMatrix <a class="header-anchor" href="#function-popmatrix" aria-label="Permalink to &quot;function popMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Transform</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">popMatrix</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Transform</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">popMatrix</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Pop matrix from a sequence.</p><p>Caller takes ownership of returned matrix.</p><h3 id="function-pushmatrix" tabindex="-1">function pushMatrix <a class="header-anchor" href="#function-pushmatrix" aria-label="Permalink to &quot;function pushMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">SetValueResult</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pushMatrix</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Transform</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">matrix</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">SetValueResult</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushMatrix</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Transform</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">matrix</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Push <code>matrix</code> to the end of the sequence.</p><p><strong>Parameters</strong>:</p><ul><li><strong>matrix</strong></li></ul><p><strong>Return</strong>:</p><h3 id="function-pushmatrix-1" tabindex="-1">function pushMatrix <a class="header-anchor" href="#function-pushmatrix-1" aria-label="Permalink to &quot;function pushMatrix&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">SetValueResult</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pushMatrix</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Transform</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">matrix</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">SetValueResult</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushMatrix</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Transform</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">matrix</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Pass matrix to a sequence.</p><p><strong>Parameters</strong>:</p><ul><li><strong>matrix</strong> Matrix to transfer.</li><li><strong>index</strong> New position of matrix.</li></ul><p><a href="/cpp-api-reference/classes/classCore_1_1Sequence.html">Sequence</a> takes ownership of matrix.</p><h3 id="function-starttracking" tabindex="-1">function startTracking <a class="header-anchor" href="#function-starttracking" aria-label="Permalink to &quot;function startTracking&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">MatrixTracker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startTracking</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">TrackingDirection</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">direction</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">UPtr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">IModelProxy</span><span style="color:#E1E4E8;"> &gt; &gt; </span><span style="color:#FFAB70;">modelProxy</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">MatrixTracker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startTracking</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">TrackingDirection</span><span style="color:#24292E;"> </span><span style="color:#E36209;">direction</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">UPtr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">IModelProxy</span><span style="color:#24292E;"> &gt; &gt; </span><span style="color:#E36209;">modelProxy</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-stoptracking" tabindex="-1">function stopTracking <a class="header-anchor" href="#function-stoptracking" aria-label="Permalink to &quot;function stopTracking&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stopTracking</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stopTracking</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="function-swap" tabindex="-1">function swap <a class="header-anchor" href="#function-swap" aria-label="Permalink to &quot;function swap&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">to</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">from</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">to</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-updatevalues" tabindex="-1">function updateValues <a class="header-anchor" href="#function-updatevalues" aria-label="Permalink to &quot;function updateValues&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateValues</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">inputIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateValues</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">inputIndex</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>Computes new values of outputs based on inputs.</p><p><strong>Parameters</strong>:</p><ul><li><strong>inputIndex</strong> Index of the modified input.</li></ul><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-updatevalues">Core::Node::updateValues</a></p><p>Encodes the box function by updating the output values for a given <em>inputIndex</em> - fired by <a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-receivesignal">receiveSignal()</a>.</p><p>The base class method calls update callbacks registered with <a href="/cpp-api-reference/classes/classCore_1_1Node.html#function-addupdatecallback">addUpdateCallback()</a>. So derived methods should also call their base method if they want to inform any outside observers.</p><h2 id="friends-1" tabindex="-1">Friends <a class="header-anchor" href="#friends-1" aria-label="Permalink to &quot;Friends&quot;">​</a></h2><h3 id="friend-graphmanager" tabindex="-1">friend GraphManager <a class="header-anchor" href="#friend-graphmanager" aria-label="Permalink to &quot;friend GraphManager&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphManager</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">GraphManager</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphManager</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">GraphManager</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="friend-storage" tabindex="-1">friend Storage <a class="header-anchor" href="#friend-storage" aria-label="Permalink to &quot;friend Storage&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Storage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Storage</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Storage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Storage</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><hr><p>Updated on 2025-01-07 at 13:40:44 +0000</p>`,74),o=[r];function l(p,c,i,d,h,u){return s(),a("div",null,o)}const m=e(n,[["render",l]]);export{g as __pageData,m as default};
