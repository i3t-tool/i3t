import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.0f749972.js";const u=JSON.parse('{"title":"Vp::GameObject","description":"","frontmatter":{"title":"Vp::GameObject","summary":"Regular world object entity."},"headers":[],"relativePath":"cpp-api-reference/classes/classVp_1_1GameObject.md","filePath":"cpp-api-reference/classes/classVp_1_1GameObject.md"}'),n={name:"cpp-api-reference/classes/classVp_1_1GameObject.md"},l=t(`<h1 id="vp-gameobject" tabindex="-1">Vp::GameObject <a class="header-anchor" href="#vp-gameobject" aria-label="Permalink to &quot;Vp::GameObject&quot;">​</a></h1><p>Regular world object entity. <a href="#detailed-description">More...</a></p><p><code>#include &quot;Viewport/entity/GameObject.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></p><p>Inherited by <a href="/cpp-api-reference/classes/classVp_1_1ColoredObject.html">Vp::ColoredObject</a>, <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html">Vp::TexturedObject</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-gameobject">GameObject</a></strong>() =default&lt;br&gt;Creates an empty <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a>.</td></tr><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-gameobject">GameObject</a></strong>(<a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> * mesh, <a href="/cpp-api-reference/classes/classVp_1_1ObjectShader.html">ObjectShader</a> * shader)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-dispose">dispose</a></strong>() override</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-render">render</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> * shader, glm::mat4 view, glm::mat4 projection, bool silhouette) override&lt;br&gt;IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#function-update">update</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene) override</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/classCore_1_1Mesh.html">Core::Mesh</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#variable-m-mesh">m_mesh</a></strong></td></tr><tr><td>float</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1GameObject.html#variable-m-opacity">m_opacity</a></strong></td></tr></tbody></table><h2 id="additional-inherited-members" tabindex="-1">Additional inherited members <a class="header-anchor" href="#additional-inherited-members" aria-label="Permalink to &quot;Additional inherited members&quot;">​</a></h2><p><strong>Public Functions inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-entity">Entity</a></strong>()</td></tr><tr><td>virtual</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-~entity">~Entity</a></strong>() =default</td></tr><tr><td>virtual <a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-getdisplaytype">getDisplayType</a></strong>() const</td></tr><tr><td>virtual glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-gethighlightcolor">getHighlightColor</a></strong>() const</td></tr><tr><td>virtual bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-ishighlighted">isHighlighted</a></strong>() const</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneadd">onSceneAdd</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Called when the entity is added to a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-onsceneremove">onSceneRemove</a></strong>(<a href="/cpp-api-reference/classes/classVp_1_1Scene.html">Scene</a> &amp; scene)&lt;br&gt;Called when the entity is removed from a scene.</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-setdisplaytype">setDisplayType</a></strong>(<a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a> type)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlightcolor">setHighlightColor</a></strong>(glm::vec3 highlightColor)</td></tr><tr><td>virtual void</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-sethighlighted">setHighlighted</a></strong>(bool highlight)</td></tr></tbody></table><p><strong>Public Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-backfacecull">m_backFaceCull</a></strong></td></tr><tr><td>unsigned int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-explicittransparencyorder">m_explicitTransparencyOrder</a></strong> &lt;br&gt;Explicit order for ordered transparency.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlight">m_highlight</a></strong> &lt;br&gt;Whether to paint this entity with an outline, can be used for selection or just highlighting.</td></tr><tr><td>glm::vec3</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightcolor">m_highlightColor</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-highlightusedepth">m_highlightUseDepth</a></strong> &lt;br&gt;Whether the highlight outline should respect the scene&#39;s depth buffer.</td></tr><tr><td>glm::mat4</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-modelmatrix">m_modelMatrix</a></strong> &lt;br&gt;Model transformation of the entity.</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-opaque">m_opaque</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectable">m_selectable</a></strong> &lt;br&gt;Whether this entity should be written into the selection stencil buffer.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-selectionid">m_selectionId</a></strong> &lt;br&gt;Id of the object, -1 if not assigned, for selection purposes.</td></tr><tr><td><a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> *</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-shader">m_shader</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-visible">m_visible</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboit">m_wboit</a></strong> &lt;br&gt;Whether this entity should be rendered using order independent transparency, relevant if using a shader that supports wboit.</td></tr><tr><td>int</td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-wboitfunc">m_wboitFunc</a></strong> &lt;br&gt;Index of the weight function to be used in wboit.</td></tr></tbody></table><p><strong>Protected Attributes inherited from <a href="/cpp-api-reference/classes/classVp_1_1Entity.html">Vp::Entity</a></strong></p><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/namespaces/namespaceVp.html#enum-displaytype">DisplayType</a></td><td><strong><a href="/cpp-api-reference/classes/classVp_1_1Entity.html#variable-m-displaytype">m_displayType</a></strong></td></tr></tbody></table><h2 id="detailed-description" tabindex="-1">Detailed Description <a class="header-anchor" href="#detailed-description" aria-label="Permalink to &quot;Detailed Description&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vp</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Regular world object entity.</p><p>Represents a physical drawable object.</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-gameobject" tabindex="-1">function GameObject <a class="header-anchor" href="#function-gameobject" aria-label="Permalink to &quot;function GameObject&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=default</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=default</span></span></code></pre></div><p>Creates an empty <a href="/cpp-api-reference/classes/classVp_1_1GameObject.html">GameObject</a>.</p><p>Before rendering a mesh and a shader need to be set!</p><h3 id="function-gameobject-1" tabindex="-1">function GameObject <a class="header-anchor" href="#function-gameobject-1" aria-label="Permalink to &quot;function GameObject&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GameObject</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::Mesh </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> mesh,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ObjectShader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> shader</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GameObject</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::Mesh </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> mesh,</span></span>
<span class="line"><span style="color:#24292E;">    ObjectShader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> shader</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-dispose" tabindex="-1">function dispose <a class="header-anchor" href="#function-dispose" aria-label="Permalink to &quot;function dispose&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-dispose">Vp::Entity::dispose</a></p><h3 id="function-render" tabindex="-1">function render <a class="header-anchor" href="#function-render" aria-label="Permalink to &quot;function render&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shader</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">projection</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">silhouette</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shader</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;"> </span><span style="color:#E36209;">projection</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">silhouette</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p>IMPLEMENTATION NOTE: Derived entity classes should expect a certain kind of shader and be able to directly static cast to it.</p><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-render">Vp::Entity::render</a></p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-render">Vp::SceneModel::render</a>, <a href="/cpp-api-reference/classes/classVp_1_1TexturedObject.html#function-render">Vp::TexturedObject::render</a></p><p>Currently there is no error checking and wrongly passed shader type will CAUSE UNDEFINED BEHAVIOUR!</p><p>Using dynamic casts instead might be undesirable (slow) here (this might just be a premature optimalization) Generally the shader passed to this method is the m_shader of this entity. However we need functionality that allows us to change the shader temporarily (like for drawing silhouettes) Because of this the shader can also sometimes be something else, usually some derived type of the one the entity expects. I couldn&#39;t find a way to inform what kinds of shaders an entity is able to use in its render methods. The type of the shader must be the base <a href="/cpp-api-reference/classes/classVp_1_1Shader.html">Shader</a> class and so some kind of casting must occur.</p><p>Another option could be to use some kind of a typeid/enum system that tells us what type a shader is (rather than use dynamic cast). But that approach ignores inheritance which we need and having multiple types of shaders and entity member variable seems very inflexible.</p><p>The true elegant solution probably doesn&#39;t involve inheritance at all and rather uses composition, together with an ECS or something. But it was decided to not dive into that realm and so we are stuck with this seemingly simple but not very flexible inheritance structure.</p><h3 id="function-update" tabindex="-1">function update <a class="header-anchor" href="#function-update" aria-label="Permalink to &quot;function update&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">scene</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">override</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">scene</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">override</span></span></code></pre></div><p><strong>Reimplements</strong>: <a href="/cpp-api-reference/classes/classVp_1_1Entity.html#function-update">Vp::Entity::update</a></p><p><strong>Reimplemented by</strong>: <a href="/cpp-api-reference/classes/classVp_1_1SceneCamera.html#function-update">Vp::SceneCamera::update</a>, <a href="/cpp-api-reference/classes/classVp_1_1SceneModel.html#function-update">Vp::SceneModel::update</a></p><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-mesh" tabindex="-1">variable m_mesh <a class="header-anchor" href="#variable-m-mesh" aria-label="Permalink to &quot;variable m_mesh&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::Mesh </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> m_mesh;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::Mesh </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> m_mesh;</span></span></code></pre></div><h3 id="variable-m-opacity" tabindex="-1">variable m_opacity <a class="header-anchor" href="#variable-m-opacity" aria-label="Permalink to &quot;variable m_opacity&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> m_opacity {</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> m_opacity {</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">};</span></span></code></pre></div><hr><p>Updated on 2025-01-23 at 08:58:04 +0000</p>`,50),p=[l];function r(o,c,i,d,h,y){return s(),a("div",null,p)}const b=e(n,[["render",r]]);export{u as __pageData,b as default};
