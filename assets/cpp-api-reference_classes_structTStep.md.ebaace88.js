import{_ as t,o as a,c as e,Q as s}from"./chunks/framework.0f749972.js";const m=JSON.parse('{"title":"TStep","description":"","frontmatter":{"title":"TStep"},"headers":[],"relativePath":"cpp-api-reference/classes/structTStep.md","filePath":"cpp-api-reference/classes/structTStep.md"}'),n={name:"cpp-api-reference/classes/structTStep.md"},o=s('<h1 id="tstep" tabindex="-1">TStep <a class="header-anchor" href="#tstep" aria-label="Permalink to &quot;TStep&quot;">​</a></h1><p><code>#include &quot;Tutorial/Tutorial.h&quot;</code></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/structtstep.html#function-tstep">TStep</a></strong>() =default</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::vector&lt; std::shared_ptr&lt; <a href="/cpp-api-reference/classes/structtutorialelement.html">TutorialElement</a> &gt; &gt;</td><td><strong><a href="/cpp-api-reference/classes/structtstep.html#variable-m-content">m_content</a></strong></td></tr><tr><td>std::string</td><td><strong><a href="/cpp-api-reference/classes/structtstep.html#variable-m-scripttorunwhenshown">m_scriptToRunWhenShown</a></strong></td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-tstep" tabindex="-1">function TStep <a class="header-anchor" href="#function-tstep" aria-label="Permalink to &quot;function TStep&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">TStep</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=default</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">TStep</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=default</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-m-content" tabindex="-1">variable m_content <a class="header-anchor" href="#variable-m-content" aria-label="Permalink to &quot;variable m_content&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::shared_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> TutorialElement </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> m_content;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::shared_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> TutorialElement </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m_content;</span></span></code></pre></div><h3 id="variable-m-scripttorunwhenshown" tabindex="-1">variable m_scriptToRunWhenShown <a class="header-anchor" href="#variable-m-scripttorunwhenshown" aria-label="Permalink to &quot;variable m_scriptToRunWhenShown&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string m_scriptToRunWhenShown;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string m_scriptToRunWhenShown;</span></span></code></pre></div><hr><p>Updated on 2024-03-16 at 18:59:44 +0000</p>',16),l=[o];function c(p,r,i,d,u,h){return a(),e("div",null,l)}const y=t(n,[["render",c]]);export{m as __pageData,y as default};
