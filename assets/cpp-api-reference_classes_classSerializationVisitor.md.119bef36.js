import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.0f749972.js";const y=JSON.parse('{"title":"SerializationVisitor","description":"","frontmatter":{"title":"SerializationVisitor"},"headers":[],"relativePath":"cpp-api-reference/classes/classSerializationVisitor.md","filePath":"cpp-api-reference/classes/classSerializationVisitor.md"}'),e={name:"cpp-api-reference/classes/classSerializationVisitor.md"},t=o(`<h1 id="serializationvisitor" tabindex="-1">SerializationVisitor <a class="header-anchor" href="#serializationvisitor" aria-label="Permalink to &quot;SerializationVisitor&quot;">​</a></h1><p><code>#include &quot;State/SerializationVisitor.h&quot;</code></p><p>Inherits from <a href="/cpp-api-reference/classes/classNodeVisitor.html">NodeVisitor</a></p><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href="/cpp-api-reference/classes/classSerializationVisitor.html#function-serializationvisitor">SerializationVisitor</a></strong>(<a href="/cpp-api-reference/files/Stateful_8h.html#using-memento">Memento</a> &amp; memento)</td></tr><tr><td>void</td><td><strong><a href="/cpp-api-reference/classes/classSerializationVisitor.html#function-dump">dump</a></strong>(const std::vector&lt; <a href="/cpp-api-reference/files/Types_8h.html#using-ptr">Ptr</a>&lt; <a href="/cpp-api-reference/files/NodeVisitor_8h.html#using-guinode">GuiNode</a> &gt;&gt; &amp; nodes)</td></tr></tbody></table><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-serializationvisitor" tabindex="-1">function SerializationVisitor <a class="header-anchor" href="#function-serializationvisitor" aria-label="Permalink to &quot;function SerializationVisitor&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SerializationVisitor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    Memento </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> memento</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SerializationVisitor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Memento </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> memento</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="function-dump" tabindex="-1">function dump <a class="header-anchor" href="#function-dump" aria-label="Permalink to &quot;function dump&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dump</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">GuiNode</span><span style="color:#E1E4E8;"> &gt;&gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dump</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">Ptr</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">GuiNode</span><span style="color:#24292E;"> &gt;&gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nodes</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><hr><p>Updated on 2024-10-15 at 20:41:58 +0000</p>`,12),l=[t];function i(p,r,c,d,u,h){return a(),n("div",null,l)}const m=s(e,[["render",i]]);export{y as __pageData,m as default};
