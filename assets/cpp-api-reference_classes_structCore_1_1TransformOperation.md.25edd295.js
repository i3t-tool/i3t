import{_ as a,o as s,c as e,Q as t}from"./chunks/framework.0f749972.js";const b=JSON.parse('{"title":"Core::TransformOperation","description":"","frontmatter":{"title":"Core::TransformOperation","summary":"Extends Operation - adds properties to transform nodes."},"headers":[],"relativePath":"cpp-api-reference/classes/structCore_1_1TransformOperation.md","filePath":"cpp-api-reference/classes/structCore_1_1TransformOperation.md"}'),n={name:"cpp-api-reference/classes/structCore_1_1TransformOperation.md"},o=t(`<h1 id="core-transformoperation" tabindex="-1">Core::TransformOperation <a class="header-anchor" href="#core-transformoperation" aria-label="Permalink to &quot;Core::TransformOperation&quot;">​</a></h1><p>Extends <a href="/cpp-api-reference/classes/structCore_1_1Operation.html">Operation</a> - adds properties to transform nodes.</p><p><code>#include &quot;Core/Nodes/Operations.h&quot;</code></p><h2 id="public-classes" tabindex="-1">Public Classes <a class="header-anchor" href="#public-classes" aria-label="Permalink to &quot;Public Classes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>struct</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation_1_1NameTypePair.html">NameTypePair</a></strong></td></tr></tbody></table><h2 id="public-types" tabindex="-1">Public Types <a class="header-anchor" href="#public-types" aria-label="Permalink to &quot;Public Types&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>using std::vector&lt; <a href="/cpp-api-reference/classes/structCore_1_1TransformOperation_1_1NameTypePair.html">NameTypePair</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#using-valuemap">ValueMap</a></strong> &lt;br&gt;Names and types of DefaultValues (parameters for matrix definition in the middle LOD, such as fovy in Perspective)</td></tr></tbody></table><h2 id="public-functions" tabindex="-1">Public Functions <a class="header-anchor" href="#public-functions" aria-label="Permalink to &quot;Public Functions&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::optional&lt; <a href="/cpp-api-reference/classes/structCore_1_1TransformOperation_1_1NameTypePair.html">NameTypePair</a> &gt;</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#function-getdefaultvaluetype">getDefaultValueType</a></strong>(const std::string &amp; name) const</td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#function-hasdefaultvalue">hasDefaultValue</a></strong>(const std::string &amp; name) const</td></tr></tbody></table><h2 id="public-attributes" tabindex="-1">Public Attributes <a class="header-anchor" href="#public-attributes" aria-label="Permalink to &quot;Public Attributes&quot;">​</a></h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#using-valuemap">ValueMap</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#variable-defaultvaluestypes">defaultValuesTypes</a></strong></td></tr><tr><td>bool</td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#variable-isrotation">isRotation</a></strong></td></tr><tr><td><a href="/cpp-api-reference/namespaces/namespaceCore.html#using-transformmask">TransformMask</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#variable-mask">mask</a></strong></td></tr><tr><td><a href="/cpp-api-reference/classes/structCore_1_1Operation.html">Operation</a></td><td><strong><a href="/cpp-api-reference/classes/structCore_1_1TransformOperation.html#variable-operation">operation</a></strong></td></tr></tbody></table><h2 id="public-types-documentation" tabindex="-1">Public Types Documentation <a class="header-anchor" href="#public-types-documentation" aria-label="Permalink to &quot;Public Types Documentation&quot;">​</a></h2><h3 id="using-valuemap" tabindex="-1">using ValueMap <a class="header-anchor" href="#using-valuemap" aria-label="Permalink to &quot;using ValueMap&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Core</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TransformOperation</span><span style="color:#E1E4E8;">::ValueMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">NameTypePair</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Core</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TransformOperation</span><span style="color:#24292E;">::ValueMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">NameTypePair</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Names and types of DefaultValues (parameters for matrix definition in the middle LOD, such as fovy in Perspective)</p><h2 id="public-functions-documentation" tabindex="-1">Public Functions Documentation <a class="header-anchor" href="#public-functions-documentation" aria-label="Permalink to &quot;Public Functions Documentation&quot;">​</a></h2><h3 id="function-getdefaultvaluetype" tabindex="-1">function getDefaultValueType <a class="header-anchor" href="#function-getdefaultvaluetype" aria-label="Permalink to &quot;function getDefaultValueType&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">optional</span><span style="color:#E1E4E8;">&lt; </span><span style="color:#B392F0;">NameTypePair</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">getDefaultValueType</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">optional</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">NameTypePair</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">getDefaultValueType</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><h3 id="function-hasdefaultvalue" tabindex="-1">function hasDefaultValue <a class="header-anchor" href="#function-hasdefaultvalue" aria-label="Permalink to &quot;function hasDefaultValue&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasDefaultValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasDefaultValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span></code></pre></div><h2 id="public-attributes-documentation" tabindex="-1">Public Attributes Documentation <a class="header-anchor" href="#public-attributes-documentation" aria-label="Permalink to &quot;Public Attributes Documentation&quot;">​</a></h2><h3 id="variable-defaultvaluestypes" tabindex="-1">variable defaultValuesTypes <a class="header-anchor" href="#variable-defaultvaluestypes" aria-label="Permalink to &quot;variable defaultValuesTypes&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ValueMap defaultValuesTypes;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ValueMap defaultValuesTypes;</span></span></code></pre></div><h3 id="variable-isrotation" tabindex="-1">variable isRotation <a class="header-anchor" href="#variable-isrotation" aria-label="Permalink to &quot;variable isRotation&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> isRotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> isRotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="variable-mask" tabindex="-1">variable mask <a class="header-anchor" href="#variable-mask" aria-label="Permalink to &quot;variable mask&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TransformMask mask;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TransformMask mask;</span></span></code></pre></div><h3 id="variable-operation" tabindex="-1">variable operation <a class="header-anchor" href="#variable-operation" aria-label="Permalink to &quot;variable operation&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Operation operation;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Operation operation;</span></span></code></pre></div><hr><p>Updated on 2024-10-16 at 16:58:01 +0000</p>`,31),l=[o];function p(r,c,i,d,u,h){return s(),e("div",null,l)}const m=a(n,[["render",p]]);export{b as __pageData,m as default};
